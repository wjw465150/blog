<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>shell技巧</title>
<style type="text/css">
body, th{font:12pt 宋体}
A:link { text-decoration:underline; color:#E6A306}
A:visited { text-decoration:underline; color:#E6A306}
A:hover { text-decoration:underline; color:#FFFF00}
body {  font-family: "宋体", "serif"; font-size: 12pt}
td {  font-family: "宋体", "serif"; font-size: 12pt}
p  { font-size: 9pt; line-height: 150%}
</style>
</head>

<body text="#000000" bgcolor="#c0c0c0" background="../../../images/bline.gif" topmargin="5" marginheight="5" leftmargin="0" marginwidth="0">

<center>
<table border="0" width="750" cellspacing="0" cellpadding="0">
	<tr>
		<td width="100%" height="2" bgcolor="#d09f0d">
		<IMG src="c.gif" width=1 height=1></td>
	</tr>
</table>
<table width="750" border="0" cellspacing="0" cellpadding="0">
	<tr>
		<td valign="top" align="center"><br>
		<table width="90%" border="0" cellspacing="0" cellpadding="0" align="center">
			<tr>
				<th class="f24">
				<h1>shell技巧</h1>
				</th>
			</tr>
			<tr>
				<td><br>
				</td>
			</tr>
			<tr>
				<td></td>
			</tr>
			<tr>
				<td class="l17"><font id="zoom" class="f14">
				<font color="#cccccc">
				<table class="normalfont" cellspacing="0" cellpadding="3" width="100%" border="0">
					<tr>
						<td valign="top">
						<p><font class="normalfont"><br>
						1.test测试命令<br>
						test命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试，<br>
						其测试符和相应的功能分别如下：<br>
						(1)数值测试：<br>
						-eq：等于则为真<br>
						-ne：不等于则为真<br>
						-gt：大于则为真<br>
						-ge：大于等于则为真<br>
						-lt：小于则为真<br>
						-le：小于等于则为真<br>
						(2)字符串测试：<br>
						=：等于则为真<br>
						!=：不相等则为真<br>
						-z 字符串：字符串长度伪则为真<br>
						-n 字符串：字符串长度不伪则为真<br>
						(3)文件测试：<br>
						-e 文件名：如果文件存在则为真<br>
						-r 文件名：如果文件存在且可读则为真<br>
						-w 文件名：如果文件存在且可写则为真<br>
						-x 文件名：如果文件存在且可执行则为真<br>
						-s 文件名：如果文件存在且至少有一个字符则为真<br>
						-d 文件名：如果文件存在且为目录则为真<br>
						-f 文件名：如果文件存在且为普通文件则为真<br>
						-c 文件名：如果文件存在且为字符型特殊文件则为真<br>
						-b 文件名：如果文件存在且为块特殊文件则为真<br>
						另外，Linux还提供了与(“！”)、或(“-o)、非(“-a”)三个逻辑操作符用于将测试条件连接起来，<br>
						其优先级为：“！”最高，“-a”次之，“-o”最低。<br>
						同时，bash也能完成简单的算术运算，格式如下：<br>
						$[expression]<br>
						例如：var1=2<br>
						var2=$[var1*10+1]<br>
						则：var2的值为21。<br>
						<br>
						2.if条件语句<br>
						if [ -x /sbin/quotaon ]; then <br>
						echo "Turning on Quota for root filesystem" <br>
						/sbin/quotaon / <br>
						elif [ -x /sbin/quotaon ]; then<br>
						/usr/bin/bash<br>
						else<br>
						echo "ok"<br>
						fi <br>
						<br>
						3.for 循环<br>
						#!/bin/sh<br>
						WORD="a b c d e f g h i j l m n o p q r s t u v w x y z"<br>
						for i in $WORD ; do <br>
						echo $i <br>
						done <br>
						<br>
						#!/bin/sh <br>
						FILES=`ls /txt/*.txt`<br>
						for txt in $FILES ; do <br>
						doc=`echo $txt | sed "s/.txt/.doc/"` <br>
						mv $txt $doc <br>
						done <br>
						<br>
						4.while和until 循环<br>
						#!/bin/sh <br>
						while [ -f /var/run/ppp0.pid ] ; do <br>
						killall pppd<br>
						done<br>
						<br>
						#!/bin/sh <br>
						until [ -f /var/run/ppp0.pid ] ; do <br>
						sleep 1 <br>
						done<br>
						<br>
						Shell还提供了true和false两条命令用于建立无限循环结构的需要，<br>
						它们的返回状态分别是总为0或总为非0<br>
						<br>
						5.case 条件选择<br>
						#!/bin/sh <br>
						case $1 in <br>
						start | begin) <br>
						echo "start something" <br>
						;; <br>
						stop | end) <br>
						echo "stop something" <br>
						;; <br>
						*) <br>
						echo "Ignorant" <br>
						;; <br>
						esac<br>
						case表达式中也可以使用shell的通配符(“*”、“？”、“[ ]”)。<br>
						<br>
						6.无条件控制语句break和continue<br>
						break 用于立即终止当前循环的执行，而contiune用于不执行循环中后面的语句<br>
						而立即开始下一个循环的执行。这两个语句只有放在do和done之间才有效。<br>
						<br>
						7.函数定义<br>
						在shell中还可以定义函数。函数实际上也是由若干条shell命令组成的，<br>
						因此它与shell程序形式上是相似的，不同的是它不是一个单独的进程，<br>
						而是shell程序的一部分。函数定义的基本格式为：<br>
						functionname<br>
						{<br>
						若干命令行<br>
						}<br>
						调用函数的格式为：<br>
						functionname param1 param2 ……<br>
						shell函数可以完成某些例行的工作，而且还可以有自己的退出状态，<br>
						因此函数也可以作为if、while等控制结构的条件。<br>
						在函数定义时不用带参数说明，但在调用函数时可以带有参数，此时<br>
						shell将把这些参数分别赋予相应的位置参数$1、$2、...及$*。<br>
						<br>
						8.命令分组<br>
						在shell中有两种命令分组的方法：“()”和“{}”，前者当shell执行()<br>
						中的命令时将再创建一个新的子进程，然后这个子进程去执行圆括弧中的命令。<br>
						当用户在执行某个命令时不想让命令运行时对状态集合(如位置参数、环境变量、<br>
						当前工作目录等)的改变影响到下面语句的执行时，就应该把这些命令放在圆括<br>
						弧中，这样就能保证所有的改变只对子进程产生影响，而父进程不受任何干扰；<br>
						{}用于将顺序执行的命令的输出结果用于另一个命令的输入(管道方式)。当我们<br>
						要真正使用圆括弧和花括弧时(如计算表达式的优先级)，则需要在其前面加上转<br>
						义符(\)以便让shell知道它们不是用于命令执行的控制所用。<br>
						<br>
						9.信号<br>
						trap命令用于在shell程序中捕捉到信号，之后可以有三种反应方式：<br>
						(1)执行一段程序来处理这一信号<br>
						(2)接受信号的默认操作<br>
						(3)忽视这一信号<br>
						trap对上面三种方式提供了三种基本形式：<br>
						第一种形式的trap命令在shell接收到signal list清单中数值相同的信号时，<br>
						将执行双引号中的命令串。<br>
						trap 'commands' signal-list<br>
						trap "commands" signal-list<br>
						为了恢复信号的默认操作，使用第二种形式的trap命令：<br>
						trap signal-list<br>
						第三种形式的trap命令允许忽视信号：<br>
						trap " " signal-list<br>
						注意：<br>
						(1)对信号11(段违例)不能捕捉，因为shell本身需要捕捉该信号去进行内存的转储。<br>
						(2)在trap中可以定义对信号0的处理(实际上没有这个信号)，shell程序在其终止<br>
						(如执行exit语句)时发出该信号。<br>
						(3)在捕捉到signal-list中指定的信号并执行完相应的命令之后，如果这些命令没有将<br>
						shell程序终止的话，shell程序将继续执行收到信号时所执行的命令后面的命令，这样<br>
						将很容易导致shell程序无法终止。<br>
						另外，在trap语句中，单引号和双引号是不同的，当shell程序第一次碰到trap语句时，<br>
						将把commands中的命令扫描一遍。此时若commands是用单引号括起来的话，那么shell<br>
						不会对commands中的变量和命令进行替换，否则commands中的变量和命令将用当时具体<br>
						的值来替换。<br>
						<br>
						10. 运行shell程序的方法<br>
						执行shell程序的方法有三种：<br>
						(1)sh shell程序文件名<br>
						格式为：<br>
						bash shell 程序文件名<br>
						这实际上是调用一个新的bash命令解释程序，而把shell程序文件名作为参数传递给它。<br>
						新启动的shell将去读指定的文件，执行文件中列出的命令，当所有的命令都执行完结束。<br>
						该方法的优点是可以利用shell调试功能。<br>
						(2)sh&lt;shell程序文件名<br>
						格式为：<br>
						bash&lt;shell 程序文件名<br>
						这种方式就是利用输入重定向，使shell命令解释程序的输入取自指定的程序文件。<br>
						(3)用chmod命令使shell程序成为可执行的<br>
						<br>
						11. bash程序的调试<br>
						bash -选择项 shell程序文件名<br>
						几个常用的选择项是：<br>
						-e：如果一个命令失败就立即退出<br>
						-n：读入命令但是不执行它们<br>
						-u：置换时把未设置的变量看作出错<br>
						-v：当读入shell输入行时把它们显示出来<br>
						-x：执行命令时把命令和它们的参数显示出来<br>
						上面的所有选项也可以在shell程序内部用“set -选择项”的形式引用，而“set +选择项”则<br>
						将禁止该选择项起作用。如果只想对程序的某一部分使用某些选择项时，则可以将该部分用<br>
						上面两个语句包围起来。<br>
						1.未置变量退出和立即退出<br>
						未置变量退出特性允许用户对所有变量进行检查，如果引用了一个未赋值的变量就终止shell<br>
						程序的执行。shell通常允许未置变量的使用，在这种情况下，变量的值为空。如果设置了未<br>
						置变量退出选择项，则一旦使用了未置变量就显示错误信息，并终止程序的运行。未置变量退<br>
						出选择项为“-u”。<br>
						当shell运行时，若遇到不存在或不可执行的命令、重定向失败或命令非正常结束等情况时，如<br>
						果未经重新定向，该出错信息会打印在终端屏幕上，而shell程序仍将继续执行。要想在错误发<br>
						生时迫使shell程序立即结束，可以使用“-e”选项将shell程序的执行立即终止。<br>
						2.shell程序的跟踪<br>
						调试shell程序的主要方法是利用shell命令解释程序的“-v”或“-x”选项来跟踪程序的执行。“-v”<br>
						选择项使shell在执行程序的过程中，把它读入的每一个命令行都显示出来，而“-x”选择项使shell<br>
						在执行程序的过程中把它执行的每一个命令在行首用一个“+”加上命令名显示出来。并把每一个变量<br>
						和该变量所取的值也显示出来，因此，它们的主要区别在于：在执行命令行之前无“-v”则打印出命<br>
						令行的原始内容，而有“-v”则打印出经过替换后的命令行的内容。<br>
						除了使用shell的“-v”和“-x”选择项以外，还可以在shell程序内部采取一些辅助调试的措施。<br>
						例如，可以在shell程序的一些关键地方使用echo命令把必要的信息显示出来，它的作用相当于C语<br>
						言中的printf语句，这样就可以知道程序运行到什么地方及程序目前的状态。<br>
						<br>
						12. bash的内部命令<br>
						bash命令解释程序包含了一些内部命令。内部命令在目录列表时是看不见的，它们由shell本身提供。<br>
						常用的内部命令有：echo、eval、exec、export、readonly、read、shift、wait和点(.)。<br>
						下面简单介绍其命令格式和功能。<br>
						1.echo<br>
						命令格式：echo arg<br>
						功能：在屏幕上打印出由arg指定的字符串。<br>
						2.eval<br>
						命令格式：eval args<br>
						功能：当shell程序执行到eval语句时，shell读入参数args，并将它们组合成一个新的命令，然后<br>
						执行。<br>
						3.exec<br>
						命令格式：exec 命令 命令参数<br>
						功能：当shell执行到exec语句时，不会去创建新的子进程，而是转去执行指定的命令，<br>
						当指定的命令执行完时，该进程，也就是最初的shell就终止了，所以shell程序中exec<br>
						后面的语句将不再被执行。<br>
						4.export<br>
						命令格式：export 变量名 或：export 变量名=变量值<br>
						功能：shell可以用export把它的变量向下带入子shell从而让子进程继承父进程中的环境变量。<br>
						但子shell不能用export把它的变量向上带入父shell。<br>
						注意：不带任何变量名的export语句将显示出当前所有的export变量。<br>
						5.readonly<br>
						命令格式：readonly 变量名<br>
						功能：将一个用户定义的shell变量标识为不可变的。不带任何参数的readonly命令将显示出<br>
						所有只读的shell变量。<br>
						6.read<br>
						命令格式：<br>
						read变量名表<br>
						功能：从标准输入设备读入一行，分解成若干字，赋值给shell程序内部定义的变量。<br>
						7.shift语句<br>
						功能：shift语句按如下方式重新命名所有的位置参数变量：$2成为$1，$3成为$2……在程序中<br>
						每使用一次shift语句，都使所有的位置参数依次向左移动一个位置，并使位置参数“$#”减一，<br>
						直到减到0。<br>
						8.wait<br>
						功能：是shell等待在后台启动的所有子进程结束。Wait的返回值总是真。<br>
						9.exit<br>
						功能：退出shell程序。在exit之后可有选择地指定一个数字作为返回状态。<br>
						10.“.”(点)<br>
						命令格式：. Shell程序文件名<br>
						功能：使shell读入指定的shell程序文件并依次执行文件中的所有语句。<br>
						<br>
						13. 特殊参数：<br>
						1. $*: 代表所有参数，其间隔为IFS内定参数的第一个字元 <br>
						2. $@: 与*星号类同。不同之处在於不参照IFS<br>
						3. $#: 代表参数数量<br>
						4. $?: 执行上一个指令的返回值<br>
						5. $-: 最近执行的foreground pipeline的选项参数<br>
						6. $$: 本身的Process ID<br>
						7. $!: 执行上一个背景指令的PID<br>
						8. $_: 显示出最後一个执行的命令</font><br>
						</p>
						</td>
					</tr>
					<tr>
						<td><br>
						全文结束 </td>
					</tr>
				</table>
				<br>
				<br>
				</font><br>
				<br>
				</font></td>
			</tr>
		</table>
		<br>
		</td>
	</tr>
</table>
</center>
<P>&nbsp;</P>
<P>&nbsp;</P>

</body>

</html>