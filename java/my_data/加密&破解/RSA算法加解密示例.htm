<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>RSA算法加解密示例</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<H1 
style="FONT-SIZE: 2em; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial">RSA加密与解密</H1>
<P 
style="FONT-SIZE: 14px; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial">RSA算法的密钥由公钥和私钥组成，公钥用于加密，私钥用于解密。顾名思义，公钥就是可以进行公开的密钥，一般可以公开给你的合作伙伴；私钥就是私有的，也就是只有你知道的，你的合作伙伴通过你提供的公钥进行加密的内容只有你能进行解密，这样也就只有你知道他发的是什么内容。用于加密的公钥和私钥是配对的。这样的一对密钥在Java中由<CODE 
style='FONT-SIZE: 1em; FONT-FAMILY: "Courier New", Courier, monospace; WHITE-SPACE: pre'>java.security.KeyPairGenerator</CODE>来产生。以下是一个生成密钥对的示例，该示例中还将生成的密钥对分别保存到了文件中。</P>
<DIV class="highlight highlight-source-java" 
style="FONT-SIZE: 14px; TEXT-DECORATION: none; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(226,136,34); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal"><PRE style="FONT-SIZE: 1em; FONT-FAMILY: monospace">	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">private</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">static</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">final</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">String</SPAN> <SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">ALGORITHM</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-s style="COLOR: rgb(24,54,145)"><SPAN class=pl-pds>"</SPAN>RSA<SPAN class=pl-pds>"</SPAN></SPAN>;
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">private</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">static</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">final</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">String</SPAN> <SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">PRIVATE_KEY_PATH</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-s style="COLOR: rgb(24,54,145)"><SPAN class=pl-pds>"</SPAN>D:<SPAN class=pl-cce>\\</SPAN>rsa_private.isa<SPAN class=pl-pds>"</SPAN></SPAN>;
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">private</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">static</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">final</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">String</SPAN> <SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">PUBLIC_KEY_PATH</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-s style="COLOR: rgb(24,54,145)"><SPAN class=pl-pds>"</SPAN>D:<SPAN class=pl-cce>\\</SPAN>rsa_public.isa<SPAN class=pl-pds>"</SPAN></SPAN>;
	
	<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>/*</SPAN>*</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * 生成公钥和私钥并存储到文件中</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * @throws Exception</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 <SPAN class=pl-c>*/</SPAN></SPAN>
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">@Test</SPAN>
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">public</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">void</SPAN> geneKeyPair() throws <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Exception</SPAN> {
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">KeyPairGenerator</SPAN> keyPairGenerator <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">KeyPairGenerator</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getInstance(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">ALGORITHM</SPAN>);
		keyPairGenerator<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>initialize(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">1024</SPAN>);
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">KeyPair</SPAN> keyPair <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> keyPairGenerator<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>generateKeyPair();
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">PrivateKey</SPAN> privateKey <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> keyPair<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getPrivate();<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>私钥</SPAN>
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">PublicKey</SPAN> publicKey <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> keyPair<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getPublic();<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>公钥</SPAN>
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] privateKeyBytes <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> privateKey<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getEncoded();<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>私钥对应的字节数组</SPAN>
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] publicKeyBytes <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> publicKey<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getEncoded();<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>公钥对应的字节数组</SPAN>
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Files</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>write(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Paths</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>get(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">PRIVATE_KEY_PATH</SPAN>), privateKeyBytes);
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Files</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>write(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Paths</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>get(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">PUBLIC_KEY_PATH</SPAN>), publicKeyBytes);
	}</PRE></DIV>
<H2 
style="FONT-SIZE: 1.5em; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial"><A 
class=anchor style="TEXT-DECORATION: underline; COLOR: rgb(125,0,0)" 
href="https://github.com/elim168/elim168.github.io/blob/master/java/01.RSA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86.md#%E5%8A%A0%E5%AF%86"></A>加密</H2>
<P 
style="FONT-SIZE: 14px; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial">加密的过程跟使用AES算法进行加密的过程类似，唯一需要注意的是使用存储起来的公钥时需要使用<CODE 
style='FONT-SIZE: 1em; FONT-FAMILY: "Courier New", Courier, monospace; WHITE-SPACE: pre'>X509EncodedKeySpec</CODE>进行封装，然后通过<CODE 
style='FONT-SIZE: 1em; FONT-FAMILY: "Courier New", Courier, monospace; WHITE-SPACE: pre'>KeyFactory.generatePublic(KeySpec)</CODE>进行生成。</P>
<DIV class="highlight highlight-source-java" 
style="FONT-SIZE: 14px; TEXT-DECORATION: none; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(226,136,34); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal"><PRE style="FONT-SIZE: 1em; FONT-FAMILY: monospace">	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">@Test</SPAN>
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">public</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">void</SPAN> testEncrypt() throws <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Exception</SPAN> {
		<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">this</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>encrypt(<SPAN class=pl-s style="COLOR: rgb(24,54,145)"><SPAN class=pl-pds>"</SPAN>Hello RSA<SPAN class=pl-pds>"</SPAN></SPAN>);
	}
	
	<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>/*</SPAN>*</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * 公钥加密</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * @param value</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * @return</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * @throws Exception</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 <SPAN class=pl-c>*/</SPAN></SPAN>
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">private</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] encrypt(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">String</SPAN> value) throws <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Exception</SPAN> {
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Cipher</SPAN> cipher <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Cipher</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getInstance(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">ALGORITHM</SPAN>);
		<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>读取公钥对应的字节数组</SPAN>
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] publicKeyCode <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Files</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>readAllBytes(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Paths</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>get(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">PUBLIC_KEY_PATH</SPAN>));
		<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>构造公钥，存储起来的公钥需要使用X509EncodedKeySpec进行读取</SPAN>
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">X509EncodedKeySpec</SPAN> keySpec <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">new</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">X509EncodedKeySpec</SPAN>(publicKeyCode);
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">KeyFactory</SPAN> keyFactory <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">KeyFactory</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getInstance(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">ALGORITHM</SPAN>);
		<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>根据已有的KeySpec生成对应的公钥</SPAN>
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">PublicKey</SPAN> publicKey <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> keyFactory<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>generatePublic(keySpec);
		cipher<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>init(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Cipher</SPAN><SPAN class=pl-c1 style="COLOR: rgb(0,134,179)"><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>ENCRYPT_MODE</SPAN>, publicKey);
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] result <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> cipher<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>doFinal(value<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getBytes());
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">System</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>out<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>println(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Base64</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getEncoder()<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>encodeToString(result));
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">return</SPAN> result;
	}</PRE></DIV>
<H2 
style="FONT-SIZE: 1.5em; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial"><A 
class=anchor style="TEXT-DECORATION: underline; COLOR: rgb(125,0,0)" 
href="https://github.com/elim168/elim168.github.io/blob/master/java/01.RSA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86.md#%E8%A7%A3%E5%AF%86"></A>解密</H2>
<P 
style="FONT-SIZE: 14px; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial">解密是使用的密钥对中的私钥，其使用方法跟AES算法进行解密类似。 
存储起来的私钥需要通过<CODE 
style='FONT-SIZE: 1em; FONT-FAMILY: "Courier New", Courier, monospace; WHITE-SPACE: pre'>PKCS8EncodedKeySpec</CODE>加载，然后通过<CODE 
style='FONT-SIZE: 1em; FONT-FAMILY: "Courier New", Courier, monospace; WHITE-SPACE: pre'>KeyFactory.generatePrivate(KeySpec)</CODE>生成私钥。</P>
<DIV class="highlight highlight-source-java" 
style="FONT-SIZE: 14px; TEXT-DECORATION: none; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(226,136,34); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal"><PRE style="FONT-SIZE: 1em; FONT-FAMILY: monospace">	<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>/*</SPAN>*</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * 私钥解密</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 * @throws Exception</SPAN>
<SPAN class=pl-c style="COLOR: rgb(150,152,150)">	 <SPAN class=pl-c>*/</SPAN></SPAN>
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">@Test</SPAN>
	<SPAN class=pl-k style="COLOR: rgb(167,29,93)">public</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">void</SPAN> testDecrypt() throws <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Exception</SPAN> {
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Cipher</SPAN> cipher <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Cipher</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getInstance(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">ALGORITHM</SPAN>);
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] privateKeyCode <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Files</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>readAllBytes(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Paths</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>get(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">PRIVATE_KEY_PATH</SPAN>));
		<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>私钥需要通过PKCS8EncodedKeySpec来读取</SPAN>
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">PKCS8EncodedKeySpec</SPAN> keySpec <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-k style="COLOR: rgb(167,29,93)">new</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">PKCS8EncodedKeySpec</SPAN>(privateKeyCode);
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">KeyFactory</SPAN> keyFactory <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">KeyFactory</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>getInstance(<SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">ALGORITHM</SPAN>);
		<SPAN class=pl-c style="COLOR: rgb(150,152,150)"><SPAN class=pl-c>//</SPAN>生成私钥</SPAN>
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">PrivateKey</SPAN> privateKey <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> keyFactory<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>generatePrivate(keySpec);
		cipher<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>init(<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Cipher</SPAN><SPAN class=pl-c1 style="COLOR: rgb(0,134,179)"><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>DECRYPT_MODE</SPAN>, privateKey);
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">String</SPAN> content <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-s style="COLOR: rgb(24,54,145)"><SPAN class=pl-pds>"</SPAN>Java Program<SPAN class=pl-pds>"</SPAN></SPAN>;
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] input <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> <SPAN class=pl-c1 style="COLOR: rgb(0,134,179)">this</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>encrypt(<SPAN class=pl-s style="COLOR: rgb(24,54,145)"><SPAN class=pl-pds>"</SPAN>Java Program<SPAN class=pl-pds>"</SPAN></SPAN>);
		<SPAN class=pl-k style="COLOR: rgb(167,29,93)">byte</SPAN>[] result <SPAN class=pl-k style="COLOR: rgb(167,29,93)">=</SPAN> cipher<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>doFinal(input);
		<SPAN class=pl-smi style="COLOR: rgb(51,51,51)">Assert</SPAN><SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>assertTrue(content<SPAN class=pl-k style="COLOR: rgb(167,29,93)">.</SPAN>equals(<SPAN class=pl-k style="COLOR: rgb(167,29,93)">new</SPAN> <SPAN class=pl-smi style="COLOR: rgb(51,51,51)">String</SPAN>(result)));
	}</PRE></DIV>
<P 
style="FONT-SIZE: 14px; FONT-FAMILY: Helvetica, Tahoma, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial">&nbsp;</P></body>
</html>
