<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>双重检查锁定失败可能性</title>
<body>
<p>双重检查锁定在延迟初始化的单例模式中见得比较多(单例模式实现方式很多，这里为说明双重检查锁定问题，只选取这一种方式)，先来看一个版本：</p>
<p></p>
<pre><ol class="dp-j"><li class="alt"><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;Singleton&nbsp;{ &nbsp;</span></span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">null</span><span>; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;Singleton(){} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;&nbsp;getInstance()&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(instance&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;Singleton(); &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">return</span><span>&nbsp;instance; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>} &nbsp;</span></li></ol>
</pre>
<p></p>
<p>上面是最原始的模式，一眼就可以看出，在多线程环境下，可能会产生多个Singleton实例，于是有了其同步的版本：</p>
<p></p>
<pre><ol class="dp-j"><li class="alt"><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;Singleton&nbsp;{ &nbsp;</span></span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">null</span><span>; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;Singleton(){} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">synchronized</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(instance&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;Singleton(); &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">return</span><span>&nbsp;instance; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>} &nbsp;</span></li></ol>
</pre>
<p></p>
<p>在这个版本中，每次调用getInstance都需要取得Singleton.class上的锁，然而该锁只是在开始构建Singleton 对象的时候才是必要的，后续的多线程访问，效率会降低，于是有了接下来的版本：</p>
<p></p>
<pre><ol class="dp-j"><li class="alt"><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;Singleton&nbsp;{ &nbsp;</span></span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">null</span><span>; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;Singleton(){} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(instance&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">synchronized</span><span>(Singleton.</span><span class="keyword">class</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(instance&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;Singleton(); &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">return</span><span>&nbsp;instance; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>} &nbsp;</span></li></ol>
</pre>
<p></p>
<p>很好的想法!不幸的是，该方案也未能解决问题之根本：</p>
<p>原因在于：初始化Singleton 和 将对象地址写到instance字段 的顺序是不确定的。在某个线程new 
  Singleton()时，在构造方法被调用之前，就为该对象分配了内存空间并将对象的字段设置为默认值。此时就可以将分配的内存地址赋值给
  instance字段了，然而该对象可能还没有初始化;此时若另外一个线程来调用getInstance，取到的就是状态不正确的对象。</p>
<p>鉴于以上原因，有人可能提出下列解决方案：</p>
<p></p>
<pre><ol class="dp-j"><li class="alt"><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;Singleton&nbsp;{ &nbsp;</span></span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">null</span><span>; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;Singleton(){} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(instance&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Singleton&nbsp;temp; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">synchronized</span><span>(Singleton.</span><span class="keyword">class</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;instance; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(temp&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">synchronized</span><span>(Singleton.</span><span class="keyword">class</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;Singleton(); &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;temp; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">return</span><span>&nbsp;instance; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>} &nbsp;</span></li></ol>
</pre>
<p></p>
<p>该方案将Singleton对象的构造置于最里面的同步块，这种思想是在退出该同步块时设置一个内存屏障，以阻止初始化Singleton 和 将对象地址写到instance字段 的重新排序。</p>
<p>不幸的是，这种想法也是错误的，同步的规则不是这样的。退出监视器(退出同步)的规则是：所以在退出监视器前面的动作都必须在释放监视器之前完成。
  然而，并没有规定说退出监视器之后的动作不能放到退出监视器之前完成。也就是说同步块里的代码必须在退出同步时完成，而同步块后面的代码则可以被编译器或
  运行时环境移到同步块中执行。</p>
<p>编译器可以合法的，也是合理的，将instance =  temp移动到最里层的同步块内，这样就出现了上个版本同样的问题。</p>
<p>在JDK1.5及其后续版本中，扩充了volatile语义，系统将不允许对 写入一个volatile变量的操作与其之前的任何读写操作 重新排序，也不允许将 读取一个volatile变量的操作与其之后的任何读写操作 重新排序。</p>
<p>在jdk1.5及其后的版本中，可以将instance 设置成volatile以让双重检查锁定生效，如下：</p>
<p></p>
<pre><ol class="dp-j"><li class="alt"><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;Singleton&nbsp;{ &nbsp;</span></span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">volatile</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">null</span><span>; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">private</span><span>&nbsp;Singleton(){} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(instance&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">synchronized</span><span>(Singleton.</span><span class="keyword">class</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">if</span><span>(instance&nbsp;==&nbsp;</span><span class="keyword">null</span><span>)&nbsp;{ &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;Singleton(); &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword">return</span><span>&nbsp;instance; &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span><li><span>&nbsp;</span><li class="alt"><span>} &nbsp;</span></li></ol>
</pre>
<p></p>
<p>需要注意的是：在JDK1.4以及之前的版本中，该方式仍然有问题。</p>
</body>
</htm
</html>
