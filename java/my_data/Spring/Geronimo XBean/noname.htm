<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">

<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Geronimo XBean</title><LINK 
href="favicon.ico" type=image/x-icon rel="shortcut icon"><LINK 
title=whitesock href="rss" type=application/rss+xml rel=alternate><LINK 
media=screen href="blog.css_1253614056" 
type=text/css rel=stylesheet><LINK media=screen 
href="blue.css_1235723792" 
type=text/css rel=stylesheet>
<LINK media=screen 
href="SyntaxHighlighter.css_1201588027" 
type=text/css rel=stylesheet>
<STYLE>
    div#main {background-color: transparent; border: 0; padding: 0px; width: 740px;}
  </STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-default .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-default .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-default .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>
</HEAD>

<BODY>

<DIV id=page>

<DIV class=clearfix id=content>

<DIV id=main>

<DIV class=blog_main><!--StartFragment--><DIV class=blog_title>
<DIV class=date><SPAN class=year>2009</SPAN><SPAN class=sep_year>-</SPAN><SPAN 
class=month>08</SPAN><SPAN class=sep_month>-</SPAN><SPAN 
class=day>26</SPAN></DIV>
<H3 class=type_original title=原创><A href="http://whitesock.javaeye.com/blog/457601">Geronimo 
XBean</A></H3><STRONG>关键字: spring xbean</STRONG> </DIV>
<DIV class=blog_content>
<P><STRONG>1 Overview</STRONG> <BR>&nbsp;&nbsp;&nbsp; XBean是Apache Geronimo的子项目，目标是像Eclipse 
IDE那样，用于创建基于插件的服务器（跟Geronimo GBean的目标有些重合）。从现状来看，XBean更多地被用于简化Spring 
配置。例如，Apache ActiveMQ的配置基于XBean。<BR><BR><STRONG>2 Custom namespace</STRONG> 
<BR>&nbsp;&nbsp;&nbsp; 最简单的custom namespace是java://加上全路径包名的形式，以下是个简单的例子：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.commons.lang.builder.ToStringBuilder; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.commons.lang.builder.ToStringStyle; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Product&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;BigDecimal&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;toString()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ToStringBuilder(</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>,&nbsp;ToStringStyle.SHORT_PREFIX_STYLE) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN class=string>"name"</SPAN><SPAN>,&nbsp;name) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN 
class=string>"price"</SPAN><SPAN>,&nbsp;price).toString(); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;getName()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setName(String&nbsp;name)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.name&nbsp;=&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;BigDecimal&nbsp;getPrice()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setPrice(BigDecimal&nbsp;price)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.price&nbsp;=&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import java.math.BigDecimal;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

public class Product {
	private String name;
	private BigDecimal price;

	public String toString() {
		return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
		.append("name", name)
		.append("price", price).toString();
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public BigDecimal getPrice() {
		return price;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}
}</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是配置文件xbean.xml的内容：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>xmlns:p</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"java://com.versus.misc.xbean"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>p:Product</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"product"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"USD/JPY"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>price</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"100.00"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;beans xmlns:p="java://com.versus.misc.xbean"&gt;
  &lt;p:Product id="product" name="USD/JPY" price="100.00"/&gt;
&lt;/beans&gt;</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是测试用的test case：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertEquals; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertNotNull; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.xbean.spring.context.ClassPathXmlApplicationContext; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;org.junit.Test; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;XBeanTest&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Test</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;test()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassPathXmlApplicationContext&nbsp;context&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ClassPathXmlApplicationContext(</SPAN><SPAN 
class=string>"classpath:com/versus/misc/xbean/xbean.xml"</SPAN><SPAN>); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Product&nbsp;product&nbsp;=&nbsp;(Product)context.getBean(</SPAN><SPAN 
class=string>"product"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(product); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=string>"USD/JPY"</SPAN><SPAN>,&nbsp;product.getName()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BigDecimal(</SPAN><SPAN 
class=string>"100.00"</SPAN><SPAN>),&nbsp;product.getPrice()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.math.BigDecimal;

import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
import org.junit.Test;

public class XBeanTest {

	@Test
	public void test() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:com/versus/misc/xbean/xbean.xml");
		Product product = (Product)context.getBean("product");
		assertNotNull(product);
		assertEquals("USD/JPY", product.getName());
		assertEquals(new BigDecimal("100.00"), product.getPrice());
	}
}</PRE>
<P>&nbsp;&nbsp;&nbsp; 以上的例子中，custom 
namespace是java://com.versus.misc.xbean；Product是定义在com.versus.misc.xbean包中的一个类；Product类的成员变量都被映射成XML的属性。需要注意的是，必须使用org.xbean.spring.context.ClassPathXmlApplicationContext，而不是Spring自带的ApplicationContext。</P>
<P>&nbsp;</P>
<P><STRONG>3 Custom mapping</STRONG> <BR>&nbsp;&nbsp;&nbsp; 
在之前的例子中，如果给Product类增加一个名为id的int型成员变量，那么为了避免和标准Spring属性的冲突，应该使用custom 
mapping。首先要在META-INF/services/org/apache/xbean/spring/目录下建立一个名为$namespace的属性文件。例如，如果namespace是http://xbean.versus.com/product，那么需要建立META-INF/services/org/apache/xbean/spring/http/xbean.versus.com/product文件，其内容如下：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Properties代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-default>
<LI><SPAN><SPAN>package&nbsp;=&nbsp;com.versus.misc.xbean &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>product&nbsp;=&nbsp;com.versus.misc.xbean.Product &nbsp;&nbsp;</SPAN>
<LI><SPAN>product.alias.productId&nbsp;=&nbsp;id&nbsp;#将id成员变量映射为productId属性&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=properties style="DISPLAY: none" name="code">package = com.versus.misc.xbean
product = com.versus.misc.xbean.Product
product.alias.productId = id #将id成员变量映射为productId属性</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是配置文件xbean.xml的内容：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>xmlns:p</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"http://xbean.versus.com/product"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>p:product</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"product"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>productId</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"1"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"USD/JPY"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>price</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"100.00"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;beans xmlns:p="http://xbean.versus.com/product" &gt;
  &lt;p:product id="product" productId="1" name="USD/JPY" price="100.00"/&gt;
&lt;/beans&gt;</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是测试用的test case：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertEquals; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertNotNull; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.xbean.spring.context.ClassPathXmlApplicationContext; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;org.junit.Test; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;XBeanTest&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Test</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;test()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassPathXmlApplicationContext&nbsp;context&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ClassPathXmlApplicationContext(</SPAN><SPAN 
class=string>"classpath:com/versus/misc/xbean/xbean.xml"</SPAN><SPAN>); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Product&nbsp;product&nbsp;=&nbsp;(Product)context.getBean(</SPAN><SPAN 
class=string>"product"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(product); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=number>1</SPAN><SPAN>,&nbsp;product.getId()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=string>"USD/JPY"</SPAN><SPAN>,&nbsp;product.getName()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BigDecimal(</SPAN><SPAN 
class=string>"100.00"</SPAN><SPAN>),&nbsp;product.getPrice()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.math.BigDecimal;

import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
import org.junit.Test;

public class XBeanTest {

	@Test
	public void test() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:com/versus/misc/xbean/xbean.xml");
		Product product = (Product)context.getBean("product");
		assertNotNull(product);
		assertEquals(1, product.getId());
		assertEquals("USD/JPY", product.getName());
		assertEquals(new BigDecimal("100.00"), product.getPrice());
	}
}</PRE>
<P>&nbsp;</P>
<P><STRONG>4 Constructor injection</STRONG> <BR>&nbsp;&nbsp;&nbsp; 
除了setter注入之外，XBean也支持constructor注入，以下是个简单的例子：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.commons.lang.builder.ToStringBuilder; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.commons.lang.builder.ToStringStyle; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Product&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;id; &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;BigDecimal&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;Leverage&nbsp;leverage; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;toString()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ToStringBuilder(</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>,&nbsp;ToStringStyle.SHORT_PREFIX_STYLE) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN class=string>"id"</SPAN><SPAN>,&nbsp;id) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN class=string>"name"</SPAN><SPAN>,&nbsp;name) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN class=string>"price"</SPAN><SPAN>,&nbsp;price) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN 
class=string>"leverage"</SPAN><SPAN>,&nbsp;leverage).toString(); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;getId()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setId(</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;id)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.id&nbsp;=&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;getName()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setName(String&nbsp;name)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.name&nbsp;=&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;BigDecimal&nbsp;getPrice()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setPrice(BigDecimal&nbsp;price)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.price&nbsp;=&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;Leverage&nbsp;getLeverage()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;leverage; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setLeverage(Leverage&nbsp;leverage)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.leverage&nbsp;=&nbsp;leverage; &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import java.math.BigDecimal;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

public class Product {
	private int id;
	private String name;
	private BigDecimal price;
	private Leverage leverage;

	public String toString() {
		return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
		.append("id", id)
		.append("name", name)
		.append("price", price)
		.append("leverage", leverage).toString();
	}
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public BigDecimal getPrice() {
		return price;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	public Leverage getLeverage() {
		return leverage;
	}

	public void setLeverage(Leverage leverage) {
		this.leverage = leverage;
	}
}</PRE>&nbsp; 
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Leverage&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;value; &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;BigDecimal&nbsp;margin; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;Leverage(</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;value,&nbsp;BigDecimal&nbsp;margin)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.value&nbsp;=&nbsp;value; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.margin&nbsp;=&nbsp;margin; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;getValue()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;value; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;BigDecimal&nbsp;getMargin()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;margin; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import java.math.BigDecimal;

public class Leverage {
	private int value;
	private BigDecimal margin;
	
	public Leverage(int value, BigDecimal margin) {
		this.value = value;
		this.margin = margin;
	}
	
	public int getValue() {
		return value;
	}
	
	public BigDecimal getMargin() {
		return margin;
	}
}</PRE>
<P>&nbsp;&nbsp;&nbsp; 
META-INF/services/org/apache/xbean/spring/http/xbean.versus.com/product文件的内容如下:</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Properties代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-default>
<LI><SPAN><SPAN>package&nbsp;=&nbsp;com.versus.misc.xbean &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>product&nbsp;=&nbsp;com.versus.misc.xbean.Product &nbsp;&nbsp;</SPAN>
<LI><SPAN>leverage&nbsp;=&nbsp;com.versus.misc.xbean.Leverage &nbsp;&nbsp;</SPAN>
<LI><SPAN>product.alias.productId&nbsp;=&nbsp;id &nbsp;&nbsp;</SPAN>
<LI><SPAN>com.versus.misc.xbean.Leverage(int,java.math.BigDecimal).parameterNames=value&nbsp;margin&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=properties style="DISPLAY: none" name="code">package = com.versus.misc.xbean
product = com.versus.misc.xbean.Product
leverage = com.versus.misc.xbean.Leverage
product.alias.productId = id
com.versus.misc.xbean.Leverage(int,java.math.BigDecimal).parameterNames=value margin</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是配置文件xbean.xml的内容：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>xmlns:p</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"http://xbean.versus.com/product"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>p:product</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"product"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>productId</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"1"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"##USD/JPY"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>price</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"100.00"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>leverage</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"#leverage"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>p:leverage</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"leverage"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"50"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>margin</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"12345"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;beans xmlns:p="http://xbean.versus.com/product"&gt;
  &lt;p:product id="product" productId="1" name="##USD/JPY" price="100.00" leverage="#leverage"/&gt;
  &lt;p:leverage id="leverage" value="50" margin="12345"/&gt;
&lt;/beans&gt;</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是测试用的test case：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertEquals; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertNotNull; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.xbean.spring.context.ClassPathXmlApplicationContext; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;org.junit.Test; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;XBeanTest&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Test</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;test()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassPathXmlApplicationContext&nbsp;context&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ClassPathXmlApplicationContext(</SPAN><SPAN 
class=string>"classpath:com/versus/misc/xbean/xbean.xml"</SPAN><SPAN>); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Product&nbsp;product&nbsp;=&nbsp;(Product)context.getBean(</SPAN><SPAN 
class=string>"product"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(product); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=number>1</SPAN><SPAN>,&nbsp;product.getId()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=string>"#USD/JPY"</SPAN><SPAN>,&nbsp;product.getName()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BigDecimal(</SPAN><SPAN 
class=string>"100.00"</SPAN><SPAN>),&nbsp;product.getPrice()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Leverage&nbsp;leverage&nbsp;=&nbsp;(Leverage)context.getBean(</SPAN><SPAN 
class=string>"leverage"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(leverage); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=number>50</SPAN><SPAN>,&nbsp;leverage.getValue()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BigDecimal(</SPAN><SPAN 
class=string>"12345"</SPAN><SPAN>),&nbsp;leverage.getMargin()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(leverage,&nbsp;product.getLeverage()); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.math.BigDecimal;

import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
import org.junit.Test;

public class XBeanTest {

	@Test
	public void test() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:com/versus/misc/xbean/xbean.xml");
		
		Product product = (Product)context.getBean("product");
		assertNotNull(product);
		assertEquals(1, product.getId());
		assertEquals("#USD/JPY", product.getName());
		assertEquals(new BigDecimal("100.00"), product.getPrice());
		
		Leverage leverage = (Leverage)context.getBean("leverage");
		assertNotNull(leverage);
		assertEquals(50, leverage.getValue());
		assertEquals(new BigDecimal("12345"), leverage.getMargin());
		
		assertEquals(leverage, product.getLeverage());
	}
}</PRE>
<P>&nbsp;&nbsp;&nbsp; 
需要注意的是，以上例子中p:product的leverage属性通过#引用了leverage。如果你期望配置一个以#开头的字符串，那么字符串的需要以##开头（例如以上例子中，product中name成员变量的值是#USD/JPY）。</P>
<P>&nbsp;</P>
<P><STRONG>5 Assembling collections</STRONG> <BR>&nbsp;&nbsp;&nbsp; 
跟Spring一样，XBean也支持装配集合类型。以上的例子中，假设每种FX交易的商品可以有多个杠杆，那么需要进行以下的修改：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.util.List; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.commons.lang.builder.ToStringBuilder; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.commons.lang.builder.ToStringStyle; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Product&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;id; &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;BigDecimal&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>private</SPAN><SPAN>&nbsp;List&lt;Leverage&gt;&nbsp;leverages; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;toString()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ToStringBuilder(</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>,&nbsp;ToStringStyle.SHORT_PREFIX_STYLE) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN class=string>"id"</SPAN><SPAN>,&nbsp;id) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN class=string>"name"</SPAN><SPAN>,&nbsp;name) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN class=string>"price"</SPAN><SPAN>,&nbsp;price) 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(</SPAN><SPAN 
class=string>"leverages"</SPAN><SPAN>,&nbsp;leverages).toString(); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;getId()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setId(</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;id)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.id&nbsp;=&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;getName()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setName(String&nbsp;name)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.name&nbsp;=&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;BigDecimal&nbsp;getPrice()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setPrice(BigDecimal&nbsp;price)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>this</SPAN><SPAN>.price&nbsp;=&nbsp;price; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;List&lt;Leverage&gt;&nbsp;getLeverages()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;leverages; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setLeverages(List&lt;Leverage&gt;&nbsp;leverages)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.leverages&nbsp;=&nbsp;leverages; &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import java.math.BigDecimal;
import java.util.List;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

public class Product {
	private int id;
	private String name;
	private BigDecimal price;
	private List&lt;Leverage&gt; leverages;

	public String toString() {
		return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
		.append("id", id)
		.append("name", name)
		.append("price", price)
		.append("leverages", leverages).toString();
	}
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public BigDecimal getPrice() {
		return price;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	public List&lt;Leverage&gt; getLeverages() {
		return leverages;
	}

	public void setLeverages(List&lt;Leverage&gt; leverages) {
		this.leverages = leverages;
	}
}</PRE>
<P>&nbsp;&nbsp;&nbsp; 
META-INF/services/org/apache/xbean/spring/http/xbean.versus.com/product文件的内容如下:</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Properties代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-default>
<LI><SPAN><SPAN>package&nbsp;=&nbsp;com.versus.misc.xbean &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>product&nbsp;=&nbsp;com.versus.misc.xbean.Product &nbsp;&nbsp;</SPAN>
<LI><SPAN>leverage&nbsp;=&nbsp;com.versus.misc.xbean.Leverage &nbsp;&nbsp;</SPAN>
<LI><SPAN>product.alias.productId&nbsp;=&nbsp;id &nbsp;&nbsp;</SPAN>
<LI><SPAN>product.alias.leverages.list&nbsp;=&nbsp;leverages &nbsp;&nbsp;</SPAN>
<LI><SPAN>com.versus.misc.xbean.Leverage(int,java.math.BigDecimal).parameterNames=value&nbsp;margin&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=properties style="DISPLAY: none" name="code">package = com.versus.misc.xbean
product = com.versus.misc.xbean.Product
leverage = com.versus.misc.xbean.Leverage
product.alias.productId = id
product.alias.leverages.list = leverages
com.versus.misc.xbean.Leverage(int,java.math.BigDecimal).parameterNames=value margin
</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是配置文件xbean.xml的内容：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>xmlns:p</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"http://xbean.versus.com/product"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>p:product</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"product"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>productId</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"1"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"USD/JPY"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>price</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"100.00"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>leverages</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>p:leverage</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"leverage1"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"50"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>margin</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"12345"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>p:leverage</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"leverage2"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"100"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>margin</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"24690"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>leverages</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>p:product</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;beans xmlns:p="http://xbean.versus.com/product"&gt;
  &lt;p:product id="product" productId="1" name="USD/JPY" price="100.00"&gt;
      &lt;leverages&gt;
          &lt;p:leverage id="leverage1" value="50" margin="12345"/&gt;
          &lt;p:leverage id="leverage2" value="100" margin="24690"/&gt;
      &lt;/leverages&gt;
  &lt;/p:product&gt;
&lt;/beans&gt;</PRE>
<P>&nbsp;&nbsp;&nbsp; 以下是测试用的test case：</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://whitesock.javaeye.com/blog/457601#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;com.versus.misc.xbean; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertEquals; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;org.junit.Assert.assertNotNull; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.math.BigDecimal; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.apache.xbean.spring.context.ClassPathXmlApplicationContext; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;org.junit.Test; 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;XBeanTest&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Test</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;test()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassPathXmlApplicationContext&nbsp;context&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ClassPathXmlApplicationContext(</SPAN><SPAN 
class=string>"classpath:com/versus/misc/xbean/xbean.xml"</SPAN><SPAN>); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Product&nbsp;product&nbsp;=&nbsp;(Product)context.getBean(</SPAN><SPAN 
class=string>"product"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(product); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=number>1</SPAN><SPAN>,&nbsp;product.getId()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=string>"USD/JPY"</SPAN><SPAN>,&nbsp;product.getName()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BigDecimal(</SPAN><SPAN 
class=string>"100.00"</SPAN><SPAN>),&nbsp;product.getPrice()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=number>2</SPAN><SPAN>,&nbsp;product.getLeverages().size()); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Leverage&nbsp;leverage1&nbsp;=&nbsp;product.getLeverages().get(</SPAN><SPAN 
class=number>0</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(leverage1); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=number>50</SPAN><SPAN>,&nbsp;leverage1.getValue()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BigDecimal(</SPAN><SPAN 
class=string>"12345"</SPAN><SPAN>),&nbsp;leverage1.getMargin()); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Leverage&nbsp;leverage2&nbsp;=&nbsp;product.getLeverages().get(</SPAN><SPAN 
class=number>1</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(leverage2); &nbsp;&nbsp;</SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=number>100</SPAN><SPAN>,&nbsp;leverage2.getValue()); &nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BigDecimal(</SPAN><SPAN 
class=string>"24690"</SPAN><SPAN>),&nbsp;leverage2.getMargin()); 
&nbsp;&nbsp;</SPAN></SPAN>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">package com.versus.misc.xbean;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.math.BigDecimal;

import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
import org.junit.Test;

public class XBeanTest {

	@Test
	public void test() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:com/versus/misc/xbean/xbean.xml");
		
		Product product = (Product)context.getBean("product");
		assertNotNull(product);
		assertEquals(1, product.getId());
		assertEquals("USD/JPY", product.getName());
		assertEquals(new BigDecimal("100.00"), product.getPrice());
		assertEquals(2, product.getLeverages().size());
		
		Leverage leverage1 = product.getLeverages().get(0);
		assertNotNull(leverage1);
		assertEquals(50, leverage1.getValue());
		assertEquals(new BigDecimal("12345"), leverage1.getMargin());
		
		Leverage leverage2 = product.getLeverages().get(1);
		assertNotNull(leverage2);
		assertEquals(100, leverage2.getValue());
		assertEquals(new BigDecimal("24690"), leverage2.getMargin());
	}
}</PRE></DIV><!--EndFragment--></DIV>
</DIV>
</DIV>
</DIV>
<P>&nbsp;</P>
<P>&nbsp;</P>
</BODY>
</HTML>