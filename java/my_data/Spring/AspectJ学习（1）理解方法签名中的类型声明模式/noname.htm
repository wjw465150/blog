<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD id=Head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>AspectJ学习（1）理解方法签名中的类型声明模式</title><LINK 
id=MainCss href="style.css" 
type=text/css rel=stylesheet><LINK id=RSSLink title=RSS 
href="rss.aspx" type=application/rss+xml 
rel=alternate></HEAD>

<BODY>

<FORM id=Form1 name=Form1 action=128772.html method="post" 
_initialAction="128772.html">

<DIV id=main>

<DIV class=post><!--StartFragment--><DIV class=postTitle><A id=viewpost1_TitleUrl 
href="http://www.blogjava.net/kafka0102/archive/2007/07/07/128772.html">AspectJ学习（1）理解方法签名中的类型声明模式</A> 
</DIV>
<DIV class=postText>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 让我好好想想，</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>AspectJ</FONT> </FONT><FONT size=2>中最常用的切入点是什么？哦，也许是</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>call</FONT> </FONT><FONT size=2>（</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>Method-Signature</FONT> </FONT><FONT size=2>）吧。这是个相对简单的方法签名。实际上，方法签名的完整形式如下：</FONT> </P>
<P align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>[modifiers] 
[returnTypePattern] [DeclaredTypePattern.]methodName([Parameters])[throws 
TypePattern]</FONT> </FONT><FONT size=2>，其中方括号中的签名组件是可选的。</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>modifiers </FONT></FONT><FONT size=2>为修饰符模式，</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>returnTypePattern </FONT></FONT><FONT size=2>为返回类型模式，</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>DeclaredTypePattern </FONT></FONT><FONT size=2>为类型声明模式，</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>methodName 
</FONT></FONT><FONT size=2>为方法名称，</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>Parameters </FONT></FONT><FONT size=2>为方法参数，</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>throws TypePattern </FONT></FONT><FONT size=2>为</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>throw</FONT> 
</FONT><FONT size=2>字句。该文仅仅介绍 </FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>DeclaredTypePattern</FONT> </FONT><FONT size=2>，因为相比之下其它模式比较简单的多。</FONT> 
</P>
<P align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2></FONT></FONT><FONT size=2>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 在介绍类型声明模式之前，介绍一下类型模式。类型模式是匹配一种类型或一系列类型的方法。精确的类型模式是如</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>java.lang.String</FONT> </FONT><FONT size=2>一样的完整的有效类型名。但在使用</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>AspectJ</FONT> </FONT><FONT size=2>类型模式时，经常会用到下列通配符（这些通配符同样适用于</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>Spring</FONT> </FONT><FONT size=2>的</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>AOP</FONT> 
</FONT><FONT size=2>）。</FONT> </P>
<P align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>1</FONT> </FONT><FONT size=2>）“</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>*”</FONT> 
</FONT><FONT size=2>：代表任意字符的零次或多次出现。当嵌入到一串字符的内部时，它匹配任意字符的零次或多次出现，除了包分割符（</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>.</FONT> </FONT><FONT size=2>）。</FONT> </P>
<P align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>2</FONT> </FONT><FONT size=2>）“</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>+”</FONT> 
</FONT><FONT size=2>：用作类型模式的后缀，代表此类型和其所有的子类型（那些扩展或实现带后缀类型的类型）。</FONT> </P>
<P align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>3</FONT> </FONT><FONT size=2>）“</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>..”</FONT> 
</FONT><FONT size=2>：用于指定所有的子包，它匹配任意以包分割符开头和结束的字符串。<BR>&nbsp;</FONT> </P><FONT size=2>下面给出几个示例：</FONT> 
<P align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN lang=en-US>1</SPAN> </FONT></FONT></FONT><FONT size=2>）</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN lang=en-US><B>*Account</B> 
</SPAN></FONT></FONT></FONT><FONT size=2>使用</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>Account</SPAN> </FONT></FONT></FONT><FONT size=2>名称结束的类型，如</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>CheckingAccount<BR>2</SPAN> </FONT></FONT></FONT><FONT size=2>）</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN lang=en-US><B>java.*.Date</B> 
</SPAN></FONT></FONT></FONT><FONT size=2>类型</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>Date</SPAN> </FONT></FONT></FONT><FONT size=2>在任何直接的</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>java</SPAN> </FONT></FONT></FONT><FONT size=2>子包中，如</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>java.util.Date</SPAN> </FONT></FONT></FONT><FONT size=2>和</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>java.sql.Date<BR>3</SPAN> </FONT></FONT></FONT><FONT size=2>）</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US><B>java..* </B></SPAN></FONT></FONT></FONT><FONT size=2>任何在</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>java</SPAN> </FONT></FONT></FONT><FONT size=2>包或者所有子包中的类型，如</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>java.awt</SPAN> </FONT></FONT></FONT><FONT size=2>或者</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>java.awt.event <BR>4</SPAN> </FONT></FONT></FONT><FONT size=2>）</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN lang=en-US><B>javax..*Model+ 
</B></SPAN></FONT></FONT></FONT><FONT size=2>所有</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>javax</SPAN> </FONT></FONT></FONT><FONT size=2>包或者子包中以</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>Model</SPAN> </FONT></FONT></FONT><FONT size=2>结尾的类型和其所有子类，如</FONT> 
<FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT face="Times New Roman"><SPAN 
lang=en-US>TableModel,TreeModel</SPAN> </FONT></FONT></FONT><FONT size=2>。</FONT> </P>
<P align=left></P>
<P align=left><FONT size=2>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
现在开始说说类型声明模式。实际上，在方法签名中，类型声明模式不是必需的（就像很多书中所说，应该少用类型声明模式而改用与“</FONT> <FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2>target”</FONT> </FONT><FONT size=2>结合的切入点指示符）。但如果指定了类型声明模式，切入点将只匹配对由模式匹配的类型（或者超类型）声明的方法的调用。和其他类型模式一样，类型声明模式支持上述的通配符。同时，它也支持复合类型模式。对于类型声明模式来说，程序员容易犯错的地方在于类型声明模式是基于静态类型而不是运行时类型，这也是本文的主要内容。</FONT> 
</P>
<P align=left><FONT size=2>&nbsp; &nbsp;&nbsp; </FONT></P><FONT size=2>在很好地理解类型声明模式之前，先看一下下面的例子：</FONT> 
<P align=left><FONT size=2></P>
<DIV 
style="FONT-SIZE: 13px; BORDER-TOP: rgb(204,204,204) 1px solid; BORDER-RIGHT: rgb(204,204,204) 1px solid; WIDTH: 98%; BORDER-BOTTOM: rgb(204,204,204) 1px solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(204,204,204) 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: rgb(238,238,238)"><!--<br><br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br>http://www.CodeHighlighter.com/<br><br>--><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">class</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;A&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;foo(){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">A.foo()</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>}<BR></SPAN><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">class</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;B&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">extends</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;A{<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;foo(){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">B.foo()</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>}<BR></SPAN><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">class</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;Main&nbsp;{<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">static</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;main(String[]&nbsp;args)&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;b&nbsp;</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">=</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">new</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;B();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.foo();&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,128,0)">//</SPAN> <SPAN 
style="COLOR: rgb(0,128,0)">(1)</SPAN> <SPAN 
style="COLOR: rgb(0,128,0)"><BR></SPAN><SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callFoo(b);</SPAN> <SPAN 
style="COLOR: rgb(0,128,0)">//</SPAN> <SPAN 
style="COLOR: rgb(0,128,0)">(2)</SPAN> <SPAN 
style="COLOR: rgb(0,128,0)"><BR></SPAN><SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">static</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;callFoo(A&nbsp;a){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">Call&nbsp;A</SPAN> <SPAN style="COLOR: rgb(0,0,0)">"</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">static</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;callFoo(B&nbsp;b){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">Call&nbsp;B</SPAN> <SPAN style="COLOR: rgb(0,0,0)">"</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>}</SPAN> </DIV><BR></FONT>
<P></P>
<P></P>
<P align=left></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT color=#000000><FONT face=Monospace><FONT size=2>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 它的运行结果是这样的：<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; B.foo()</FONT> 
</FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Call A</FONT> 
</FONT></FONT></FONT></P>
<P></P>
<P></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 和你的想法一致吗？对于（</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>1</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>）处</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>b.foo()</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的调用应用了面向对象中的覆盖（</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>override</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>），它是动态的，是在运行时进行解析。而（</FONT> 
</FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>2</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>）处的</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace><I>callFoo</I> </FONT></FONT><FONT color=#000000><FONT face=Monospace>(b)</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>则是重载（</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>overload</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>），它是静态的，是在编译时解析的。因此，对于变量</FONT> 
</FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>b</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>，虽然它是</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的一个实例，但</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>b</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的静态类型（也就是变量声明的类型）是</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>；由于重载方法的选择是静态的，所以</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>main</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>中调用的是</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>callFoo(A a)</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>，而不是</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>callFoo(B b)</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>。</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace></FONT></FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
终于说到了类型声明模式。类型声明模式是基于静态类型信息进行匹配的，而不是动态（或者运行时。下面根据几个典型的例子说明类型声明模式的特性。</FONT> 
</FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace></FONT></FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 还是上面的两个类</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>和</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>，现在我们定义一个方面如下：</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><BR><FONT face=Monospace></P>
<DIV 
style="FONT-SIZE: 13px; BORDER-TOP: rgb(204,204,204) 1px solid; BORDER-RIGHT: rgb(204,204,204) 1px solid; WIDTH: 98%; BORDER-BOTTOM: rgb(204,204,204) 1px solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(204,204,204) 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: rgb(238,238,238)"><!--<br><br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br>http://www.CodeHighlighter.com/<br><br>--><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;aspect&nbsp;TypeAspect&nbsp;{<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pointcut&nbsp;callA():<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;call(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">*</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;A.</SPAN> <SPAN style="COLOR: rgb(0,0,0)">*</SPAN> 
<SPAN 
style="COLOR: rgb(0,0,0)">(..));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;before():callA(){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">call&nbsp;A</SPAN> <SPAN style="COLOR: rgb(0,0,0)">"</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<BR>}</SPAN> 
</DIV></FONT></FONT></FONT>
<P></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace></FONT></FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; main</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>函数内容如下：</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><BR><FONT face=Monospace></P>
<DIV 
style="FONT-SIZE: 13px; BORDER-TOP: rgb(204,204,204) 1px solid; BORDER-RIGHT: rgb(204,204,204) 1px solid; WIDTH: 98%; BORDER-BOTTOM: rgb(204,204,204) 1px solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(204,204,204) 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: rgb(238,238,238)"><!--<br><br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br>http://www.CodeHighlighter.com/<br><br>--><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">static</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;main(String[]&nbsp;args)&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;b1&nbsp;</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">=</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">new</SPAN> 
<SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;B();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b1.foo();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B&nbsp;b2&nbsp;</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">=</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">new</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;B();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b2.foo();<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN> 
</DIV></FONT></FONT></FONT>
<P></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; </FONT></FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace>运行结果如下：</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT color=#000000><FONT face=Monospace><FONT size=2>call A</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT color=#000000><FONT face=Monospace><FONT size=2>B.foo()</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT color=#000000><FONT face=Monospace><FONT size=2>call A</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B.foo()</FONT> 
</FONT></FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 可以看到，尽管切入点</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>callA()</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>声明的类型为</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>，但实际上，切入点</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>callA()</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>可以捕获</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>中的方法及其子类中继承于</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的方法或重载</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的方法，而声明的静态类型既可以是</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>也可以是其子类。</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace></FONT></FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 但如果在</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>中增加一个新的方法：</FONT> </FONT></FONT></P>
<DIV 
style="FONT-SIZE: 13px; BORDER-TOP: rgb(204,204,204) 1px solid; BORDER-RIGHT: rgb(204,204,204) 1px solid; WIDTH: 98%; BORDER-BOTTOM: rgb(204,204,204) 1px solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(204,204,204) 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: rgb(238,238,238)"><!--<br><br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br>http://www.CodeHighlighter.com/<br><br>--><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;doAnotherThing(){<BR><BR>System.out.println(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">B.doAnotherThing</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">);<BR><BR>}</SPAN> </DIV><BR>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; main</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>函数改为：</FONT> </FONT></FONT></P>
<DIV 
style="FONT-SIZE: 13px; BORDER-TOP: rgb(204,204,204) 1px solid; BORDER-RIGHT: rgb(204,204,204) 1px solid; WIDTH: 98%; BORDER-BOTTOM: rgb(204,204,204) 1px solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(204,204,204) 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: rgb(238,238,238)"><!--<br><br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br>http://www.CodeHighlighter.com/<br><br>--><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">static</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;main(String[]&nbsp;args)&nbsp;{<BR><BR>B&nbsp;b2&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">=</SPAN> <SPAN style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> 
<SPAN style="COLOR: rgb(0,0,255)">new</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;B();<BR><BR>b2.doAnotherThing();<BR><BR>}</SPAN> 
</DIV><BR><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
输出结果为：</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B.doAnotherThing</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>，如果想对</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的子类</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>中扩展的方法进行通知，可采用的方法是将切入点</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>callA()</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>改为</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#7f0055><FONT face=Monospace><B>pointcut</B> </FONT></FONT><FONT color=#000000><FONT face=Monospace>callA():</FONT> </FONT><FONT color=#7f0055><FONT face=Monospace><B>call</B> </FONT></FONT><FONT color=#000000><FONT face=Monospace>(* A+.*(..));</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>。</FONT> </FONT></FONT>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 让我们再来看另一种情景：如果定义一个切入点如下：</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace><BR></FONT></FONT></FONT></P>
<DIV 
style="FONT-SIZE: 13px; BORDER-TOP: rgb(204,204,204) 1px solid; BORDER-RIGHT: rgb(204,204,204) 1px solid; WIDTH: 98%; BORDER-BOTTOM: rgb(204,204,204) 1px solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(204,204,204) 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: rgb(238,238,238)"><!--<br><br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br>http://www.CodeHighlighter.com/<br><br>--><SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;pointcut&nbsp;callB():call(</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">*</SPAN> <SPAN style="COLOR: rgb(0,0,0)">&nbsp;B.</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">*</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">(..));<BR><BR>before():callB(){<BR><BR>System.out.println(</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">"</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">call&nbsp;B</SPAN> <SPAN style="COLOR: rgb(0,0,0)">"</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">);<BR><BR>}</SPAN> </DIV><BR>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; main</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>函数内容如下：</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><BR></P>
<DIV 
style="FONT-SIZE: 13px; BORDER-TOP: rgb(204,204,204) 1px solid; BORDER-RIGHT: rgb(204,204,204) 1px solid; WIDTH: 98%; BORDER-BOTTOM: rgb(204,204,204) 1px solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(204,204,204) 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: rgb(238,238,238)"><!--<br><br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br>http://www.CodeHighlighter.com/<br><br>--><SPAN 
style="COLOR: rgb(0,0,255)">public</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,255)">static</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> <SPAN style="COLOR: rgb(0,0,255)">void</SPAN> 
<SPAN style="COLOR: rgb(0,0,0)">&nbsp;main(String[]&nbsp;args)&nbsp;{<BR><BR>A&nbsp;b&nbsp;</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">=</SPAN> <SPAN style="COLOR: rgb(0,0,0)">&nbsp;</SPAN> 
<SPAN style="COLOR: rgb(0,0,255)">new</SPAN> <SPAN 
style="COLOR: rgb(0,0,0)">&nbsp;B();<BR><BR>b.foo();<BR><BR>}</SPAN> </DIV><BR>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 运行结果为：</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B.foo()</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>。</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>b.foo()</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>没有匹配切入点</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>callB()</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的原因在于，</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>b</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的静态类型是</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>，从静态类型的角度来看，这是对</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>A</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的调用，而不是对</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>B</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的调用。在使用</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>AspectJ</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>的类型声明时，很容易在这个地方犯错。</FONT> </FONT></FONT></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace></FONT></FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 好了，如上便是有关类型声明模式的东西，说得有些凌乱，希望对</FONT> 
</FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>AspectJ</FONT> </FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>初学者有些帮助（我本身也是个初学者）。该文参考了《</FONT> 
</FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>Eclipse AspectJ</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>》和《</FONT> </FONT></FONT><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace>AspectJ cookbook</FONT> 
</FONT></FONT></FONT><FONT size=2><FONT color=#000000><FONT face=Monospace>》。</FONT> </FONT></FONT></P>
<P></P>
<P style="MARGIN-BOTTOM: 0cm" align=left><FONT face="文鼎PL细上海宋Uni, serif"><FONT size=2><FONT color=#000000><FONT face=Monospace><BR></FONT></FONT></FONT></FONT></P>
<P></P>
<P></P></DIV><!--EndFragment--></DIV>
</DIV>
</FORM>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
</BODY>
</HTML>