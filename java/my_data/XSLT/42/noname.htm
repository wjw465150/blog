<!-- saved from url=http://www.w3school.com.cn/xpath/xpath_functions.asp -->
<script>
window.onerror = new Function("return(false);")
</script><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><META content="IE=7.0000" 
http-equiv="X-UA-Compatible">
<title>XPath、XQuery 以及 XSLT 函数</title><LINK rel=stylesheet type=text/css 
href="c3.css"></HEAD>

<BODY class=xml>

<DIV id=wrapper>

<DIV id=maincontent><!--StartFragment--><H1>XPath、XQuery 以及 XSLT 函数</H1>
<DIV id=tpn>
<UL class=prenext>
<LI class=pre><A href="http://www.w3school.com.cn/xpath/xpath_summary.asp">Previous Page</A> </LI>
<LI class=next><A href="http://www.w3school.com.cn/xpath/index.asp">Next Page</A> </LI></UL></DIV>
<DIV>
<UL>
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#accessor">存取</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#error">错误和跟踪</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#numeric">数值</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#string">字符串</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#anyuri">AnyURI</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#boolean">逻辑</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#datetime">持续时间/日期/时间</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#qname">QName</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#node">节点</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#sequence">序列</A> 
<LI><A href="http://www.w3school.com.cn/xpath/xpath_functions.asp#context">Context</A> </LI></UL></DIV>
<DIV>
<H2><A id=accessor>存取函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:node-name(node)</TD>
<TD>返回参数节点的节点名称。</TD></TR>
<TR>
<TD>fn:nilled(node)</TD>
<TD>返回是否拒绝参数节点的布尔值。</TD></TR>
<TR>
<TD>fn:data(item.item,...)</TD>
<TD>接受项目序列，并返回原子值序列。</TD></TR>
<TR>
<TD>
<UL>
<LI>fn:base-uri() 
<LI>fn:base-uri(node)</LI></UL></TD>
<TD>返回当前节点或指定节点的 base-uri 属性的值。</TD></TR>
<TR>
<TD>fn:document-uri(node)</TD>
<TD>返回指定节点的 document-uri 属性的值。</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=error>错误和跟踪函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>
<UL>
<LI>fn:error() 
<LI>fn:error(error) 
<LI>fn:error(error,description) 
<LI>fn:error(error,description,error-object) </LI></UL></TD>
<TD>
<P>例子：error(fn:QName('http://example.com/test', 'err:toohigh'), 'Error: Price is 
too high')</P>
<P>结果：向外部处理环境返回 http://example.com/test#toohigh 以及字符串 "Error: Price is too 
high"。</P></TD></TR>
<TR>
<TD>fn:trace(value,label)</TD>
<TD>用于对查询进行 debug。</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=numeric>有关数值的函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:number(arg)</TD>
<TD>
<P>返回参数的数值。参数可以是布尔值、字符串或节点集。</P>
<P>例子：number('100')</P>
<P>结果：100</P></TD></TR>
<TR>
<TD>fn:abs(num)</TD>
<TD>
<P>返回参数的绝对值。</P>
<P>例子：abs(3.14)</P>
<P>结果：3.14</P>
<P>例子：abs(-3.14)</P>
<P>结果：3.14</P></TD></TR>
<TR>
<TD>fn:ceiling(num)</TD>
<TD>
<P>返回大于 num 参数的最小整数。</P>
<P>例子：ceiling(3.14)</P>
<P>结果：4</P></TD></TR>
<TR>
<TD>fn:floor(num)</TD>
<TD>
<P>返回不大于 num 参数的最大整数。</P>
<P>例子：floor(3.14)</P>
<P>结果：3</P></TD></TR>
<TR>
<TD>fn:round(num)</TD>
<TD>
<P>把 num 参数舍入为最接近的整数。</P>
<P>例子：round(3.14)</P>
<P>结果：3</P></TD></TR>
<TR>
<TD>fn:round-half-to-even()</TD>
<TD>
<P>例子：round-half-to-even(0.5)</P>
<P>结果：0 </P>
<P>例子：round-half-to-even(1.5)</P>
<P>结果：2</P>
<P>例子：round-half-to-even(2.5)</P>
<P>结果：2</P></TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=string>有关字符串的函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:string(arg)</TD>
<TD>
<P>返回参数的字符串值。参数可以是数字、逻辑值或节点集。</P>
<P>例子：string(314)</P>
<P>结果："314"</P></TD></TR>
<TR>
<TD>fn:codepoints-to-string(int,int,...)</TD>
<TD>
<P>根据代码点序列返回字符串。</P>
<P>例子：codepoints-to-string(84, 104, 233, 114, 232, 115, 101)</P>
<P>结果：'Thérèse'</P></TD></TR>
<TR>
<TD>fn:string-to-codepoints(string)</TD>
<TD>
<P>根据字符串返回代码点序列。</P>
<P>例子：string-to-codepoints("Thérèse")</P>
<P>结果：84, 104, 233, 114, 232, 115, 101</P></TD></TR>
<TR>
<TD>fn:codepoint-equal(comp1,comp2)</TD>
<TD>根据 Unicode 代码点对照，如果 comp1 的值等于 comp2 的值，则返回 
true。(http://www.w3.org/2005/02/xpath-functions/collation/codepoint)，否则返回 
false。</TD></TR>
<TR>
<TD>
<UL>
<LI>fn:compare(comp1,comp2) 
<LI>fn:compare(comp1,comp2,collation) </LI></UL></TD>
<TD>
<P>如果 comp1 小于 comp2，则返回 -1。如果 comp1 等于 comp2，则返回 0。如果 comp1 大于 comp2，则返回 
1。（根据所用的对照规则）。</P>
<P>例子：compare('ghi', 'ghi')</P>
<P>结果：0</P></TD></TR>
<TR>
<TD>fn:concat(string,string,...)</TD>
<TD>
<P>返回字符串的拼接。</P>
<P>例子：concat('XPath ','is ','FUN!')</P>
<P>结果：'XPath is FUN!'</P></TD></TR>
<TR>
<TD>fn:string-join((string,string,...),sep)</TD>
<TD>
<P>使用 sep 参数作为分隔符，来返回 string 参数拼接后的字符串。</P>
<P>例子：string-join(('We', 'are', 'having', 'fun!'), ' ')</P>
<P>结果：' We are having fun! '</P>
<P>例子：string-join(('We', 'are', 'having', 'fun!'))</P>
<P>结果：'Wearehavingfun!'</P>
<P>例子：string-join((), 'sep')</P>
<P>结果：''</P></TD></TR>
<TR>
<TD>
<UL>
<LI>fn:substring(string,start,len) 
<LI>fn:substring(string,start) </LI></UL></TD>
<TD>
<P>返回从 start 位置开始的指定长度的子字符串。第一个字符的下标是 1。如果省略 len 参数，则返回从位置 start 
到字符串末尾的子字符串。</P>
<P>例子：substring('Beatles',1,4)</P>
<P>结果：'Beat'</P>
<P>例子：substring('Beatles',2)</P>
<P>结果：'eatles'</P></TD></TR>
<TR>
<TD>
<UL>
<LI>fn:string-length(string) 
<LI>fn:string-length() </LI></UL></TD>
<TD>
<P>返回指定字符串的长度。如果没有 string 参数，则返回当前节点的字符串值的长度。</P>
<P>例子：string-length('Beatles')</P>
<P>结果：7</P></TD></TR>
<TR>
<TD>
<UL>
<LI>fn:normalize-space(string) 
<LI>fn:normalize-space() </LI></UL></TD>
<TD>
<P>删除指定字符串的开头和结尾的空白，并把内部的所有空白序列替换为一个，然后返回结果。如果没有 string 参数，则处理当前节点。</P>
<P>例子：normalize-space(' The&nbsp;&nbsp;&nbsp;XML ')</P>
<P>结果：'The XML'</P></TD></TR>
<TR>
<TD>fn:normalize-unicode()</TD>
<TD>执行 Unicode 规格化。</TD></TR>
<TR>
<TD>fn:upper-case(string)</TD>
<TD>
<P>把 string 参数转换为大写。</P>
<P>例子：upper-case('The XML')</P>
<P>结果：'THE XML'</P></TD></TR>
<TR>
<TD>fn:lower-case(string)</TD>
<TD>
<P>把 string 参数转换为小写。</P>
<P>例子：lower-case('The XML')</P>
<P>结果：'the xml'</P></TD></TR>
<TR>
<TD>fn:translate(string1,string2,string3)</TD>
<TD>
<P>把 string1 中的 string2 替换为 string3。</P>
<P>例子：translate('12:30','30','45')</P>
<P>结果：'12:45'</P>
<P>例子：translate('12:30','03','54')</P>
<P>结果：'12:45'</P>
<P>例子：translate('12:30','0123','abcd')</P>
<P>结果：'bc:da'</P></TD></TR>
<TR>
<TD>fn:escape-uri(stringURI,esc-res)</TD>
<TD>
<P>例子：escape-uri("http://example.com/test#car", true())</P>
<P>结果："http%3A%2F%2Fexample.com%2Ftest#car"</P>
<P>例子：escape-uri("http://example.com/test#car", false())</P>
<P>结果："http://example.com/test#car"</P>
<P>例子：escape-uri ("http://example.com/~bébé", false())</P>
<P>结果："http://example.com/~b%C3%A9b%C3%A9"</P></TD></TR>
<TR>
<TD>fn:contains(string1,string2)</TD>
<TD>
<P>如果 string1 包含 string2，则返回 true，否则返回 false。</P>
<P>例子：contains('XML','XM')</P>
<P>结果：true</P></TD></TR>
<TR>
<TD>fn:starts-with(string1,string2)</TD>
<TD>
<P>如果 string1 以 string2 开始，则返回 true，否则返回 false。</P>
<P>例子：starts-with('XML','X')</P>
<P>结果：true</P></TD></TR>
<TR>
<TD>fn:ends-with(string1,string2)</TD>
<TD>
<P>如果 string1 以 string2 结尾，则返回 true，否则返回 false。</P>
<P>例子：ends-with('XML','X')</P>
<P>结果：false</P></TD></TR>
<TR>
<TD>fn:substring-before(string1,string2)</TD>
<TD>
<P>返回 string2 在 string1 中出现之前的子字符串。</P>
<P>例子：substring-before('12/10','/')</P>
<P>结果：'12'</P></TD></TR>
<TR>
<TD>fn:substring-after(string1,string2)</TD>
<TD>
<P>返回 string2 在 string1 中出现之后的子字符串。</P>
<P>例子：substring-after('12/10','/')</P>
<P>结果：'10'</P></TD></TR>
<TR>
<TD>fn:matches(string,pattern)</TD>
<TD>
<P>如果 string 参数匹配指定的模式，则返回 true，否则返回 false。</P>
<P>例子：matches("Merano", "ran")</P>
<P>结果：true</P></TD></TR>
<TR>
<TD>fn:replace(string,pattern,replace)</TD>
<TD>
<P>把指定的模式替换为 replace 参数，并返回结果。</P>
<P>例子：replace("Bella Italia", "l", "*")</P>
<P>结果：'Be**a Ita*ia'</P>
<P>例子：replace("Bella Italia", "l", "")</P>
<P>结果：'Bea Itaia'</P></TD></TR>
<TR>
<TD>fn:tokenize(string,pattern)</TD>
<TD>
<P>例子：tokenize("XPath is fun", "\s+")</P>
<P>结果：("XPath", "is", "fun")</P></TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=anyuri>针对 anyURI 的函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:resolve-uri(relative,base)</TD>
<TD>&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=boolean>关于布尔值的函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:boolean(arg)</TD>
<TD>返回数字、字符串或节点集的布尔值。</TD></TR>
<TR>
<TD>fn:not(arg)</TD>
<TD>
<P>首先通过 boolean() 函数把参数还原为一个布尔值。如果该布尔值为 false，则返回 true，否则返回 true。</P>
<P>例子：not(true())</P>
<P>结果：false</P></TD></TR>
<TR>
<TD>fn:true()</TD>
<TD>
<P>返回布尔值 true。</P>
<P>例子：true()</P>
<P>结果：true</P></TD></TR>
<TR>
<TD>fn:false()</TD>
<TD>
<P>返回布尔值 false。</P>
<P>例子：false()</P>
<P>结果：false</P></TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=datetime>有关持续时间、日期和时间的函数</A></H2>
<P>日期、时间、持续时间的组件提取函数</P>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:dateTime(date,time)</TD>
<TD>把参数转换为日期和时间。</TD></TR>
<TR>
<TD>fn:years-from-duration(datetimedur)</TD>
<TD>返回参数值的年份部分的整数，以标准词汇表示法来表示。</TD></TR>
<TR>
<TD>fn:months-from-duration(datetimedur)</TD>
<TD>返回参数值的月份部分的整数，以标准词汇表示法来表示。</TD></TR>
<TR>
<TD>fn:days-from-duration(datetimedur)</TD>
<TD>返回参数值的天部分的整数，以标准词汇表示法来表示。</TD></TR>
<TR>
<TD>fn:hours-from-duration(datetimedur)</TD>
<TD>返回参数值的小时部分的整数，以标准词汇表示法来表示。</TD></TR>
<TR>
<TD>fn:minutes-from-duration(datetimedur)</TD>
<TD>返回参数值的分钟部分的整数，以标准词汇表示法来表示。</TD></TR>
<TR>
<TD>fn:seconds-from-duration(datetimedur)</TD>
<TD>返回参数值的分钟部分的十进制数，以标准词汇表示法来表示。</TD></TR>
<TR>
<TD>fn:year-from-dateTime(datetime)</TD>
<TD>
<P>返回参数本地值的年部分的整数。</P>
<P>例子：year-from-dateTime(xs:dateTime("2005-01-10T12:30-04:10"))</P>
<P>结果：2005</P></TD></TR>
<TR>
<TD>fn:month-from-dateTime(datetime)</TD>
<TD>
<P>返回参数本地值的月部分的整数。</P>
<P>例子：month-from-dateTime(xs:dateTime("2005-01-10T12:30-04:10"))</P>
<P>结果：01</P></TD></TR>
<TR>
<TD>fn:day-from-dateTime(datetime)</TD>
<TD>
<P>返回参数本地值的天部分的整数。</P>
<P>例子：day-from-dateTime(xs:dateTime("2005-01-10T12:30-04:10"))</P>
<P>结果：10</P></TD></TR>
<TR>
<TD>fn:hours-from-dateTime(datetime)</TD>
<TD>
<P>返回参数本地值的小时部分的整数。</P>
<P>例子：hours-from-dateTime(xs:dateTime("2005-01-10T12:30-04:10"))</P>
<P>结果：12</P></TD></TR>
<TR>
<TD>fn:minutes-from-dateTime(datetime)</TD>
<TD>
<P>返回参数本地值的分钟部分的整数。</P>
<P>例子：minutes-from-dateTime(xs:dateTime("2005-01-10T12:30-04:10"))</P>
<P>结果：30</P></TD></TR>
<TR>
<TD>fn:seconds-from-dateTime(datetime)</TD>
<TD>
<P>返回参数本地值的秒部分的十进制数。</P>
<P>例子：seconds-from-dateTime(xs:dateTime("2005-01-10T12:30:00-04:10"))</P>
<P>结果：0</P></TD></TR>
<TR>
<TD>fn:timezone-from-dateTime(datetime)</TD>
<TD>返回参数的时区部分，如果存在。</TD></TR>
<TR>
<TD>fn:year-from-date(date)</TD>
<TD>
<P>返回参数本地值中表示年的整数。</P>
<P>例子：year-from-date(xs:date("2005-04-23"))</P>
<P>结果：2005</P></TD></TR>
<TR>
<TD>fn:month-from-date(date)</TD>
<TD>
<P>返回参数本地值中表示月的整数。</P>
<P>例子：month-from-date(xs:date("2005-04-23"))</P>
<P>结果：4</P></TD></TR>
<TR>
<TD>fn:day-from-date(date)</TD>
<TD>
<P>返回参数本地值中表示天的整数。</P>
<P>例子：day-from-date(xs:date("2005-04-23"))</P>
<P>结果：23</P></TD></TR>
<TR>
<TD>fn:timezone-from-date(date)</TD>
<TD>返回参数的时区部分，如果存在。</TD></TR>
<TR>
<TD>fn:hours-from-time(time)</TD>
<TD>
<P>返回参数本地值中表示小时部分的整数。</P>
<P>例子：hours-from-time(xs:time("10:22:00"))</P>
<P>结果：10</P></TD></TR>
<TR>
<TD>fn:minutes-from-time(time)</TD>
<TD>
<P>返回参数本地值中表示分钟部分的整数。</P>
<P>例子：minutes-from-time(xs:time("10:22:00"))</P>
<P>结果：22</P></TD></TR>
<TR>
<TD>fn:seconds-from-time(time)</TD>
<TD>
<P>返回参数本地值中表示秒部分的整数。</P>
<P>例子：seconds-from-time(xs:time("10:22:00"))</P>
<P>结果：0</P></TD></TR>
<TR>
<TD>fn:timezone-from-time(time)</TD>
<TD>返回参数的时区部分，如果存在。</TD></TR>
<TR>
<TD>fn:adjust-dateTime-to-timezone(datetime,timezone)</TD>
<TD>如果 timezone 参数为空，则返回没有时区的 dateTime。否则返回带有时区的 dateTime。</TD></TR>
<TR>
<TD>fn:adjust-date-to-timezone(date,timezone)</TD>
<TD>如果 timezone 参数为空，则返回没有时区的 date。否则返回带有时区的 date。</TD></TR>
<TR>
<TD>fn:adjust-time-to-timezone(time,timezone)</TD>
<TD>如果 timezone 参数为空，则返回没有时区的 time。否则返回带有时区的 
time。</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=qname>与 QNames 相关的函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:QName()</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD>fn:local-name-from-QName()</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD>fn:namespace-uri-from-QName()</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD>fn:namespace-uri-for-prefix()</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD>fn:in-scope-prefixes()</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD>fn:resolve-QName()</TD>
<TD>&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=node>关于节点的函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>
<UL>
<LI>fn:name() 
<LI>fn:name(nodeset) </LI></UL></TD>
<TD>返回当前节点的名称或指定节点集中的第一个节点。</TD></TR>
<TR>
<TD>
<UL>
<LI>fn:local-name() 
<LI>fn:local-name(nodeset) </LI></UL></TD>
<TD>返回当前节点的名称或指定节点集中的第一个节点 - 不带有命名空间前缀。</TD></TR>
<TR>
<TD>
<UL>
<LI>fn:namespace-uri() 
<LI>fn:namespace-uri(nodeset) </LI></UL></TD>
<TD>返回当前节点或指定节点集中第一个节点的命名空间 URI。</TD></TR>
<TR>
<TD>fn:lang(lang)</TD>
<TD>
<P>如果当前节点的语言匹配指定的语言，则返回 true。</P>
<P>例子：Lang("en") is true for &lt;p xml:lang="en"&gt;...&lt;/p&gt;</P>
<P>例子：Lang("de") is false for &lt;p xml:lang="en"&gt;...&lt;/p&gt;</P></TD></TR>
<TR>
<TD>
<UL>
<LI>fn:root() 
<LI>fn:root(node) </LI></UL></TD>
<TD>返回当前节点或指定的节点所属的节点树的根节点。通常是文档节点。</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=sequence>有关序列的函数</A></H2>
<H3>一般性的函数</H3>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:index-of((item,item,...),searchitem)</TD>
<TD>
<P>返回在项目序列中等于 searchitem 参数的位置。</P>
<P>例子：index-of ((15, 40, 25, 40, 10), 40)</P>
<P>结果：(2, 4)</P>
<P>例子：index-of (("a", "dog", "and", "a", "duck"), "a")</P>
<P>Result (1, 4)</P>
<P>例子：index-of ((15, 40, 25, 40, 10), 18)</P>
<P>结果：()</P></TD></TR>
<TR>
<TD>fn:remove((item,item,...),position)</TD>
<TD>
<P>返回由 item 参数构造的新序列 - 同时删除 position 参数指定的项目。</P>
<P>例子：remove(("ab", "cd", "ef"), 0)</P>
<P>结果：("ab", "cd", "ef")</P>
<P>例子：remove(("ab", "cd", "ef"), 1)</P>
<P>结果：("cd", "ef")</P>
<P>例子：remove(("ab", "cd", "ef"), 4)</P>
<P>结果：("ab", "cd", "ef")</P></TD></TR>
<TR>
<TD>fn:empty(item,item,...)</TD>
<TD>
<P>如果参数值是空序列，则返回 true，否则返回 false。</P>
<P>例子：empty(remove(("ab", "cd"), 1))</P>
<P>结果：false</P></TD></TR>
<TR>
<TD>fn:exists(item,item,...)</TD>
<TD>
<P>如果参数值不是空序列，则返回 true，否则返回 false。</P>
<P>例子：exists(remove(("ab"), 1))</P>
<P>结果：false</P></TD></TR>
<TR>
<TD>fn:distinct-values((item,item,...),collation)</TD>
<TD>
<P>返回唯一不同的值。</P>
<P>例子：distinct-values((1, 2, 3, 1, 2))</P>
<P>结果：(1, 2, 3)</P></TD></TR>
<TR>
<TD>fn:insert-before((item,item,...),pos,inserts)</TD>
<TD>
<P>返回由 item 参数构造的新序列 - 同时在 pos 参数指定位置插入 inserts 参数的值。</P>
<P>例子：insert-before(("ab", "cd"), 0, "gh")</P>
<P>结果：("gh", "ab", "cd")</P>
<P>例子：insert-before(("ab", "cd"), 1, "gh")</P>
<P>结果：("gh", "ab", "cd")</P>
<P>例子：insert-before(("ab", "cd"), 2, "gh")</P>
<P>结果：("ab", "gh", "cd")</P>
<P>例子：insert-before(("ab", "cd"), 5, "gh")</P>
<P>结果：("ab", "cd", "gh")</P></TD></TR>
<TR>
<TD>fn:reverse((item,item,...))</TD>
<TD>
<P>返回指定的项目的颠倒顺序。</P>
<P>例子：reverse(("ab", "cd", "ef"))</P>
<P>结果：("ef", "cd", "ab")</P>
<P>例子：reverse(("ab"))</P>
<P>结果：("ab")</P></TD></TR>
<TR>
<TD>fn:subsequence((item,item,...),start,len)</TD>
<TD>
<P>返回 start 参数指定的位置返回项目序列，序列的长度由 len 参数指定。第一个项目的位置是 1。</P>
<P>例子：subsequence(($item1, $item2, $item3,...), 3)</P>
<P>结果：($item3, ...)</P>
<P>例子：subsequence(($item1, $item2, $item3, ...), 2, 2)</P>
<P>结果：($item2, $item3)</P></TD></TR>
<TR>
<TD>fn:unordered((item,item,...))</TD>
<TD>依据实现决定的顺序来返回项目。</TD></TR></TBODY></TABLE>
<H3>测试序列容量的函数</H3>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:zero-or-one(item,item,...)</TD>
<TD>如果参数包含零个或一个项目，则返回参数，否则生成错误。</TD></TR>
<TR>
<TD>fn:one-or-more(item,item,...)</TD>
<TD>如果参数包含一个或多个项目，则返回参数，否则生成错误。</TD></TR>
<TR>
<TD>fn:exactly-one(item,item,...)</TD>
<TD>如果参数包含一个项目，则返回参数，否则生成错误。</TD></TR></TBODY></TABLE>
<H3>Equals, Union, Intersection and Except </H3>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:deep-equal(param1,param2,collation)</TD>
<TD>如果 param1 和 param2 与彼此相等（deep-equal），则返回 true，否则返回 
false。</TD></TR></TBODY></TABLE>
<H3>合计函数</H3>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:count((item,item,...))</TD>
<TD>返回节点的数量。</TD></TR>
<TR>
<TD>fn:avg((arg,arg,...))</TD>
<TD>返回参数值的平均数。例子：avg((1,2,3)) 结果：2 </TD></TR>
<TR>
<TD>fn:max((arg,arg,...))</TD>
<TD>返回大于其它参数的参数。例子：max((1,2,3)) 结果：3 例子：max(('a', 'k')) 结果：'k' </TD></TR>
<TR>
<TD>fn:min((arg,arg,...))</TD>
<TD>返回小于其它参数的参数。例子：min((1,2,3)) 结果：1 例子：min(('a', 'k')) 结果：'a' </TD></TR>
<TR>
<TD>fn:sum(arg,arg,...)</TD>
<TD>返回指定节点集中每个节点的数值的总和。</TD></TR></TBODY></TABLE>
<H3>生成序列的函数</H3>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:id((string,string,...),node)</TD>
<TD>Returns a sequence of element nodes that have an ID value equal to the value 
of one or more of the values specified in the string argument</TD></TR>
<TR>
<TD>fn:idref((string,string,...),node)</TD>
<TD>Returns a sequence of element or attribute nodes that have an IDREF value 
equal to the value of one or more of the values specified in the string 
argument</TD></TR>
<TR>
<TD>fn:doc(URI)</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD>fn:doc-available(URI)</TD>
<TD>如果 doc() 函数返回文档节点，则返回 true，否则返回 false。</TD></TR>
<TR>
<TD>
<UL>
<LI>fn:collection() 
<LI>fn:collection(string) </LI></UL></TD>
<TD>&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2><A id=context>上下文函数</A></H2>
<TABLE class=dataintable>
<TBODY>
<TR>
<TH style="WIDTH: 40%">名称</TH>
<TH style="WIDTH: 60%">说明</TH></TR>
<TR>
<TD>fn:position()</TD>
<TD>
<P>返回当前正在被处理的节点的 index 位置。</P>
<P>例子：//book[position()&lt;=3]</P>
<P>结果：选择前三个 book 元素 </P></TD></TR>
<TR>
<TD>fn:last()</TD>
<TD>
<P>返回在被处理的节点列表中的项目数目。</P>
<P>例子：//book[last()]</P>
<P>结果：选择最后一个 book 元素</P></TD></TR>
<TR>
<TD>fn:current-dateTime()</TD>
<TD>返回当前的 dateTime（带有时区）。</TD></TR>
<TR>
<TD>fn:current-date()</TD>
<TD>返回当前的日期（带有时区）。</TD></TR>
<TR>
<TD>fn:current-time()</TD>
<TD>返回当前的时间（带有时区）。</TD></TR>
<TR>
<TD>fn:implicit-timezone()</TD>
<TD>返回隐式时区的值。</TD></TR>
<TR>
<TD>fn:default-collation()</TD>
<TD>返回默认对照的值。</TD></TR>
<TR>
<TD>fn:static-base-uri()</TD>
<TD>返回 base-uri 的值。</TD></TR></TBODY></TABLE></DIV>
<DIV id=bpn>
<UL class=prenext>
<LI class=pre><A href="http://www.w3school.com.cn/xpath/xpath_summary.asp">Previous Page</A> </LI>
<LI class=next><A href="http://www.w3school.com.cn/xpath/index.asp">Next Page</A> </LI></UL></DIV><!--EndFragment--></DIV>
</DIV>
<P>&nbsp;</P>
<P>&nbsp;</P>
</BODY>
</HTML>