<html>
<title>java.net.BindException: Address already in use解决方法</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<body>
<!--StartFragment--><p class="reprint"><b>原文地址</b>：<a href="http://support.microsoft.com/kb/q196271/" target="_blank">http://support.microsoft.com/kb/q196271/</a></p>
<div id="detail" class="detail" style="line-height: 1.3;"><p></p><div>&nbsp;在
网络编程中，特别是在短时间内new的网络连接太多，经常出现java.net.BindException: Address already in 
use: 
JVM_Bind的异常，网络有很多介绍此异常的，通常都是在说是要使用的端口被别的程序已经使用，但有时并不是这个原因，通过仔细查找，找到一些很好的
资料，在此将其一一记录下来。</div>
<div>&nbsp;</div>
<div align="center">&nbsp;</div>
<div>**********************************************************************************</div>
<div align="center"><strong>文章一</strong></div>
<div align="center">&nbsp;</div>
<div>&nbsp; 短时间内new&nbsp;socket操作过多</div>
<div>
<div>&nbsp; 而socket.close()操作并不能立即释放绑定的端口</div>
<div>&nbsp; 而是把端口设置为TIME_WAIT状态</div>
<div>&nbsp; 过段时间(默认240s)才释放(用netstat&nbsp;-na可以看到)</div>
<div>&nbsp; 最后系统资源耗尽</div>
<div>&nbsp; (windows上是耗尽了pool&nbsp;of&nbsp;ephemeral&nbsp;ports&nbsp;这段区间在1024-5000之间)</div>
<div>&nbsp;Socket FAQ:</div>
<div>&nbsp; Remember that TCP guarantees all data transmitted will be delivered,<br>if at all possible. When you close a socket, the server goes into a<br>TIME_WAIT state, just to be really really sure that all the data has<br>gone through. When a socket is closed, both sides agree by sending<br>messages to each other that they will send no more data. This, it<br>seemed to me was good enough, and after the handshaking is done, the<br>socket should be closed. The problem is two-fold. First, there is no<br>way to be sure that the last ack was communicated successfully.<br>Second, there may be "wandering duplicates" left on the net that must<br>be dealt with if they are delivered.<br><br>Andrew Gierth (andrew@erlenstar.demon.co.uk) helped to explain the<br>closing sequence in the following usenet posting:<br><br>Assume that a connection is in ESTABLISHED state, and the client is<br>about to do an orderly release. The client's sequence no. is Sc, and<br>the server's is Ss. Client Server<br>====== ======<br>ESTABLISHED ESTABLISHED<br>(client closes)<br>ESTABLISHED ESTABLISHED</div>
<div>&nbsp;</div>
<h2 class="subTitle">RESOLUTION</h2>
<div class="sbody"><strong>Warning</strong> Serious problems might occur
 if you modify the registry incorrectly by using Registry Editor or by 
using another method. These problems might require that you reinstall 
your operating system. Microsoft cannot guarantee that these problems 
can be solved. Modify the registry at your own risk.<br>The default 
maximum number of ephemeral TCP ports is 5000 in the products that are 
included in the 'Applies to' section. A new parameter has been added in 
these products. To increase the maximum number of ephemeral ports, 
follow these steps: 
<table class="list ol">
<tbody>
<tr>
<td class="number">1.</td>
<td class="text">Start Registry Editor.</td></tr>
<tr>
<td class="number">2.</td>
<td class="text">Locate the following subkey in the registry, and then click <strong class="uiterm">Parameters</strong>: 
<div class="indent">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</div></td></tr>
<tr>
<td class="number">3.</td>
<td class="text">On the <strong class="uiterm">Edit</strong> menu, click <strong class="uiterm">New</strong>, and then add the following registry entry: 
<div class="indent">Value Name: <strong>MaxUserPort</strong><br>Value Type: DWORD<br>Value data: 65534<br>Valid Range: 5000-65534 (decimal)<br>Default: 0x1388 (5000 decimal)<br>Description:
 This parameter controls the maximum port number that is used when a 
program requests any available user port from the system. Typically , 
ephemeral (short-lived) ports are allocated between the values of 1024 
and 5000 inclusive.</div></td></tr>
<tr>
<td class="number">4.</td>
<td class="text">Quit Registry Editor.</td></tr></tbody></table></div>
<p class="post"><strong>Note</strong> An additional TCPTimedWaitDelay registry parameter determines how long a closed port waits until the closed port can be reused.</p>
<p class="post">原文连接：<a href="http://blog.chinaunix.net/link.php?url=http://blog.chinaunix.net%2Fu%2F29553%2Fshowart_450701.html">http://blog.chinaunix.net/u/29553/showart_450701.html</a></p>
<div>**********************************************************************************</div>
<p class="post" align="center"><strong>文章二</strong></p></div>
<div>java.net.BindException: Address already in use: connect的问题</div>
<div class="cnt" id="blog_text">
<p>大概原因是短时间内new 
socket操作很多,而socket.close()操作并不能立即释放绑定的端口,而是把端口设置为TIME_WAIT状态,过段时间(默认
240s)才释放,(用netstat -na可以看到),最后系统资源耗尽(windows上是耗尽了pool of ephemeral ports
 ,这段区间在1024-5000之间; )</p>
<p>避免出现这一问题的方法有两个，一个是调高你的web服务器的最大连接线程数，调到1024,2048都还凑合，以resin为例，修改
resin.conf中的thread-pool.thread_max，如果你采用apache连resin的架构，别忘了再调整apache；</p>
<p>另一个是修改运行web服务器的机器的操作系统网络配置，把time wait的时间调低一些，比如30s。<br>在red hat上，查看有关的选项，<br>[xxx@xxx~]$ /sbin/sysctl -a|grep net.ipv4.tcp_tw<br>net.ipv4.tcp_tw_reuse = 0<br>net.ipv4.tcp_tw_recycle = 0<br>[xxx@xxx~]$vi /etc/sysctl，修改<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_tw_recycle = 1<br>[xxx@xxx~]$sysctl -p，使内核参数生效<br></p>
<p class="post">socket-faq中的这一段讲time_wait的，摘录如下：<br>2.7. Please explain the TIME_WAIT state.<br><br>Remember that TCP guarantees all data transmitted will be delivered,<br>if at all possible. When you close a socket, the server goes into a<br>TIME_WAIT state, just to be really really sure that all the data has<br>gone through. When a socket is closed, both sides agree by sending<br>messages to each other that they will send no more data. This, it<br>seemed to me was good enough, and after the handshaking is done, the<br>socket should be closed. The problem is two-fold. First, there is no<br>way to be sure that the last ack was communicated successfully.<br>Second, there may be "wandering duplicates" left on the net that must<br>be dealt with if they are delivered.<br><br>Andrew Gierth (andrew@erlenstar.demon.co.uk) helped to explain the<br>closing sequence in the following usenet posting:<br><br>Assume that a connection is in ESTABLISHED state, and the client is<br>about to do an orderly release. The client's sequence no. is Sc, and<br>the server's is Ss. Client Server<br>====== ======<br>ESTABLISHED ESTABLISHED<br>(client closes)<br>ESTABLISHED ESTABLISHED<br>-------&gt;&gt;<br>FIN_WAIT_1<br>&lt;&lt;-------- <br>FIN_WAIT_2 CLOSE_WAIT<br>&lt;&lt;-------- (server closes)<br>LAST_ACK<br>, -------&gt;&gt;<br>TIME_WAIT CLOSED<br>(2*msl elapses...)<br>CLOSED<br><br>Note: the +1 on the sequence numbers is because the FIN counts as one<br>byte of data. (The above diagram is equivalent to fig. 13 from RFC<br>793).<br><br>Now consider what happens if the last of those packets is dropped in<br>the network. The client has done with the connection; it has no more<br>data or control info to send, and never will have. But the server does<br>not know whether the client received all the data correctly; that's<br>what the last ACK segment is for. Now the server may or may not care<br>whether the client got the data, but that is not an issue for TCP; TCP<br>is a reliable rotocol, and must distinguish between an orderly<br>connection close where all data is transferred, and a connection abort<br>where data may or may not have been lost.<br><br>So, if that last packet is dropped, the server will retransmit it (it<br>is, after all, an unacknowledged segment) and will expect to see a<br>suitable ACK segment in reply. If the client went straight to CLOSED,<br>the only possible response to that retransmit would be a RST, which<br>would indicate to the server that data had been lost, when in fact it<br>had not been.<br><br>(Bear in mind that the server's FIN segment may, additionally, contain<br>data.)<br><br>DISCLAIMER: This is my interpretation of the RFCs (I have read all the<br>TCP-related ones I could find), but I have not attempted to examine<br>implementation source code or trace actual connections in order to<br>verify it. I am satisfied that the logic is correct, though.<br><br>More commentarty from Vic:<br><br>The second issue was addressed by Richard Stevens (rstevens@noao.edu,<br>author of "Unix Network Programming", see ``1.5 Where can I get source<br>code for the book [book title]?''). I have put together quotes from<br>some of his postings and email which explain this. I have brought<br>together paragraphs from different postings, and have made as few<br>changes as possible.<br><br>From Richard Stevens (rstevens@noao.edu):<br><br>If the duration of the TIME_WAIT state were just to handle TCP's full-<br>duplex close, then the time would be much smaller, and it would be<br>some function of the current RTO (retransmission timeout), not the MSL<br>(the packet lifetime).<br><br>A couple of points about the TIME_WAIT state.<br><br>o The end that sends the first FIN goes into the TIME_WAIT state,<br>because that is the end that sends the final ACK. If the other<br>end's FIN is lost, or if the final ACK is lost, having the end that<br>sends the first FIN maintain state about the connection guarantees<br>that it has enough information to retransmit the final ACK.<br><br>o Realize that TCP sequence numbers wrap around after 2**32 bytes<br>have been transferred. Assume a connection between A.1500 (host A,<br>port 1500) and B.2000. During the connection one segment is lost<br>and retransmitted. But the segment is not really lost, it is held<br>by some intermediate router and then re-injected into the network.<br>(This is called a "wandering duplicate".) But in the time between<br>the packet being lost &amp; retransmitted, and then reappearing, the<br>connection is closed (without any problems) and then another<br>connection is established between the same host, same port (that<br>is, A.1500 and B.2000; this is called another "incarnation" of the<br>connection). But the sequence numbers chosen for the new<br>incarnation just happen to overlap with the sequence number of the<br>wandering duplicate that is about to reappear. (This is indeed<br>possible, given the way sequence numbers are chosen for TCP<br>connections.) Bingo, you are about to deliver the data from the<br>wandering duplicate (the previous incarnation of the connection) to<br>the new incarnation of the connection. To avoid this, you do not<br>allow the same incarnation of the connection to be reestablished<br>until the TIME_WAIT state terminates.<br><br>Even the TIME_WAIT state doesn't complete solve the second problem,<br>given what is called TIME_WAIT assassination. RFC 1337 has more<br>details.<br><br>o The reason that the duration of the TIME_WAIT state is 2*MSL is<br>that the maximum amount of time a packet can wander around a<br>network is assumed to be MSL seconds. The factor of 2 is for the<br>round-trip. The recommended value for MSL is 120 seconds, but<br>Berkeley-derived implementations normally use 30 seconds instead.<br>This means a TIME_WAIT delay between 1 and 4 minutes. Solaris 2.x<br>does indeed use the recommended MSL of 120 seconds.<br><br>A wandering duplicate is a packet that appeared to be lost and was<br>retransmitted. But it wasn't really lost ... some router had<br>problems, held on to the packet for a while (order of seconds, could<br>be a minute if the TTL is large enough) and then re-injects the packet<br>back into the network. But by the time it reappears, the application<br>that sent it originally has already retransmitted the data contained<br>in that packet.<br><br>Because of these potential problems with TIME_WAIT assassinations, one<br>should not avoid the TIME_WAIT state by setting the SO_LINGER option<br>to send an RST instead of the normal TCP connection termination<br>(FIN/ACK/FIN/ACK). The TIME_WAIT state is there for a reason; it's<br>your friend and it's there to help you :-)<br><br>I have a long discussion of just this topic in my just-released<br>"TCP/IP Illustrated, Volume 3". The TIME_WAIT state is indeed, one of<br>the most misunderstood features of TCP.<br><br>I'm currently rewriting "Unix Network Programming" (see ``1.5 Where<br>can I get source code for the book [book title]?''). and will include<br>lots more on this topic, as it is often confusing and misunderstood.<br><br>An additional note from Andrew:<br><br>Closing a socket: if SO_LINGER has not been called on a socket, then<br>close() is not supposed to discard data. This is true on SVR4.2 (and,<br>apparently, on all non-SVR4 systems) but apparently not on SVR4; the<br>use of either shutdown() or SO_LINGER seems to be required to<br>guarantee delivery of all data.</p>
<p class="post">原文连接：<a href="http://blog.chinaunix.net/link.php?url=http://hi.baidu.com%2Fw_ge%2Fblog%2Fitem%2F105877c6a361df1b9c163d21.html">http://hi.baidu.com/w_ge/blog/item/105877c6a361df1b9c163d21.html</a></p>
<p class="post">************************************************************************</p></div>
<div align="center"><strong>文章三</strong></div>
<div align="center">&nbsp;</div>
<div align="left">当您尝试从 TCP 端口大于 5000 连接收到错误 ' WSAENOBUFS (10055) '</div>
<div align="left">
<h2 class="subTitle" id="tocHeadRef">症状</h2>


<div class="sbody">如果您尝试建立 TCP 连接从端口是大于 5000, 本地计算机响应并以下 WSAENOBUFS (10055） 错误信息： 
<div class="errormsg">因为系统缺乏足够缓冲区空间或者因为队列已满无法执行套接字上操作。 </div>
<h2 class="subTitle" id="tocHeadRef">解决方案</h2>


<div class="sbody"><b>要点 </b>此部分， 方法或任务包含步骤告诉您如何修改注册表。 但是, 
如果修改注册表错误可能发生严重问题。 因此, 确保仔细执行这些步骤。 用于添加保护之前, 修改备份注册表。 然后, 在发生问题时还原注册表。 
有关如何备份和还原注册表, 请单击下列文章编号以查看 Microsoft 知识库中相应： </div>
<div class="sbody">默认最大数量的短暂 TCP 端口为 5000 ' 适用于 ' 部分中包含产品中。 这些产品中已添加新参数。 要增加最大值是短暂端口, 请按照下列步骤操作： </div>
<div class="sbody">
<table class="list ol">
<tbody>
<tr>
<td class="number">1.</td>
<td class="text">启动注册表编辑器。 </td></tr>
<tr>
<td class="number">2.</td>
<td class="text">注册表, 中找到以下子项， 然后单击 参数 ： 
<div class="indent">HKEY _ LOCAL _ MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</div></td></tr>
<tr>
<td class="number">3.</td>
<td class="text">在 编辑 菜单, 单击 新建 , 然后添加以下注册表项： 
<div class="indent">MaxUserPort 值名称：<br>值类型： DWORD<br>值数据： 65534<br>有效范围： 5000 - 65534 (十进制)<br>默认： 0x1388 5000 （十进制）<br>说明： 此参数控制程序从系统请求任何可用用户端口时所用最大端口数。 通常, 1024 的值和含 5000 之间分配临时 （短期) 端口。 </div></td></tr>
<tr>
<td class="number">4.</td>
<td class="text">退出注册表编辑器, 并重新启动计算机。 </td></tr></tbody></table></div>
<div class="sbody"><b>注意 </b>一个附加 TCPTimedWaitDelay 注册表参数决定多久关闭端口等待可以重用关闭端口。 </div>
<div class="sbody">&nbsp;</div>
<div class="sbody">对应英文原文为：</div>
<div class="sbody">&nbsp;</div>
<div class="sbody">
<h2 class="subTitle" id="tocHeadRef">SYMPTOMS</h2>


<div class="sbody">If you try to set up TCP connections from ports that 
are greater than 5000, the local computer responds with the following 
WSAENOBUFS (10055) error message: 
<div class="errormsg">An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full. </div></div>
<h2 class="subTitle" id="tocHeadRef">RESOLUTION</h2>


<div class="sbody"><b>Important</b> This section, method, or task 
contains steps that tell you how to modify the registry. However, 
serious problems might occur if you modify the registry incorrectly. 
Therefore, make sure that you follow these steps carefully. For added 
protection, back up the registry before you modify it. Then, you can 
restore the registry if a problem occurs. For more information about how
 to back up and restore the registry, click the following article number
 to view the article in the Microsoft Knowledge Base: </div>
<div class="indent"><a class="KBlink" href="http://support.microsoft.com/kb/322756/"><font color="#0000ff">322756</font></a><span class="pLink"> (http://support.microsoft.com/kb/322756/)</span> How to back up and restore the registry in Windows</div>
<div class="sbody"><br><br>The default maximum number of ephemeral TCP 
ports is 5000 in the products that are included in the 'Applies to' 
section. A new parameter has been added in these products. To increase 
the maximum number of ephemeral ports, follow these steps: </div>
<div class="sbody">
<table class="list ol">
<tbody>
<tr>
<td class="number">1.</td>
<td class="text">Start Registry Editor. </td></tr>
<tr>
<td class="number">2.</td>
<td class="text">Locate the following subkey in the registry, and then click <strong class="uiterm">Parameters</strong>: 
<div class="indent">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</div></td></tr>
<tr>
<td class="number">3.</td>
<td class="text">On the <strong class="uiterm">Edit</strong> menu, click <strong class="uiterm">New</strong>, and then add the following registry entry: 
<div class="indent">Value Name: <b>MaxUserPort</b><br>Value Type: DWORD<br>Value data: 65534<br>Valid Range: 5000-65534 (decimal)<br>Default: 0x1388 (5000 decimal)<br>Description:
 This parameter controls the maximum port number that is used when a 
program requests any available user port from the system. Typically , 
ephemeral (short-lived) ports are allocated between the values of 1024 
and 5000 inclusive. </div></td></tr>
<tr>
<td class="number">4.</td>
<td class="text">Exit Registry Editor, and then restart the computer. </td></tr></tbody></table></div>
<div class="sbody"><b>Note</b> An additional TCPTimedWaitDelay registry parameter determines how long a closed port waits until the closed port can be reused.</div>
<div class="sbody">&nbsp;</div>
<div class="sbody">原文连接：<a href="http://blog.chinaunix.net/link.php?url=http://support.microsoft.com%2Fkb%2Fq196271%2F">http://support.microsoft.com/kb/q196271/</a><br></div></div></div></div></div><!--EndFragment-->
</body>
</htm>