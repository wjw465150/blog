<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Servlet_Tutorial_JSP</title>

<META NAME="author" CONTENT="Marty Hall -- hall@apl.jhu.edu">
<META NAME="keywords"
      CONTENT="JavaServer Pages,javaserver pages,JSP 1.0,JSP,jsp,Servlet,servlet,Servlets,servlets,Tutorial,tutorial,Learning,learning,java,server,pages,CGI,cgi">
<META NAME="description"
      CONTENT="Servlet Tutorial: JavaServer Pages (JSP) 1.0.">
<META name="GENERATOR" content="IBM HomePage Builder 2001 V5.0.0 for Windows">
<LINK rel="STYLESHEET" href="Servlet-Tutorial-Styles.css" type="text/css">
</HEAD>

<BODY bgcolor="#e4ebf1">

<CENTER>
<TABLE BORDER=5 BGCOLOR="#EF8429">
  <TR><TH CLASS="TITLE">
      JavaServer Pages (JSP) 1.0</TABLE>
</CENTER>

<HR>
<TABLE><TR>
<TD>
<OL>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section1">Overview</A>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section2">Syntax Summary</A>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section3">Template Text (Static HTML)</A>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section4">JSP Scripting Elements: 
    Expressions, Scriptlets, and Declarations</A>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section5">JSP Directives</A>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section6">Example using Scripting Elements and Directives</A>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section7">Predefined Variables</A>
</OL>

<TD>
<OL START=8>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section8">JSP Actions</A>
    <UL>
       <LI>8.1. <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.1">jsp:include</A>
       <LI>8.2. <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.2">jsp:useBean overview</A>
       <LI>8.3. <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.3">jsp:useBean details</A>
       <LI>8.4. <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.4">jsp:setProperty</A>
       <LI>8.5. <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.5">jsp:getProperty</A>
       <LI>8.6. <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.6">jsp:forward</A>
       <LI>8.7. <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.7">jsp:plugin</A>
    </UL>
<LI><A HREF="file:///J:/技巧_CHM/J2EE/%23Section9">JSP Comments and Character Escaping Conventions</A>
<LI><A href="file:///J:/技巧_CHM/J2EE/index.html" target="_top">Servlet and JSP Tutorial: Top</A>
</OL>

</TABLE>
<HR>

<H2><A NAME="Section1">1. Overview</A></H2>
JavaServer Pages (JSP) lets you separate the dynamic part of
your pages from the static HTML. You simply write the regular HTML in the normal manner, 
using whatever Web-page-building tools you normally use.
You then enclose the code for the dynamic parts
in special tags, most of which start with "<CODE>&lt;%</CODE>"
and end with "<CODE>%&gt;</CODE>".  For example, here is a section
of a JSP page that results in something like "Thanks for
ordering <I>Core Web Programming</I>" for a URL of
<CODE>http://host/OrderConfirmation.jsp?title=Core+Web+Programming</CODE>:
<PRE>
Thanks for ordering 
&lt;I&gt;&lt;%= request.getParameter("title") %&gt;&lt;/I&gt;
</PRE>
You normally give your file a .jsp extension, and typically 
install it in any place you could place a normal Web page. Although what 
you write often looks more like a regular HTML file
than a servlet, behind the scenes, the JSP page just gets converted
to a normal servlet, with the static HTML simply being printed
to the output stream associated with the servlet's <CODE>service</CODE>
method. This is normally done the first time the page is requested,
and developers can simply request the page themselves when first
installing it if they want to be sure that the first real user
doesn't get a momentary delay when the JSP page is translated
to a servlet and the servlet is compiled and loaded. 
Note also that many Web servers let you define
aliases that so that a URL that appears to reference an HTML file
really points to a servlet or JSP page. 
<P>
Aside from the regular HTML, there are three main types of
JSP constructs that you embed in a page: scripting elements,
directives, and actions. <I>Scripting elements</I> let you 
specify Java code that will become part of the 
resultant servlet, <I>directives</I> let you control the overall
structure of the servlet, and <I>actions</I> let you
specify existing components that should be used,
and otherwise control the behavior of the JSP engine. To 
simplify the scripting elements, you have access to a number of 
predefined variables such as <CODE>request</CODE> in the snippet above.
<P>
Note that this tutorial covers version 1.0 of the JSP specification.
JSP has changed dramatically since version 0.92, and although
these changes were almost entirely for the better, you should
note that version 1.0 JSP pages are almost totally incompatible with
the earlier JSP engines.

<H2><A NAME="Section2">2. Syntax Summary</A></H2>
<TABLE BORDER=1>
<TR CLASS="COLORED">
  <TH>JSP Element
  <TH>Syntax
  <TH>Interpretation
  <TH>Notes
<TR>
  <TD>JSP Expression
  <TD><PRE>&lt;%= expression %&gt;</PRE>
  <TD>Expression is evaluated and placed in output.
  <TD>XML equivalent is<BR>
      <CODE>&lt;jsp:expression&gt;<BR>expression<BR>
      &lt;/jsp:expression&gt;</CODE>. Predefined variables
      are <CODE>request</CODE>, <CODE>response</CODE>,
      <CODE>out</CODE>, <CODE>session</CODE>, <CODE>application</CODE>,
      <CODE>config</CODE>, and <CODE>pageContext</CODE> 
      (available in scriptlets also).
<TR>
  <TD>JSP Scriptlet
  <TD><PRE>&lt;% code %&gt;</PRE>
  <TD>Code is inserted in <CODE>service</CODE> method.
  <TD>XML equivalent is<BR>
      <CODE>&lt;jsp:scriptlet&gt;<BR>code<BR>
      &lt;/jsp:scriptlet&gt;</CODE>.
<TR>
  <TD>JSP Declaration
  <TD><PRE>&lt;%! code %&gt;</PRE>
  <TD>Code is inserted in body of servlet class,
      outside of <CODE>service</CODE> method.
  <TD>XML equivalent is<BR>
      <CODE>&lt;jsp:declaration&gt;<BR>code<BR>
      &lt;/jsp:declaration&gt;</CODE>.
<TR>
  <TD>JSP <CODE>page</CODE> Directive
  <TD><PRE>&lt;%@ page att="val" %&gt;</PRE>
  <TD>Directions to the servlet engine about general setup.
  <TD>XML equivalent is<BR>
      <CODE>&lt;jsp:directive.page&nbsp;att="val"\&gt;</CODE>.
      Legal attributes, with default values in bold, are:
      <UL>
      <LI>import="<I>package.class</I>"
      <LI>contentType="<I>MIME-Type</I>"
      <LI>isThreadSafe="<B>true</B>|false"
      <LI>session="<B>true</B>|false"
      <LI>buffer="<I>size</I>kb|none"
      <LI>autoflush="<B>true</B>|false"
      <LI>extends="<I>package.class</I>"
      <LI>info="<I>message</I>"
      <LI>errorPage="<I>url</I>"
      <LI>isErrorPage="true|<B>false</B>"
      <LI>language="java"
      </UL>
<TR>
  <TD>JSP <CODE>include</CODE> Directive
  <TD><PRE>&lt;%@ include file="url" %&gt;</PRE>
  <TD>A file on the local system to be included when the JSP page
      is translated into a servlet. 
  <TD>XML equivalent is<BR>
      <CODE>&lt;jsp:directive.include<BR>
      &nbsp;&nbsp;file="url"\&gt;</CODE>.<BR>
      The URL must be a relative one. Use the
      <CODE>jsp:include</CODE> action to include a file at 
      request time instead of translation time.
<TR>
  <TD>JSP Comment
  <TD><PRE>&lt;%-- comment --%&gt;</PRE>
  <TD>Comment; ignored when JSP page is translated into servlet.
  <TD>If you want a comment in the resultant HTML, use regular
      HTML comment syntax of 
      <CODE>&lt;--&nbsp;comment&nbsp;--&gt;</CODE>.
<TR>
  <TD>The <CODE>jsp:include</CODE> Action
  <TD><PRE>&lt;jsp:include
    page="<I>relative URL</I>"
    flush="true"/&gt;</PRE>
  <TD>Includes a file at the time the page is requested.
  <TD>If you want to include the file at the time the page
      is translated, use the <CODE>page</CODE> directive with the 
      <CODE>include</CODE> attribute instead. <B>Warning:</B> on some servers, 
      the included file must be an HTML file or JSP file, as determined by the 
      server (usually based on the file extension). 
<TR>
  <TD>The <CODE>jsp:useBean</CODE> Action
  <TD><CODE>&lt;jsp:useBean&nbsp;att=val*/&gt;</CODE> or<BR>
      <CODE>&lt;jsp:useBean&nbsp;att=val*&gt;<BR>
      ...<BR>
      &lt;/jsp:useBean&gt;</CODE>
  <TD>Find or build a Java Bean.
  <TD>Possible attributes are:
      <UL>
      <LI>id="<I>name</I>"
      <LI>scope="<B>page</B>|request|session|application"
      <LI>class="<I>package.class</I>"
      <LI>type="<I>package.class</I>"
      <LI>beanName="<I>package.class</I>"
      </UL>
<TR>
  <TD>The <CODE>jsp:setProperty</CODE> Action
  <TD><PRE>&lt;jsp:setProperty att=val*/&gt;</PRE>
  <TD>Set bean properties, either explicitly or by
      designating that value comes from a request parameter.
  <TD>Legal attributes are
      <UL>
      <LI>name="<I>beanName</I>"
      <LI>property="<I>propertyName</I>|*"
      <LI>param="<I>parameterName</I>"
      <LI>value="<I>val</I>"
      </UL>
<TR>
  <TD>The <CODE>jsp:getProperty</CODE> Action
  <TD><PRE>&lt;jsp:getProperty
    name="<I>propertyName</I>"
    value="<I>val</I>"/&gt;</PRE>
  <TD>Retrieve and output bean properties. 
  <TD>&nbsp;
<TR>
  <TD>The <CODE>jsp:forward</CODE> Action
  <TD><PRE>&lt;jsp:forward
    page="<I>relative URL</I>"/&gt;</PRE>
  <TD>Forwards request to another page.
  <TD>&nbsp;
<TR>
  <TD>The <CODE>jsp:plugin</CODE> Action
  <TD>
<PRE>&lt;jsp:plugin
    attribute="<I>value</I>"*&gt;
  ...
&lt;/jsp:plugin&gt;</PRE>
  <TD>Generates <CODE>OBJECT</CODE> or <CODE>EMBED</CODE> tags, 
      as appropriate to the browser
      type, asking that an applet be run using the Java Plugin.
  <TD>&nbsp;
</TABLE>

<H2><A NAME="Section3">3. Template Text: Static HTML</A></H2>
In many cases, a large percent of your JSP page just consists
of static HTML, known as <I>template text</I>. In all respects
except one, this HTML looks just like normal HTML, follows
all the same syntax rules, and is simply "passed through"
to the client by the servlet created to handle the page.
Not only does the HTML <I>look</I> normal, it can
be <I>created</I> by whatever tools you already are using for building
Web pages. For example, I used Allaire's HomeSite for most of the
JSP pages in this tutorial.
<P>
The one minor exception to the "template text is passed straight through"
rule is that, if you want to have "<CODE>&lt;%</CODE>" in
the output, you need to put "<CODE>&lt;\%</CODE>" in the template text. 

<H2><A NAME="Section4">4. JSP Scripting Elements</A></H2>
JSP scripting elements let you insert Java code into the servlet
that will be generated from the current JSP page. There are
three forms:
<OL>
<LI>Expressions of the form 
    <CODE>&lt;%=&nbsp;expression&nbsp;%&gt;</CODE>
    that are evaluated and inserted into the output,
<LI>Scriptlets of the form 
    <CODE>&lt;%&nbsp;code&nbsp;%&gt;</CODE>
    that are inserted into the servlet's 
    <CODE>service</CODE> method, and
<LI>Declarations of the form 
    <CODE>&lt;%!&nbsp;code&nbsp;%&gt;</CODE>
    that are inserted into the body of the servlet class,
    outside of any existing methods.
</OL>
Each of these is described in more detail below.

<H3>4.1 JSP Expressions</H3>
A JSP <I>expression</I> is used to insert Java values directly
into the output. It has the following form:
<PRE>
<B>&lt;%=</B> Java Expression <B>%&gt;</B>
</PRE>
The Java expression is evaluated, converted to a string,
and inserted in the page. This evaluation is performed at
run-time (when the page is requested), and thus has full
access to information about the request. For example,
the following shows the date/time that the page was
requested:
<PRE>
Current time: &lt;%= new java.util.Date() %&gt;
</PRE> 
To simplify these expressions, there are a number of predefined
variables that you can use. These implicit objects are discussed
in more detail later, but for the purpose of expressions, the most important
ones are: 
<UL>
  <LI><CODE>request</CODE>, the <CODE>HttpServletRequest</CODE>; 
  <LI><CODE>response</CODE>, the <CODE>HttpServletResponse</CODE>;
  <LI><CODE>session</CODE>, the <CODE>HttpSession</CODE> associated 
      with the request (if any); and
  <LI><CODE>out</CODE>, the <CODE>PrintWriter</CODE> 
      (a buffered version of type <CODE>JspWriter</CODE>) used to send 
      output to the client. 
</UL>
Here's an example:
<PRE>
Your hostname: &lt;%= request.getRemoteHost() %&gt;
</PRE>
Finally, note that XML authors can use an alternative syntax
for JSP expressions:
<PRE>
&lt;jsp:expression&gt;
Java Expression
&lt;/jsp:expression&gt;
</PRE>
Remember that XML elements, unlike HTML ones, are case sensitive.
So be sure to use lowercase.

<H3>4.2 JSP Scriptlets</H3>
If you want to do something more complex than insert a simple
expression, JSP <I>scriptlets</I> let you insert arbitrary
code into the servlet method that will be built to generate
the page. Scriptlets have the following form:
<PRE>
<B>&lt;%</B> Java Code <B>%&gt;</B>
</PRE>
Scriptlets have access to the same automatically
defined variables as expressions. So, for example, 
if you want output to appear in the resultant page,
you would use the <CODE>out</CODE> variable. 
<PRE>
&lt;% 
String queryData = request.getQueryString();
out.println("Attached GET data: " + queryData); 
%&gt;
</PRE>
Note that code inside a scriptlet gets inserted <I>exactly</I>
as written, and any static HTML (template text) before or after
a scriptlet gets converted to <CODE>print</CODE> statements. This
means that scriptlets need not contain complete Java statements,
and blocks left open can affect the static HTML outside of
the scriptlets. For example, the following JSP fragment, containing
mixed template text and scriptlets
<PRE>
&lt;% if (Math.random() &lt; 0.5) { %&gt;
Have a &lt;B&gt;nice&lt;/B&gt; day!
&lt;% } else { %&gt;
Have a &lt;B&gt;lousy&lt;/B&gt; day!
&lt;% } %&gt;
</PRE>
will get converted to something like:
<PRE>
if (Math.random() &lt; 0.5) { 
  out.println("Have a &lt;B&gt;nice&lt;/B&gt; day!");
} else { 
  out.println("Have a &lt;B&gt;lousy&lt;/B&gt; day!");
}
</PRE>
If you want to use the characters "<CODE>%&gt;</CODE>" inside
a scriptlet, enter "<CODE>%\&gt;</CODE>" instead. Finally,
note that the XML equivalent of <CODE>&lt;%&nbsp;Code&nbsp;%&gt;</CODE>
is
<PRE>
&lt;jsp:scriptlet&gt;
Code
&lt;/jsp:scriptlet&gt;
</PRE>


<H3>4.3 JSP Declarations</H3>
A JSP <I>declaration</I> lets you define methods or fields that get inserted
into the main body of the servlet class (outside of the 
<CODE>service</CODE> method processing the request). It has
the following form:
<PRE>
<B>&lt;%!</B> Java Code <B>%&gt;</B>
</PRE>
Since declarations do not generate any output, they are normally
used in conjunction with JSP expressions or scriptlets. For example,
here is a JSP fragment that prints out the number of times the
current page has been requested since the server booted (or the
servlet class was changed and reloaded):
<PRE>
&lt;%! private int accessCount = 0; %&gt;
Accesses to page since server reboot: 
&lt;%= ++accessCount %&gt;
</PRE>
As with scriptlets, if you want to use the characters "<CODE>%&gt;</CODE>", 
enter "<CODE>%\&gt;</CODE>" instead. Finally,
note that the XML equivalent of <CODE>&lt;%!&nbsp;Code&nbsp;%&gt;</CODE>
is
<PRE>
&lt;jsp:declaration&gt;
Code
&lt;/jsp:declaration&gt;
</PRE>

<H2><A NAME="Section5">5. JSP Directives</A></H2>
A JSP <I>directive</I> affects the overall structure of the
servlet class. It usually has the following form:
<PRE>
<B>&lt;%@</B> directive attribute="value" <B>%&gt;</B>
</PRE>
However, you can also combine multiple attribute settings
for a single directive, as follows:
<PRE>
<B>&lt;%@</B> directive attribute1="value1" 
              attribute2="value2"
              ...
              attributeN="valueN" <B>%&gt;</B>
</PRE>
There are two main types of directive: <CODE>page</CODE>,
which lets you do things like import classes, customize
the servlet superclass, and the like; and <CODE>include</CODE>,
which lets you insert a file into the servlet class
at the time the JSP file is translated into a servlet.
The specification also mentions the <CODE>taglib</CODE> directive,
which is not supported in JSP version 1.0, but is intended to
let JSP authors define their own tags. It is expected that this
will be the main new contribution of JSP 1.1.

<H3>5.1 The JSP <CODE>page</CODE> Directive</H3>
The <CODE>page</CODE> directive lets you define one or more of the following
case-sensitive attributes:
<UL>
  <LI><CODE>import="<I>package.class</I>"</CODE> or 
      <CODE>import="<I>package.class1,...,package.classN</I>"</CODE>.
      This lets you specify what packages should be imported.
      For example:<BR>
      <CODE>&lt;%@ page import="java.util.*" %&gt;</CODE><BR>
      The <CODE>import</CODE> attribute is the only one that is allowed
      to appear multiple times.
  <LI><CODE>contentType="<I>MIME-Type</I>"</CODE> or <BR>
      <CODE>contentType="<I>MIME-Type</I>; charset=<I>Character-Set</I>"</CODE><BR>
      This specifies the MIME type of the output. The default
      is <CODE>text/html</CODE>. For example, the directive
      <BR><CODE>&lt;%@ page contentType="text/plain" %&gt;</CODE><BR>
      has the same effect as the scriptlet
      <BR><CODE>&lt;% response.setContentType("text/plain"); %&gt;</CODE>
  <LI><CODE>isThreadSafe="true|false"</CODE>. A value of
      <CODE>true</CODE> (the default) indicates normal servlet processing, 
      where multiple requests can be processed simultaneously with a 
      single servlet instance, under the assumption
      that the author synchronized access to instance variables.
      A value of <CODE>false</CODE> indicates that the servlet should
      implement <CODE>SingleThreadModel</CODE>, with requests either delivered 
      serially or with simultaneous requests being given separate
      servlet instances.
  <LI><CODE>session="true|false"</CODE>. A value of
      <CODE>true</CODE> (the default) indicates that the predefined
      variable <CODE>session</CODE> (of type <CODE>HttpSession</CODE>) 
      should be bound to the existing session if one exists,
      otherwise a new session should be created and bound to it.
      A value of <CODE>false</CODE> indicates that no sessions will be used,
      and attempts to access the variable <CODE>session</CODE> will 
      result in errors at the time the JSP page is translated
      into a servlet.
  <LI><CODE>buffer="<I>size</I>kb|none"</CODE>. This specifies the buffer
      size for the <CODE>JspWriter</CODE> <CODE>out</CODE>. 
      The default is server-specific, but must be at least <CODE>8kb</CODE>.
  <LI><CODE>autoflush="true|false"</CODE>. A value of <CODE>true</CODE>,
      the default, indicates that the buffer should be flushed
      when it is full. A value of <CODE>false</CODE>, rarely used, indicates
      that an exception should be thrown when the buffer overflows.
      A value of <CODE>false</CODE> is illegal when also using
      <CODE>buffer="none"</CODE>.
  <LI><CODE>extends="<I>package.class</I>"</CODE>. This indicates the superclass
      of servlet that will be generated. Use this with extreme
      caution, since the server may be using a custom superclass
      already.
  <LI><CODE>info="<I>message</I>"</CODE>. This defines a string that can
      be retrieved via the <CODE>getServletInfo</CODE> method.
  <LI><CODE>errorPage="<I>url</I>"</CODE>. This specifies a JSP page
      that should process any <CODE>Throwable</CODE>s thrown but not caught
      in the current page.
  <LI><CODE>isErrorPage="true|false"</CODE>. This indicates whether
      or not the current page can act as the error page for
      another JSP page. The default is <CODE>false</CODE>.
  <LI><CODE>language="java"</CODE>. At some point, this is
      intended to specify the underlying language being used.
      For now, don't bother with this since <CODE>java</CODE> is both the
      default and the only legal choice.
</UL>
The XML syntax for defining directives is
<PRE>
&lt;jsp:directive.<I>directiveType</I> attribute=value /&gt;
</PRE>
For example, the XML equivalent of
<PRE>&lt;%@ page import="java.util.*" %&gt;</PRE>
is
<PRE>&lt;jsp:directive.page import="java.util.*" /&gt;</PRE>

<H3><A NAME="Section5-2">5.2 The JSP <CODE>include</CODE> Directive</A></H3>
This directive lets you include files at the time the
JSP page is translated into a servlet. The directive looks like this:
<PRE>
&lt;%@ include file="relative url" %&gt;
</PRE>
The URL specified is normally interpreted relative to the JSP page that
refers to it, but, as with relative URLs in general, you can tell the system
to interpret the URL relative to the home directory of the Web server by
starting the URL with a forward slash. The contents of the 
included file are parsed as regular JSP text, and
thus can include static HTML, scripting elements, directives, and actions. 
<P>
For example, many sites include a small navigation bar on each page. 
Due to problems with HTML frames, this is usually implemented
by way of a small table across the top of the page or down the left-hand side, 
with the HTML repeated for each page in the site. The <CODE>include</CODE>
directive is a natural way of doing this, saving the developers from the maintenance
nightmare of actually copying the HTML into each separate file. Here's some
representative code:
<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Servlet Tutorial: JavaServer Pages (JSP) 1.0&lt;/TITLE&gt;
&lt;META NAME="author" CONTENT="webmaster@somesite.com"&gt;
&lt;META NAME="keywords" CONTENT="..."&gt;
&lt;META NAME="description" CONTENT="..."&gt;
&lt;LINK REL=STYLESHEET
      HREF="Site-Styles.css"
      TYPE="text/css"&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
<B>&lt;%@ include file="/navbar.html" %&gt;</B>

&lt;!-- Part specific to this page ... --&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

Note that since the <CODE>include</CODE> directive inserts the files at the 
time the page is translated, if the navigation bar changes, you need to
re-translate all the JSP pages that refer to it. This is
a good compromise in a situation like this, since the navigation bar probably
changes infrequently, and you want the inclusion process to be as efficient as possible.
If, however, the included files changed more often, you could
use the <CODE>jsp:include</CODE> action instead. This includes the file
at the time the JSP page is requested, and is discussed
in <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8">the tutorial section on JSP actions</A>.


<H2><A NAME="Section6">6. Example Using Scripting Elements and Directives</A></H2>
Here is a simple example showing the use of JSP
expressions, scriptlets, declarations, and directives.
You can also 
<A href="file:///J:/技巧_CHM/J2EE/hall/JspTest.jsp">download the source</A> or 
<A HREF="http://webdev.apl.jhu.edu/~hall/servlets/JspTest.jsp?data=foo+bar+baz">
try it on-line</A>.
<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Using JavaServer Pages&lt;/TITLE&gt;

&lt;META NAME="author" CONTENT="Marty Hall -- hall@apl.jhu.edu"&gt;
&lt;META NAME="keywords"
      CONTENT="JSP,JavaServer Pages,servlets"&gt;
&lt;META NAME="description"
      CONTENT="A quick example of the four main JSP tags."&gt;
&lt;LINK REL=STYLESHEET
      HREF="My-Style-Sheet.css"
      TYPE="text/css"&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR="#FDF5E6" TEXT="#000000" LINK="#0000EE"
      VLINK="#551A8B" ALINK="#FF0000"&gt;

&lt;CENTER&gt;
&lt;TABLE BORDER=5 BGCOLOR="#EF8429"&gt;
  &lt;TR&gt;&lt;TH CLASS="TITLE"&gt;
      Using JavaServer Pages&lt;/TABLE&gt;
&lt;/CENTER&gt;
&lt;P&gt;

Some dynamic content created using various JSP mechanisms:
&lt;UL&gt;
  &lt;LI&gt;&lt;B&gt;Expression.&lt;/B&gt;&lt;BR&gt;
      Your hostname: &lt;%= request.getRemoteHost() %&gt;.
  &lt;LI&gt;&lt;B&gt;Scriptlet.&lt;/B&gt;&lt;BR&gt;
      &lt;% out.println("Attached GET data: " +
                     request.getQueryString()); %&gt;
  &lt;LI&gt;&lt;B&gt;Declaration (plus expression).&lt;/B&gt;&lt;BR&gt;
      &lt;%! private int accessCount = 0; %&gt;
      Accesses to page since server reboot: &lt;%= ++accessCount %&gt;
  &lt;LI&gt;&lt;B&gt;Directive (plus expression).&lt;/B&gt;&lt;BR&gt;
      &lt;%@ page import = "java.util.*" %&gt;
      Current date: &lt;%= new Date() %&gt;
&lt;/UL&gt;


&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
Here's a typical result: 
<CENTER>
<IMG src="JspTest-IE.gif" width="565" height="445" alt="JspTest Output">
</CENTER>

<H2><A NAME="Section7">7. Predefined Variables</A></H2>
To simplify code in JSP expressions and scriptlets,
you are supplied with eight automatically defined
variables, sometimes called <I>implicit objects</I>.
The available variables are <CODE>request</CODE>, <CODE>response</CODE>,
<CODE>out</CODE>, <CODE>session</CODE>, <CODE>application</CODE>,
<CODE>config</CODE>,  <CODE>pageContext</CODE>, and
<CODE>page</CODE>. Details for each are given below.

<H3>7.1 request</H3>
This is the <CODE>HttpServletRequest</CODE> associated with the request,
and lets you look at the request parameters
(via <CODE>getParameter</CODE>), the request type 
(<CODE>GET</CODE>, <CODE>POST</CODE>, <CODE>HEAD</CODE>, etc.),
and the incoming HTTP headers (cookies, <CODE>Referer</CODE>, etc.).
Strictly speaking, request is allowed to be a 
subclass of <CODE>ServletRequest</CODE> other than
<CODE>HttpServletRequest</CODE>, if the protocol in the request
is something other than HTTP. This is almost never done 
in practice.

<H3>7.2 response</H3>
This is the <CODE>HttpServletResponse</CODE> associated with the
response to the client. Note that, since the output stream
(see <CODE>out</CODE> below) is buffered, it <I>is</I> legal to set HTTP
status codes and response headers, even though this is not
permitted in regular servlets once any output has been sent
to the client.

<H3>7.3 out</H3>
This is the <CODE>PrintWriter</CODE> used to send output to the client.
However, in order to make the <CODE>response</CODE> object (see the
previous section) useful, this is a buffered version
of <CODE>PrintWriter</CODE> called <CODE>JspWriter</CODE>. 
Note that you can adjust the buffer size, or even turn buffering off, 
through use of the <CODE>buffer</CODE> attribute of the
<CODE>page</CODE> directive. This was
discussed in <A HREF="file:///J:/技巧_CHM/J2EE/%23Section5">Section 5</A>.
Also note that <CODE>out</CODE> is used almost exclusively in
scriptlets, since JSP expressions automatically
get placed in the output stream, and thus
rarely need to refer to <CODE>out</CODE> explicitly.

<H3>7.4 session</H3>
This is the <CODE>HttpSession</CODE> object associated with the request.
Recall that sessions are created automatically, so this
variable is bound even if there was no incoming session
reference. The one exception is if you use the 
<CODE>session</CODE> attribute of the
<CODE>page</CODE> directive
(see <A HREF="file:///J:/技巧_CHM/J2EE/%23Section5">Section 5</A>) to turn sessions off, in which
case attempts to reference the session variable
cause errors at the time the JSP page is translated into
a servlet.

<H3>7.5 application</H3>
This is the <CODE>ServletContext</CODE> as obtained via
<CODE>getServletConfig().getContext()</CODE>.

<H3>7.6 config</H3>
This is the <CODE>ServletConfig</CODE> object for this page.

<H3>7.7 pageContext</H3>
JSP introduced a new class called <CODE>PageContext</CODE>
to encapsulate use of server-specific
features like higher performance <CODE>JspWriter</CODE>s. The idea
is that, if you access them through this class rather than 
directly, your code will still run on "regular" 
servlet/JSP engines.

<H3>7.8 page</H3>
This is simply a synonym for <CODE>this</CODE>, and is not
very useful in Java. It was created as a placeholder for
the time when the scripting language could be something
other than Java.

<H2><A NAME="Section8">8. Actions</A></H2>
JSP <I>actions</I> use constructs in XML syntax to control the behavior of the
servlet engine. You can dynamically insert a file, reuse JavaBeans components,
forward the user to another page, or generate HTML for the Java plugin.
Available actions include: 
<UL>
  <LI><CODE>jsp:include</CODE> - Include a file at the time the page is requested.
      See <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.1">Section 8.1</A>.
  <LI><CODE>jsp:useBean</CODE> - Find or instantiate a JavaBean.
      See <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.2">Section 8.2</A> for an overview,
      and <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.3">Section 8.3</A> for details.
  <LI><CODE>jsp:setProperty</CODE> - Set the property of a JavaBean.
      See <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.4">Section 8.4</A>.
  <LI><CODE>jsp:getProperty</CODE> - Insert the property of a JavaBean into the output.
      See <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.5">Section 8.5</A>.
  <LI><CODE>jsp:forward</CODE> - Forward the requester to a new page.
      See <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.6">Section 8.6</A>.
  <LI><CODE>jsp:plugin</CODE> - Generate browser-specific code that makes 
      an <CODE>OBJECT</CODE> or <CODE>EMBED</CODE> tag for the Java plugin.
      See <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.7">Section 8.7</A>.
</UL>
These actions are described in more detail below. Remember that, as with
XML in general, the element and attribute names are case sensitive.

<H3><A NAME="Section8.1">8.1 The <CODE>jsp:include</CODE> Action</A></H3>
This action lets you  insert files into the page being generated. The syntax
looks like this:
<PRE>
&lt;jsp:include page="relative URL" flush="true" /&gt;
</PRE>
Unlike the <A HREF="file:///J:/技巧_CHM/J2EE/%23Section5-2">include directive</A>, 
which inserts the file at the time the JSP page is
translated into a servlet, this action inserts the file at the time the page
is requested. This pays a small penalty in efficiency, and precludes the
included page from containing general JSP code (it cannot set HTTP headers,
for example), but it gains significantly in flexibility. For example, here
is a JSP page that inserts four different snippets into a "What's New?"
Web page. Each time the headlines change, authors only need to update
the four files, but can leave the main JSP page unchanged.

<H3>WhatsNew.jsp</H3>
You can also 
<A href="file:///J:/技巧_CHM/J2EE/hall/WhatsNew.jsp">download the source</A> or 
<A HREF="http://webdev.apl.jhu.edu/~hall/servlets/WhatsNew.jsp">
try it on-line</A>.
<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;What's New&lt;/TITLE&gt;
&lt;LINK REL=STYLESHEET
      HREF="My-Style-Sheet.css"
      TYPE="text/css"&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR="#FDF5E6" TEXT="#000000" LINK="#0000EE"
      VLINK="#551A8B" ALINK="#FF0000"&gt;

&lt;CENTER&gt;
&lt;TABLE BORDER=5 BGCOLOR="#EF8429"&gt;
  &lt;TR&gt;&lt;TH CLASS="TITLE"&gt;
      What's New at JspNews.com&lt;/TABLE&gt;
&lt;/CENTER&gt;
&lt;P&gt;

Here is a summary of our four most recent news stories:
&lt;OL&gt;
  &lt;LI&gt;&lt;jsp:include page="news/Item1.html" flush="true"/&gt;
  &lt;LI&gt;&lt;jsp:include page="news/Item2.html" flush="true"/&gt;
  &lt;LI&gt;&lt;jsp:include page="news/Item3.html" flush="true"/&gt;
  &lt;LI&gt;&lt;jsp:include page="news/Item4.html" flush="true"/&gt;
&lt;/OL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
Here's a typical result: 
<CENTER>
<IMG src="WhatsNew-NS.gif" width="706" height="504" alt="WhatsNew Output">
</CENTER>

<H3><A NAME="Section8.2">8.2 The <CODE>jsp:useBean</CODE> Action</A></H3>
This action lets you load in a JavaBean to be used in the JSP page. 
This is a a very useful capability because it lets you exploit the
reusability of Java classes without sacrificing the convenience that
JSP adds over servlets alone. The simplest syntax for specifying
that a bean should be used is:
<PRE>
&lt;jsp:useBean id="<I>name</I>" class="<I>package.class</I>" /&gt;
</PRE>
This usually means "instantiate an object of the class specified by <CODE>class</CODE>, 
and bind it to a variable with the name specified by <CODE>id</CODE>." However, as
we'll see shortly, you can specify a <CODE>scope</CODE> attribute that makes the bean
associated with more than just the current page. In that case, it is useful
to obtain references to existing beans, and the <CODE>jsp:useBean</CODE> action specifies
that a new object is instantiated only if there is no existing one 
with the same <CODE>id</CODE> and <CODE>scope</CODE>. Now, once you have a bean,
you can modify its properties via <CODE>jsp:setProperty</CODE>, or by using
a scriptlet and calling a method explicitly on the object with the variable
name specified earlier via the <CODE>id</CODE> attribute. Recall that with
beans, when you say "this bean has a property of type<I>X</I> called 
<CODE>foo</CODE>", you really mean "this class has a method called <CODE>getFoo</CODE> 
that returns something of type <I>X</I>, and another method called 
<CODE>setFoo</CODE> that takes an <I>X</I> as an argument."  The <CODE>jsp:setProperty</CODE>
action is discussed in more detail in the next section, but for now note that you
can either supply an explicit <CODE>value</CODE>, give a <CODE>param</CODE> attribute to say that the
value is derived from the named request parameter, or just list the property to
indicate that the value should be derived from the request parameter with the
same name as the property. You read existing properties in a JSP expression 
or scriptlet by calling the appropriate <I><CODE>getXxx</CODE></I> method, 
or more commonly, by using the <CODE>jsp:getProperty</CODE>
action.
<P>
Note that the class specified for the bean must be in the server's
<I>regular</I> class path, not the part reserved for classes that
get automatically reloaded when they change. For example, in the Java Web Server, it and all
the classes it uses should go in the <CODE>classes</CODE> directory or be
in a jar file in the <CODE>lib</CODE> directory, not be in
the <CODE>servlets</CODE> directory. 
<P>
Here is a very simple example that loads a bean and sets/gets a
simple <CODE>String</CODE> parameter.
<H3>BeanTest.jsp</H3>
You can also <A href="file:///J:/技巧_CHM/J2EE/hall/BeanTest.jsp">download the source</A>
or <A HREF="http://webdev.apl.jhu.edu/~hall/servlets/BeanTest.jsp">try
it on-line</A>.
<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Reusing JavaBeans in JSP&lt;/TITLE&gt;
&lt;LINK REL=STYLESHEET
      HREF="My-Style-Sheet.css"
      TYPE="text/css"&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;

&lt;CENTER&gt;
&lt;TABLE BORDER=5&gt;
  &lt;TR&gt;&lt;TH CLASS="TITLE"&gt;
      Reusing JavaBeans in JSP&lt;/TABLE&gt;
&lt;/CENTER&gt;
&lt;P&gt;

<B>&lt;jsp:useBean id="test" class="hall.SimpleBean" /&gt;
&lt;jsp:setProperty name="test" 
                 property="message" 
                 value="Hello WWW" /&gt;</B>
             
&lt;H1&gt;Message: &lt;I&gt;
<B>&lt;jsp:getProperty name="test" property="message" /&gt;</B>
&lt;/I&gt;&lt;/H1&gt;
             
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<H3>SimpleBean.java</H3>
Here's the source code for the bean used in the BeanTest JSP page.
You can also <A href="file:///J:/技巧_CHM/J2EE/hall/SimpleBean.java">download the source</A>.
<PRE>
package hall;

public class SimpleBean {
  private String message = "No message specified";

  public String <B>getMessage</B>() {
    return(message);
  }

  public void <B>setMessage</B>(String message) {
    this.message = message;
  }
}
</PRE>

Here's a typical result: 
<CENTER>
<IMG src="BeanTest-NS.gif" width="601" height="290" alt="BeanTest Output">
</CENTER>

<H3><A NAME="Section8.3">8.3 More <CODE>jsp:useBean</CODE> Details</A></H3>
The simplest way to use a bean is to use<BR>
<CODE>&nbsp;&nbsp;&nbsp;&lt;jsp:useBean&nbsp;id="<I>name</I>"&nbsp;class="<I>package.class</I>"&nbsp;/&gt;</CODE>
<BR>to load the bean, then use <CODE>jsp:setProperty</CODE>
and <CODE>jsp:getProperty</CODE> to modify and retrieve bean properties.
However, there are two other options. First, you can use the container format, namely <BR>
<CODE>&nbsp;&nbsp;&lt;jsp:useBean ...&gt;
<BR>&nbsp;&nbsp;&nbsp;&nbsp;<I>Body</I>
<BR>&nbsp;&nbsp;&lt;/jsp:useBean&gt;</CODE><BR>
to indicate that the <I>Body</I> portion should be executed only when the bean
is first instantiated, not when an existing bean is found and used. As 
discussed below, beans can be shared, so not all <CODE>jsp:useBean</CODE> statements
result in a new bean being instantiated. Second, in addition
to <CODE>id</CODE> and <CODE>class</CODE>, there are three other attributes that you can 
use: <CODE>scope</CODE>, <CODE>type</CODE>, and <CODE>beanName</CODE>. These
attributes are summarized in the following table.
<P>
<TABLE BORDER=1>
<TR CLASS="COLORED">
  <TH>Atribute
  <TH>Usage
<TR>
  <TD><CODE>id</CODE>
  <TD>Gives a name to the variable that will reference the bean. A
      previous bean object is used instead of instantiating a new one
      if one can be found with the same <CODE>id</CODE> 
      and <CODE>scope</CODE>.
<TR>
  <TD><CODE>class</CODE>
  <TD>Designates the full package name of the bean.
<TR>
  <TD><CODE>scope</CODE> 
  <TD>Indicates the context in which the bean should be made available.
      There are four possible values: <CODE>page</CODE>, 
      <CODE>request</CODE>, <CODE>session</CODE>, and <CODE>application</CODE>.
      The default, <CODE>page</CODE>, indicates that the bean is only available on the current
      page (stored in the <CODE>PageContext</CODE> of the current page). A value of <CODE>request</CODE>
      indicates that the bean is only available for the current client request
      (stored in the <CODE>ServletRequest</CODE> object).  A value of <CODE>session</CODE> indicates
      that the object is available to all pages during the life of the current
      <CODE>HttpSession</CODE>. Finally, a value of <CODE>application</CODE> indicates that it is
      available to all pages that share the same <CODE>ServletContext</CODE>. The reason
      that the scope matters is that a <CODE>jsp:useBean</CODE> entry will only result
      in a new object being instantiated if there is no previous object
      with the same <CODE>id</CODE> and <CODE>scope</CODE>. Otherwise the previously existing object
      is used, and any <CODE>jsp:setParameter</CODE> elements or other entries between
      the <CODE>jsp:useBean</CODE> start and end tags will be ignored.
<TR>
  <TD><CODE>type</CODE>
  <TD>Specifies the type of the variable that will refer to the object.
      This must match the classname or be a superclass or an interface that
      the class implements.
      Remember that the <I>name</I> of the variable is designated via the 
      <CODE>id</CODE> attribute.
<TR>
  <TD><CODE>beanName</CODE>
  <TD>Gives the name of the bean, as you would supply it to the <CODE>instantiate</CODE>
      method of <CODE>Beans</CODE>. It is permissible to supply a <CODE>type</CODE> and a 
      <CODE>beanName</CODE>, and omit the <CODE>class</CODE> attribute.
</TABLE>

<H3><A NAME="Section8.4">8.4 The <CODE>jsp:setProperty</CODE> Action</A></H3>
You use <CODE>jsp:setProperty</CODE> to give values to properties of beans that
have been referenced earlier. You can do this in two contexts. First, you can
use <CODE>jsp:setProperty</CODE> after, but outside of, a 
<CODE>jsp:useBean</CODE> element, as below:
<PRE>
&lt;jsp:useBean id="myName" ... /&gt;
...
&lt;jsp:setProperty name="myName" 
                 property="someProperty" ... /&gt;
</PRE>
In this case, the <CODE>jsp:setProperty</CODE> is executed regardless of
whether a new bean was instantiated or an existing bean was found.
A second context in which <CODE>jsp:setProperty</CODE> can appear
is inside the body of a <CODE>jsp:useBean</CODE> element, as below:
<PRE>
&lt;jsp:useBean id="myName" ... &gt;
&nbsp;&nbsp;...
&nbsp;&nbsp;&lt;jsp:setProperty name="myName" 
                   property="someProperty" ... /&gt;
&lt;/jsp:useBean&gt;
</PRE>
Here, the <CODE>jsp:setProperty</CODE> is executed only if a
new object was instantiated, not if an existing one was found.
<P>
There are four possible attributes of <CODE>jsp:setProperty</CODE>:
<P>
<TABLE BORDER=1>
<TR CLASS="COLORED">
  <TH>Attribute
  <TH>Usage
<TR>
  <TD><CODE>name</CODE>
  <TD>This required attribute designates the bean whose property
      will be set. The <CODE>jsp:useBean</CODE> element must appear before
      the <CODE>jsp:setProperty</CODE> element.
<TR>
  <TD><CODE>property</CODE>
  <TD>This required attribute indicates the property you want to set. However, there is
      one special case: a value of <CODE>"*"</CODE> means that all request parameters
      whose names match bean property names will be passed to the
      appropriate setter methods.
<TR>
  <TD><CODE>value</CODE>
  <TD>This optional attribute specifies the value for the property. 
      String values are automatically converted to numbers, <CODE>boolean</CODE>, 
      <CODE>Boolean</CODE>, <CODE>byte</CODE>, <CODE>Byte</CODE>, <CODE>char</CODE>, 
      and <CODE>Character</CODE> via the standard <CODE>valueOf</CODE> method
      in the target or wrapper class. For example, a value
      of <CODE>"true"</CODE> for a <CODE>boolean</CODE> or <CODE>Boolean</CODE> 
      property will be converted via <CODE>Boolean.valueOf</CODE>, and a value 
      of <CODE>"42"</CODE> for an <CODE>int</CODE> or <CODE>Integer</CODE> property will be
      converted via <CODE>Integer.valueOf</CODE>. You can't use both <CODE>value</CODE>
      and <CODE>param</CODE>, but it is permissible to use neither. See the discussion of
      <CODE>param</CODE> below.
<TR>
  <TD><CODE>param</CODE>
  <TD>This optional attribute designates the request parameter from which
      the property should be derived. If the current request has no such
      parameter, nothing is done: the system does <I>not</I> pass <CODE>null</CODE> to
      the setter method of the property. Thus, you can let the bean itself supply
      default values, overriding them only when the request parameters say to
      do so. For example, the following snippet says "set the <CODE>numberOfItems</CODE>
      property to whatever the value of the <CODE>numItems</CODE> request parameter is, if 
      there is such a request parameter. Otherwise don't do anything." 
<PRE>&lt;jsp:setProperty name="orderBean"
                 property="numberOfItems"
                 param="numItems" /&gt;</PRE>   
       If you omit both <CODE>value</CODE> and <CODE>param</CODE>, it is the same as if you supplied
       a <CODE>param</CODE> name that matches the <CODE>property</CODE> name.  
       You can take this idea of automatically using the request property
       whose name matches the property one step further by supplying a property name of
       <CODE>"*"</CODE> and omitting both <CODE>value</CODE> and <CODE>param</CODE>. 
       In this case, the server iterates through available properties and 
       request parameters, matching up ones with identical names.                

</TABLE>
Here's an example that uses a bean to create a table of prime numbers.
If there is a parameter named <CODE>numDigits</CODE> in the request data, it is passed
into the bean's <CODE>numDigits</CODE> property. Likewise for <CODE>numPrimes</CODE>.

<H3>JspPrimes.jsp</H3>
To download the JSP source, right click on
<A href="file:///J:/技巧_CHM/J2EE/hall/JspPrimes.jsp">the source code link</A>.
You can also download
<A href="file:///J:/技巧_CHM/J2EE/hall/NumberedPrimes.java">the source code for the
<CODE>NumberedPrimes</CODE> bean</A> referenced by the <CODE>jsp:useBean</CODE>
element. Browse the <A href="file:///J:/技巧_CHM/J2EE/hall/">source code directory</A>
for other Java classes used by <CODE>NumberedPrimes</CODE>.
The best way to try it out on-line is to start with 
<A href="file:///J:/技巧_CHM/J2EE/hall/JspPrimes.html">
the HTML page that acts as a front end to it</A>.
<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Reusing JavaBeans in JSP&lt;/TITLE&gt;
&lt;LINK REL=STYLESHEET
      HREF="My-Style-Sheet.css"
      TYPE="text/css"&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;

&lt;CENTER&gt;
&lt;TABLE BORDER=5&gt;
  &lt;TR&gt;&lt;TH CLASS="TITLE"&gt;
      Reusing JavaBeans in JSP&lt;/TABLE&gt;
&lt;/CENTER&gt;
&lt;P&gt;

&lt;jsp:useBean id="primeTable" class="hall.NumberedPrimes" /&gt;
<B>&lt;jsp:setProperty name="primeTable" property="numDigits" /&gt;
&lt;jsp:setProperty name="primeTable" property="numPrimes" /&gt;</B>

Some &lt;jsp:getProperty name="primeTable" property="numDigits" /&gt; 
digit primes: 
&lt;jsp:getProperty name="primeTable" property="numberedList" /&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
Here's a typical result: 
<CENTER>
<IMG src="JspPrimes-IE.gif" width="702" height="505" alt="JspPrimes Output">
</CENTER>

<H3><A NAME="Section8.5">8.5 The <CODE>jsp:getProperty</CODE> Action</A></H3>
This element retrieves the value of a bean property, converts it to a string,
and inserts it into the output. The two required attributes
are name, the name of a bean previously referenced via 
jsp:useBean, and property, the property whose value should be inserted.
Here's an example; for more examples, see Sections
<A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.2">8.2</A> and <A HREF="file:///J:/技巧_CHM/J2EE/%23Section8.4">8.4</A>.
<PRE>
&lt;jsp:useBean id="itemBean" ... /&gt;
...
&lt;UL&gt;
  &lt;LI&gt;Number of items: 
      <B>&lt;jsp:getProperty name="itemBean" property="numItems" /&gt;</B>
  &lt;LI&gt;Cost of each:
      <B>&lt;jsp:getProperty name="itemBean" property="unitCost" /&gt;</B>
&lt;/UL&gt;
</PRE>

<H3><A NAME="Section8.6">8.6 The <CODE>jsp:forward</CODE> Action</A></H3>
This action lets you forward the request to another page. It has a single
attribute, <CODE>page</CODE>, which should consist of a relative URL. This could
be a static value, or could be computed at request time, as in the two
examples below.
<PRE>
&lt;jsp:forward page="/utils/errorReporter.jsp" /&gt;
&lt;jsp:forward page="&lt;%= someJavaExpression %&gt;" /&gt;
</PRE>

<H3><A NAME="Section8.7">8.7 The <CODE>jsp:plugin</CODE> Action</A></H3>
This action lets you insert the browser-specific <CODE>OBJECT</CODE> or 
<CODE>EMBED</CODE> element needed to specify that the browser run an applet
using the Java plugin.

<H2><A NAME="Section9">9. Comments and Character Quoting Conventions</A></H2>
There are a small number of special constructs you can use
in various cases to insert comments or characters that would
otherwise be treated specially. Here's a summary:

<TABLE BORDER=1>
<TR CLASS="COLORED">
  <TH>Syntax
  <TH>Purpose
<TR>
  <TD><PRE>&lt;%-- comment --%&gt;</PRE>
  <TD>A JSP comment. Ignored by JSP-to-scriptlet translator.
      Any embedded JSP scripting elements, directives,
      or actions are ignored.
<TR>
  <TD><PRE>&lt;!-- comment --&gt;</PRE>
  <TD>An HTML comment. Passed through to resultant HTML.
      Any embedded JSP scripting elements, directives,
      or actions are executed normally.
<TR>
  <TD><PRE>&lt;\%</PRE>
  <TD>Used in template text (static HTML) where you really want 
      "<CODE>&lt;%</CODE>".
<TR>
  <TD><PRE>%\&gt;</PRE>
  <TD>Used in scripting elements where you really want 
      "<CODE>%&gt;</CODE>".
<TR>
  <TD><PRE>\'</PRE>
  <TD>A single quote in an attribute that uses single quotes. Remember, 
      however, that you can use either single or double quotes, and the
      other type of quote will then be a regular character.
<TR>
  <TD><PRE>\"</PRE>
  <TD>A double quote in an attribute that uses double quotes. Remember, 
      however, that you can use either single or double quotes, and the
      other type of quote will then be a regular character.
<TR>
  <TD><PRE>%\&gt;</PRE>
  <TD><CODE>%&gt;</CODE> in an attribute.
<TR>
  <TD><PRE>&lt;\%</PRE>
  <TD><CODE>&lt;%</CODE> in an attribute.
</TABLE>

<P>
<HR>
This page is part of my
<A HREF="http://www.apl.jhu.edu/~hall/java/Servlet-Tutorial/" TARGET="_top">
Tutorial on Servlets and JSP</A>. &copy; 1999 
<A HREF="http://www.apl.jhu.edu/~hall/" TARGET="_top">Marty Hall</A>. All
source code freely available for unrestricted use. Created for for
work in the <A HREF="http://www.jhuapl.edu/rc/" TARGET="_top">Research
and Technology Development Center</A> of the 
<A HREF="http://www.jhuapl.edu/" TARGET="_top">Johns Hopkins University
Applied Physics Lab</A>, for courses in the Johns Hopkins
<A HREF="http://www.jhu.edu/~wse1/partime/" TARGET="_top">Part-Time MS
Program in Computer Science</A>, and for various industry seminars and
<A HREF="http://www.apl.jhu.edu/~hall/java/Short-Courses.html"
TARGET="_top">on-site Java short courses</A>.

</BODY>
</HTML>
