<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html>
<HEAD id=Head>
<title>db4o 之旅: db4o 查询方式“db4o 之旅（二）”</title>
<LINK 
id=MainCss href="style.css" 
type=text/css rel=stylesheet>
<LINK id=SecondaryCss 
href="customcss.aspx" type=text/css 
rel=stylesheet>
<LINK id=RSSLink title=RSS 
href="rss.aspx" type=application/rss+xml 
rel=alternate>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</HEAD>

<BODY><!--StartFragment-->
<FORM id=Form1 name=Form1 action=82529.html method="post" 
_initialAction="82529.html">
  <DIV>
    <INPUT id=__EVENTTARGET type=hidden name=__EVENTTARGET>
    <INPUT 
id=__EVENTARGUMENT type=hidden name=__EVENTARGUMENT>
    <INPUT 
id="&#13;&#10;__VIEWSTATE" type=hidden name=__VIEWSTATE>
  </DIV>
  <DIV id=top>
    <DIV>
      <TABLE>
        <TBODY>
          <TR>
            <TD class=HeaderTitles><H1 class=HeaderTitle><A class=HeaderMainTitle id=Header1_HeaderTitle 
href="http://www.blogjava.net/rosen/"><B>成都心情</B></A></H1>
              <P id=tagline>骄傲、贪婪、迷色、忿怒、嫉妒、贪饕、懒惰——七宗罪<BR>
                本 Blog 是从：http://blog.csdn.net/rosen 
                搬来。</P></TD>
          </TR>
        </TBODY>
      </TABLE>
    </DIV>
    <DIV class=HeaderBar>
      <TABLE class=HeaderBar id=HeaderBar cellSpacing=0 cellPadding=0>
        <TBODY>
          <TR>
            <TD class=HeaderBarTab noWrap>&nbsp; <A id=Header1_MyLinks1_HomeLink 
href="">BlogJava</A>&nbsp;:: <A 
id=Header1_MyLinks1_MyHomeLink href="http://www.blogjava.net/rosen/">首页</A>&nbsp;:: 
              &nbsp;:: &nbsp;:: <A id=Header1_MyLinks1_Syndication 
href="http://www.blogjava.net/rosen/rss">聚合</A> <A class=XMLLink 
id=Header1_MyLinks1_XMLLink href="http://www.blogjava.net/rosen/rss"><IMG 
style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px" 
src="xml.gif"></A>&nbsp;:: <A 
id=Header1_MyLinks1_Admin 
href="http://www.blogjava.net/rosen/admin/EditPosts.aspx">管理</A>&nbsp;:: </TD>
            <TD><IMG id=Header1_BlueTab 
style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px" 
src="BlueTabRight.gif" 
align=absMiddle></TD>
            <TD class=HeaderBarTabBack noWrap width="100%"><DIV class=BlogStatsBar>
                <TABLE class=BlogStatsBar>
                  <TBODY>
                    <TR>
                      <TD width="100%"></TD>
                      <TD class=BlogStatsBar noWrap>&nbsp; 61 随笔&nbsp;:: 2 文章 :: 137 评论 :: 1 Trackbacks </TD>
                    </TR>
                  </TBODY>
                </TABLE>
              </DIV></TD>
          </TR>
        </TBODY>
      </TABLE>
    </DIV>
  </DIV>
  <DIV id=leftmenu style="DISPLAY: inline">
    <H3>公告</H3>
    <DIV class=News><A 
href="http://www.db4o.com/community/professionals/dVP/directory2007.aspx" 
target=_blank><IMG title="db4o Most Valued Professional" 
border=0 
src="dVP-Badge-2007.gif"></IMG> </A><BR>
      <BR>
      <IFRAME id=ifm2 align=center marginWidth=0 
marginHeight=0 src="ss166.htm" frameBorder=0 width=174 
scrolling=no height=190></IFRAME>
      <BR>
      <BR>
      <A href="http://www.51.la/?298319" target=_blank><IMG 
style="BORDER-TOP: medium none; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none" 
alt="51.la 专业、免费、强健的访问统计" src="icon_11.gif"></A> 
 
      <IMG style="HEIGHT: 0px; WIDTH: 0px" 
src="82529.html">
      <NOSCRIPT>
      </NOSCRIPT>
    </DIV>
    <H3>常用链接</H3>
    <UL>
      <LI><A id=SingleColumn1_ctl00_repeaterLinks_ctl01_lnkLinkItem 
href="http://www.blogjava.net/rosen/MyPosts.html">我的随笔</A>
      <LI><A id=SingleColumn1_ctl00_repeaterLinks_ctl02_lnkLinkItem 
href="http://www.blogjava.net/rosen/MyComments.html">我的评论</A>
      <LI><A id=SingleColumn1_ctl00_repeaterLinks_ctl03_lnkLinkItem 
href="http://www.blogjava.net/rosen/OtherPosts.html">我参与的随笔</A> </LI>
    </UL>
    <H3>随笔分类<SPAN style="FONT-SIZE: 11px; FONT-WEIGHT: normal">(62)</SPAN></H3>
    <UL>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl01_Link 
href="13739.html">db4o 中文项目(6)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl01_RssLink 
title="Subscribe to db4o 中文项目(6)" 
href="http://www.blogjava.net/rosen/category/13739.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl02_Link 
href="2689.html">Java EE 服务器端(13)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl02_RssLink 
title="Subscribe to Java EE 服务器端(13)" 
href="http://www.blogjava.net/rosen/category/2689.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl03_Link 
href="2686.html">Java EE 表现层及容器(6)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl03_RssLink 
title="Subscribe to Java EE 表现层及容器(6)" 
href="http://www.blogjava.net/rosen/category/2686.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl04_Link 
href="2690.html">Java 基础(5)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl04_RssLink 
title="Subscribe to Java 基础(5)" 
href="http://www.blogjava.net/rosen/category/2690.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl05_Link 
href="7219.html">MatLab(1)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl05_RssLink 
title="Subscribe to MatLab(1)" 
href="http://www.blogjava.net/rosen/category/7219.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl06_Link 
href="2688.html">O/R Mapping(13)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl06_RssLink 
title="Subscribe to O/R Mapping(13)" 
href="http://www.blogjava.net/rosen/category/2688.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl07_Link 
href="2685.html">五花八门(2)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl07_RssLink 
title="Subscribe to 五花八门(2)" 
href="http://www.blogjava.net/rosen/category/2685.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl08_Link 
href="2684.html">工作流(10)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl08_RssLink 
title="Subscribe to 工作流(10)" 
href="http://www.blogjava.net/rosen/category/2684.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl09_Link 
href="2682.html">数据库(2)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl09_RssLink 
title="Subscribe to 数据库(2)" 
href="http://www.blogjava.net/rosen/category/2682.html/rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl10_Link 
href="2683.html">模式与策略(4)</A> <A 
id=SingleColumn1_Categories_CatList_ctl00_LinkList_ctl10_RssLink 
title="Subscribe to 模式与策略(4)" 
href="http://www.blogjava.net/rosen/category/2683.html/rss">(rss)</A> </LI>
    </UL>
    <H3>随笔档案<SPAN style="FONT-SIZE: 11px; FONT-WEIGHT: normal">(61)</SPAN></H3>
    <UL>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl01_Link 
href="02.html">2007年2月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl02_Link 
href="01.html">2007年1月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl03_Link 
href="12.html">2006年12月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl04_Link 
href="11.html">2006年11月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl05_Link 
href="10.html">2006年10月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl06_Link 
href="09.html">2006年9月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl07_Link 
href="08.html">2006年8月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl08_Link 
href="07.html">2006年7月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl09_Link 
href="06.html">2006年6月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl10_Link 
href="05.html">2006年5月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl11_Link 
href="04.html">2006年4月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl12_Link 
href="03.html">2006年3月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl13_Link 
href="02.html">2006年2月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl14_Link 
href="01.html">2006年1月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl15_Link 
href="12.html">2005年12月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl16_Link 
href="11.html">2005年11月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl17_Link 
href="10.html">2005年10月 (1)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl18_Link 
href="09.html">2005年9月 (2)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl01_LinkList_ctl19_Link 
href="08.html">2005年8月 (42)</A> </LI>
    </UL>
    <H3>文章分类<SPAN style="FONT-SIZE: 11px; FONT-WEIGHT: normal">(2)</SPAN></H3>
    <UL>
      <LI><A id=SingleColumn1_Categories_CatList_ctl02_LinkList_ctl01_Link 
href="3474.html">我的收藏(2)</A> <A 
id=SingleColumn1_Categories_CatList_ctl02_LinkList_ctl01_RssLink 
title="Subscribe to 我的收藏(2)" 
href="http://www.blogjava.net/rosen/category/3474.html/rss">(rss)</A> </LI>
    </UL>
    <H3>友情链接</H3>
    <UL>
      <LI><A id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl01_Link 
href="" target=_blank>david.turing</A> <A 
id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl01_RssLink 
title="Subscribe to david.turing" 
href="http://www.blogjava.net/openssl/Rss.aspx">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl02_Link 
href="wyingquan" target=_blank>wyingquan的专栏</A> <A 
id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl02_RssLink 
title="Subscribe to wyingquan的专栏" 
href="http://blog.csdn.net/wyingquan/Rss.aspx">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl03_Link 
href="" target=_blank>喜马拉雅的雪杉</A> <A 
id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl03_RssLink 
title="Subscribe to 喜马拉雅的雪杉" 
href="http://spaces.msn.com/members/Deodar/feed.rss">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl04_Link 
href="mmwy" target=_blank>无聊人士</A> <A 
id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl04_RssLink 
title="Subscribe to 无聊人士" href="http://www.blogjava.net/mmwy/Rss.aspx">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl05_Link 
href="" target=_blank>竹十一</A> <A 
id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl05_RssLink 
title="Subscribe to 竹十一" href="http://juleven.blogspot.com/rss.xml">(rss)</A>
      <LI><A id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl06_Link 
href="blog.asp_name=hongrui" 
target=_blank>邢红瑞的blog</A> <A 
id=SingleColumn1_Categories_CatList_ctl03_LinkList_ctl06_RssLink 
title="Subscribe to 邢红瑞的blog" 
href="http://blogger.org.cn/blog/rss2.asp?name=hongrui">(rss)</A> </LI>
    </UL>
    <H3>积分与排名</H3>
    <UL>
      <LI>积分 - 68829
      <LI>排名 - 36 </LI>
    </UL>
    <H3>最新评论 <A id=SingleColumn1__1d1c97b_RSSHyperlink1 
href="http://www.blogjava.net/rosen/CommentsRSS.aspx"><IMG 
style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px" 
src="xml.gif"></A></H3>
    <DIV class=RecentComment>
      <UL>
        <LI style="WORD-BREAK: break-all"><A 
id=SingleColumn1__1d1c97b_CommentList_ctl01_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2007/03/19/101226.html#104739">1.&nbsp;re: 
          Spring 数据访问对象(Data Access Object,DAO)框架入门（翻译）</A>
        <LI style="WORD-BREAK: break-all">用来入门还不错，赞。
        <LI style="TEXT-ALIGN: right; MARGIN-RIGHT: 4px">--checker
        <LI style="WORD-BREAK: break-all"><A 
id=SingleColumn1__1d1c97b_CommentList_ctl02_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2007/03/05/91052.html#101919">2.&nbsp;re: 
          开源面向对象数据库 db4o 之旅: 深入 db4o “db4o 之旅（三）”</A>
        <LI style="WORD-BREAK: break-all">评论内容较长,点击标题查看
        <LI style="TEXT-ALIGN: right; MARGIN-RIGHT: 4px">--Rosen
        <LI style="WORD-BREAK: break-all"><A 
id=SingleColumn1__1d1c97b_CommentList_ctl03_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2007/03/05/91052.html#101905">3.&nbsp;re: 
          开源面向对象数据库 db4o 之旅: 深入 db4o “db4o 之旅（三）”</A>
        <LI style="WORD-BREAK: break-all">评论内容较长,点击标题查看
        <LI style="TEXT-ALIGN: right; MARGIN-RIGHT: 4px">--Sha Jiang
        <LI style="WORD-BREAK: break-all"><A 
id=SingleColumn1__1d1c97b_CommentList_ctl04_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2007/02/27/91052.html#100988">4.&nbsp;re: 
          开源面向对象数据库 db4o 之旅: 深入 db4o “db4o 之旅（三）”</A>
        <LI style="WORD-BREAK: break-all">@lqixv<BR>
          这个倒是完全可以的。
        <LI style="TEXT-ALIGN: right; MARGIN-RIGHT: 4px">--Rosen
        <LI style="WORD-BREAK: break-all"><A 
id=SingleColumn1__1d1c97b_CommentList_ctl05_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2007/02/27/91052.html#100909">5.&nbsp;re: 
          开源面向对象数据库 db4o 之旅: 深入 db4o “db4o 之旅（三）”</A>
        <LI style="WORD-BREAK: break-all">想知道，现在的 db4o 能不能代替 access 进行 web 开发？
        <LI style="TEXT-ALIGN: right; MARGIN-RIGHT: 4px">--lqixv </LI>
      </UL>
    </DIV>
    <H3>阅读排行榜</H3>
    <DIV class=RecentComment>
      <UL style="WORD-BREAK: break-all">
        <LI><A id=SingleColumn1__11112fa_TopList_ctl01_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/08/12/9937.aspx">1.&nbsp;Hibernate、iBATIS 
          与 BLOB(4507)</A>
        <LI><A id=SingleColumn1__11112fa_TopList_ctl02_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/08/12/9880.aspx">2.&nbsp;OSWorkflow 
          探索(4456)</A>
        <LI><A id=SingleColumn1__11112fa_TopList_ctl03_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/09/11/12668.aspx">3.&nbsp;Drools 
          为你的业务逻辑提供框架（翻译）(3541)</A>
        <LI><A id=SingleColumn1__11112fa_TopList_ctl04_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2006/04/30/44209.aspx">4.&nbsp;工作流理论总结(3171)</A>
        <LI><A id=SingleColumn1__11112fa_TopList_ctl05_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/09/19/13317.aspx">5.&nbsp;Hibernate 
          3 Formulas（翻译）(2878)</A> </LI>
      </UL>
    </DIV>
    <H3>评论排行榜</H3>
    <DIV class=RecentComment>
      <UL style="WORD-BREAK: break-all">
        <LI><A id=SingleColumn1__23c9891_TopList_ctl01_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/08/12/9880.aspx">1.&nbsp;OSWorkflow 
          探索(21)</A>
        <LI><A id=SingleColumn1__23c9891_TopList_ctl02_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2006/06/15/53094.aspx">2.&nbsp;开源面向对象数据库 
          db4o 之旅: 初识 db4o“db4o 之旅（一）”(21)</A>
        <LI><A id=SingleColumn1__23c9891_TopList_ctl03_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/08/12/9949.aspx">3.&nbsp;精确截取字符串（转载）(11)</A>
        <LI><A id=SingleColumn1__23c9891_TopList_ctl04_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/09/11/12668.aspx">4.&nbsp;Drools 
          为你的业务逻辑提供框架（翻译）(8)</A>
        <LI><A id=SingleColumn1__23c9891_TopList_ctl05_Hyperlink1 
href="http://www.blogjava.net/rosen/archive/2005/12/17/24348.aspx">5.&nbsp;BIRT 
          总览（翻译）(6)</A> </LI>
      </UL>
    </DIV><!--
	<br><br>
	<p align="center">
	<a href="http://www.webhost4life.com/default.asp?refid=MarkHWagner">
	<img src="banner3.gif" width="120"
	height="60" border="0" alt="Join WebHost4Life.com"></a>
	</p>
--></DIV>
  <DIV id=main>
    <DIV class=post>
      <DIV class=postTitle><A id=viewpost1_TitleUrl 
href="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html">开源面向对象数据库 
        db4o 之旅: db4o 查询方式“db4o 之旅（二）” </A></DIV>
      <DIV class=postText>
        <P><A name=N1007D><SPAN class=atitle><FONT size=5><STRONG><FONT size=4>前言</FONT> </STRONG></FONT></SPAN></A></P>
        <P>在 <I>开源面向对象数据库 db4o 之旅</I> 系列文章的第一部分：<A 
href="http://www-128.ibm.com/developerworks/cn/java/j-lo-db4o1/"><FONT color=#996699>初识 db4o</FONT></A> 中，作者介绍了 db4o 的历史和现状，应用领域，以及和 ORM 
          等的比较。在这篇文章中，作者将会介绍 db4o 的安装、启动以及三种不同的查询方式：QBE（Query by Example）、SODA（Simple 
          Object Database Access） 以及 NQ（Native 
          Queries），并分别通过这三种不同的途径实现了两个关联对象的查询。本文还示范了开发中最经常用到的几个典型功能的 db4o 实现。</P>
        <BR>
        <P><A name=N1008E><SPAN class=atitle><FONT color=#000000 size=5><STRONG><FONT size=4>下载和安装 db4o</FONT> </STRONG></FONT></SPAN></A></P>
        <P>db4o 所有最新的版本都可以直接在官方网站上下载，进入 db4o 的<A href="http://www.db4o.com/community" 
target=_blank><FONT color=#996699>下载页面</FONT></A>，我们可以看到最新的 for Java 稳定版本是 
          5.5，包括 JAR、源代码、入门文档、API 等内容的完整的打包文件只有 6 MB，db4o 还有一个对象数据库管理工具 
          ObjectManager，目前版本是 1.8（请在参考资源中<A 
href="http://www-128.ibm.com/developerworks/cn/java/j-lo-db4o2/index.html#resources"><FONT color=#996699>下载</FONT></A>）。</P>
        <P>接着在 Eclipse 中新建 Java 项目，把 db4o 对象数据库引擎包 db4o-5.5-java5.jar 导入进项目。由于 db4o 
          支持多种版本的 JDK，除了 for JDK 5.0 的 db4o-5.5-java5.jar 外，还有 for JDK 1.1、1.2-1.4 的 JAR 
          包，以适应多种环境。与 Hibernate、iBATIS SQL Maps 相比，db4o 更加自然，无需过多地引用第三方支持库。</P>
        <BR>
        <P><A name=N100A4><SPAN class=atitle><FONT size=5><STRONG><FONT size=4>开启数据库</FONT> </STRONG></FONT></SPAN></A></P>
        <P>db4o 怎样进行对象持久化呢？通过浏览目录可以发现，与传统的 RDBMS 一样，db4o 也有自己的数据库文件, 在 db4o 
          中数据库文件的后缀名是“*.yap”。让我们先来了解一下 db4o 对象数据库引擎的主要包结构：</P>
        <UL>
          <LI><B>com.db4o</B> <BR>
            com.db4o 包含了使用 db4o 时最经常用到的功能。两个最重要的接口是 com.db4o.Db4o 和 
            com.db4o.ObjectContainer。com.db4o.Db4o 工厂是运行 db4o 
            的起点，这个类中的静态方法可以开启数据库文件、启动服务器或连接一个已经存在的服务器，还可以在开启数据库之前进行 db4o 
            环境配置。com.db4o.ObjectContainer 接口很重要，开发过程中 99% 的时间都会用到它，ObjectContainer 
            可在单用户模式下作为数据库实例，也可作为 db4o 服务器的客户端。每个 ObjectContainer 实例都有自己的事务。所有的操作都有事务保证。当打开 
            ObjectContainer，就已经进入事务了，commit() 或 rollback() 时，下一个事务立即启动。每个 ObjectContainer 
            实例维护它自己所管理的已存储和已实例化对象，在需要 ObjectContainer 的时候，它会一直保持开启状态，一旦关闭，内存中数据库所引用的对象将被丢弃。
          <LI><B>com.db4o.ext</B> <BR>
            你也许想知道为什么在 ObjectContainer 中只能看见很少的方法，原因如下：db4o 
            接口提供了两个途径，分别在 com.db4o 和 com.db4o.ext 包中。这样做首先是为了让开发者能快速上手；其次为了让其他产品能更容易的复制基本的 
            db4o 接口；开发者从这一点上也能看出 db4o 是相当轻量级的。每个 com.db4o.ObjectContainer 对象也是 
            com.db4o.ext.ExtObjectContainer 对象。可以转换成 ExtObjectContainer 获得更多高级特性。
          <LI><B>com.db4o.config</B> <BR>
            com.db4o.config 包含了所有配置 db4o 所需的类。
          <LI><B>com.db4o.query</B> <BR>
            com.db4o.query 包包含了构造“原生查询, NQ（Native Queries）”所需的 
            Predicate 类。NQ 是 db4o 最主要的查询接口。 </LI>
        </UL>
        <P>db4o 提供两种运行模式，分别是本地模式和服务器模式。本地模式是指直接在程序里打开 db4o 数据库文件进行操作：</P>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>ObjectContainer db = Db4o.openFile("auto.yap");
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>而服务器模式则是客户端通过 IP 地址、端口以及授权口令来访问服务器：</P>
        服务器端：
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>ObjectServer server=Db4o.openServer("auto.yap",1212);
server.grantAccess("admin","123456");
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        客户端：
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>ObjectContainer db=Db4o.openClient("192.168.0.10",1212,"admin","123456");
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>两种方式都可以得到 ObjectContainer 实例，就目前 Java EE 
          应用环境来看，服务器模式更有现实意义；而本地模式更适合于嵌入式应用。为了简化演示，本文在下面的例子都将采用本地模式。</P>
        <P>在下面的例子里，我们都会用到下面两个对象： People 和 AutoInfo 对象。</P>
        <P>People 对象：</P>
        <BR>
        <A name=code1><B>清单1. People 对象</B></A><BR>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>				
package bo;

public class People {

	private java.lang.Integer _id;
	private java.lang.String _name;
	private java.lang.String _address;
	private java.util.List&lt;AutoInfo&gt; _autoInfoList;

	public java.lang.Integer getId() {
		return _id;
	}

	public void setId(java.lang.Integer _id) {
		this._id = _id;
	}

	public java.lang.String getName() {
		return _name;
	}

	public void setName(java.lang.String _name) {
		this._name = _name;
	}

	public java.lang.String getAddress() {
		return _address;
	}

	public void setAddress(java.lang.String _address) {
		this._address = _address;
	}

	public java.util.List&lt;AutoInfo&gt; getAutoInfoList() {
		return this._autoInfoList;
	}

	public void addAutoInfo(AutoInfo _autoInfoList) {
		if (null == this._autoInfoList)
			this._autoInfoList = new java.util.ArrayList&lt;AutoInfo&gt;();
		this._autoInfoList.add(_autoInfoList);
	}

}
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>AutoInfo 对象：</P>
        <BR>
        <A name=code2><B>清单2. AutoInfo 对象</B></A><BR>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>				
package bo;

public class AutoInfo{

	private java.lang.Integer _id;
	private java.lang.String _licensePlate;
	private bo.People _ownerNo;

	public java.lang.Integer getId () {
		return _id;
	}

	public void setId (java.lang.Integer _id) {
		this._id = _id;
	}

	public java.lang.String getLicensePlate () {
		return _licensePlate;
	}

	public void setLicensePlate (java.lang.String _licensePlate) {
		this._licensePlate = _licensePlate;
	}

	public bo.People getOwnerNo () {
		return this._ownerNo;
	}

	public void setOwnerNo (bo.People _ownerNo) {
		this._ownerNo = _ownerNo;
	}

}
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>利用 set 方法把新对象存入 ObjectContainer，而对 ObjectContainer 中已有对象进行 set 操作则是更新该对象。db4o 
          保存数据库很简单，下面就是一个段完整的保存对象的代码：</P>
        <P>AutoInfo 对象：</P>
        <BR>
        <A name=code3><B>清单3</B></A><BR>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>				
package com;

import bo.AutoInfo;
import bo.People;

import com.db4o.Db4o;
import com.db4o.ObjectContainer;

public class DB4OTest{
	
	public static void main(String[] args){
		//打开数据库
		ObjectContainer db = Db4o.openFile("auto.yap");
		try{
			//构造 People 对象
			People peo = new People(); 
			peo.setId(1);
			peo.setAddress("成都市");
			peo.setName("张三");
			//构造 AutoInfo 对象
			AutoInfo ai = new AutoInfo();
			ai.setId(1);
			ai.setLicensePlate("川A00000");
			//设置 People 和 AutoInfo 的关系
			ai.setOwnerNo(peo);
			peo.addAutoInfo(ai);
			//保存对象
			db.set(peo);
		}finally{
			//关闭连接
			db.close();
		}
	}
}
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>当我们运行上述代码，db4o 会自动创建“auto.yap”文件。让我们来看看到底保存成功没有，打开 ObjectManager 工具，<FONT color=#996699></FONT>图 1 所示。</P>
        <BR>
        <A name=fig1><B>图1. 
        对象数据库管理工具</B></A><BR>
        <IMG alt="图1. 对象数据库管理工具" 
src="1.jpg"><BR>
        <P>“File”－&gt;“Open File”－&gt;选择刚才我们保存的“auto.yap”文件（“auto.yap”文件可在项目的根目录下找到），最新的 
          ObjectManager 1.8 版本为我们提供了“Read Only”方式读取数据库文件，避免 ObjectManager 
          占用数据库文件所导致的程序异常。</P>
        <P>打开之后，图 2 所示，刚才存贮的 People 对象已经在数据库中了，并且还可以很直观的看到 AutoInfo 对象也放入了 ArrayList 
          中。这种可视化的对象关系有利于我们对数据的理解，是传统 RDBMS 无法比拟的。有些开发者会说 ObjectManager 工具略显简单，这点我想随着 db4o 
          的不断发展会加入更多的特性。在这个工具中，我们意外的发现了 Java 集合对象的踪影，db4o 把与 ArrayList 
          有直接关系的所有接口和父类都保存了，这样显得更直观。</P>
        <P>在此，我保留了 _id 属性，这是因为通常在 Java EE 环境中，DAO 
          第一次不是把整个对象都返回到表现层，而是只返回了“标题”、“发布时间”这些信息（并隐式的返回id），接着 DAO 
          与数据库断开；要查看详情（比如文章内容）就需要进行 findById 操作，这时 DAO 
          要再次与数据库交互，只有唯一标识符才能正确地找到对象。这种<I>懒加载</I>方式也是很多书籍所推荐的。</P>
        <P>回到本文的范例程序中，这个 _id 属性可由人工编码实现的“序列”进行赋值，当然 db4o 也提供了内部标识符 Internal IDs，图 2 中的 
          id=1669；以及 UUIDs。</P>
        <BR>
        <A name=fig2><B>图2. 对象结构</B></A><BR>
        <IMG alt="图2. 对象结构" 
src="2.jpg">&nbsp;<BR>
        <BR>
        <BR>
        <P><A name=N10157><SPAN class=atitle><STRONG><FONT size=4>查询数据库</FONT></STRONG></SPAN></A></P>
        <P>和 RDBMS 一样，db4o 也有自己的查询语言，分别是 QBE（Query by Example）、NQ（Native 
          Queries）、SODA（Simple Object Database Access），db4o 更推荐使用 NQ 进行查询。NQ 
          方式提供了非常强大的查询功能，支持原生语言，也就意味着你可以使用 Java 来判断该对象是否符合条件，这是其他数据库查询语言无法比拟的。在某些情况下， db4o 
          核心会将 NQ 翻译成 SODA 以获得更高的性能。下面详细介绍一下这三种查询语言。</P>
        <BR>
        <P><A name=N10161><SPAN class=atitle><STRONG><FONT size=4>QBE（Query by 
          Example）</FONT></STRONG></SPAN></A></P>
        <P>QBE 规范可在<A 
href="http://www.cs.wisc.edu/~dbbook/openAccess/thirdEdition/qbe.pdf"><FONT color=#5c81a7>这里下载</FONT></A>。QBE 最初由 IBM 提出，同时业界也有许多和 QBE 兼容的接口，包括著名的 
          Paradox。有些系统，比如微软的 Access，它的基于表单的查询也是受到了部分 QBE 思想的启发。在 db4o 中，用户可借用 QBE 
          快速上手，可以很容易适应 db4o 存取数据的方式。</P>
        <P>当利用 QBE 为 db4o 提供模板（example）对象时，db4o 
          将返回所有和非默认值字段匹配的全部对象。内部是通过反射所有的字段和构造查询表达式（所有非默认值字段结合”AND”表达式）来实现。</P>
        <P>例如，利用 QBE 查找到车牌号为“川A00000”的车主姓名，这是一个级联查询。</P>
        <BR>
        <A 
name=code4><B>清单4</B></A><BR>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>				
package com;

import java.util.List;

import bo.AutoInfo;

import com.db4o.Db4o;
import com.db4o.ObjectContainer;

public class DB4OTest{
	
	public static void main(String[] args){
		//打开数据库
		ObjectContainer db = Db4o.openFile("auto.yap");
		try{
			//构造模板对象
			AutoInfo ai = new AutoInfo();
			ai.setLicensePlate("川A00000");
			//查询对象
			List&lt;AutoInfo&gt; list = db.get(ai);
	    	for(int x = 0; x &lt; list.size(); x++){
	    		System.out.println("车主姓名："+list.get(x).getOwnerNo().getName());
			}
		}finally{
			//关闭连接
			db.close();
		}
	}
}
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>但是 QBE 也有明显的限制：db4o 必须反射模板（example）对象的所有成员；无法执行更进一步的查询表达式（例如 AND、OR、NOT 
          等等）；不能约束 0（整型）、””（空字符串）或者 null（对象），因为这些都被认为是不受约束的。要绕过这些限制，db4o 提供了 NQ（Native 
          Queries）。</P>
        <BR>
        <P><A name=N10186><SPAN class=atitle><STRONG><FONT size=4>SODA（Simple Object 
          Database Access）</FONT></STRONG></SPAN></A></P>
        <P>SODA ，简单对象数据库访问，请查看<A href="http://sodaquery.sourceforge.net/"><FONT color=#5c81a7>官方站点</FONT></A>，其中一位主要维护者是 Carl Rosenberger，Carl 正是 db4o 
          首席架构师。</P>
        <P>SODA 就是一种与数据库通讯的对象 API。最终的目标是实现类型安全、对象复用、最小的字符串使用、与编程语言无关等特性。SODA 是 db4o 
          最底层的查询 API，目前 SODA 
          中使用字符串来定义字段，这样将不能实现类型安全也无法在编译时检查代码，而且写起来较麻烦，当然要达到设计目标这个阶段是必须的。大部分情况下 NQ（Native 
          Queries）是很好的查询接口，不过遇到动态生成查询的时候 SODA 就大有作为了。</P>
        <P>通过 SODA 查找到车牌号为“川A00000”的车主姓名：</P>
        <BR>
        <A name=code5><B>清单5</B></A><BR>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>				
package com;

import java.util.List;

import bo.AutoInfo;

import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.query.Query;

public class DB4OTest{
	
	public static void main(String[] args){
		//打开数据库
		ObjectContainer db = Db4o.openFile("auto.yap");
		try{
			//构造查询对象
			Query query=db.query();
			//设置被约束实例
			query.constrain(AutoInfo.class);
			//设置被约束实例的字段和约束条件
			query.descend("_licensePlate").constrain("川A00000");
			//查询对象
			List&lt;AutoInfo&gt; list = query.execute();
	    	for(int x = 0; x &lt; list.size(); x++){
	    		System.out.println("车主姓名："+list.get(x).getOwnerNo().getName());
			}
		}finally{
			//关闭连接
			db.close();
		}
	}
}
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>通过 API，发现 Query 实例增加了 sortBy 按字段排序方法和 orderAscending正序、orderDescending 
          倒序排列方法，SODA 比 QBE 更进了一步。</P>
        <BR>
        <P><A name=N101AB><SPAN class=atitle><STRONG><FONT size=4>NQ（Native 
          Queries）</FONT></STRONG></SPAN></A></P>
        <P>精彩总是在最后出场，NQ 才是 db4o 查询方式中最精彩的地方！有没有想过用你熟悉的的编程语言进行数据库查询呢？要是这样，你的查询代码将是 100% 
          的类型安全、100% 的编译时检查以及 100% 的可重构，很奇妙吧？NQ 可以做到这些。</P>
        <P>有两篇论文专门讲解了 NQ 的基本概念和设计思路，分别是 <A 
href="http://www.db4o.com/china/Native%20Queries%20Whitepaper(Chinese).pdf"><FONT color=#5c81a7>《Cook/Rosenberger，持久对象原生数据库查询语言》</FONT></A> 和 《Cook/Rai，Safe Query 
          Objects: Statically Typed Objects as Remotely Executable Queries》。作为结果集的一部分，NQ 
          表达式必须返回 true 值来标记特定实例。如果可能的话 db4o 将尝试优化 NQ 表达式，并依赖索引来运行表达式。</P>
        <P>通过 NQ 查找到车牌号为“川A00000”的车主姓名：</P>
        <BR>
        <A name=code6><B>清单6</B></A><BR>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>				
package com;

import java.util.List;

import bo.AutoInfo;

import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.query.Predicate;

public class DB4OTest{
	
	public static void main(String[] args){
		//打开数据库
		ObjectContainer db = Db4o.openFile("auto.yap");
		try{
			List &lt;AutoInfo&gt; list = db.query(new Predicate&lt;AutoInfo&gt;() {
				public boolean match(AutoInfo ai) {
			    	//这样才是类型安全的
			        return ai.getLicensePlate().equals("川A00000");
			    }
			});
	    	for(int x = 0; x &lt; list.size(); x++){
	    		System.out.println(list.get(x).getOwnerNo().getName());
			}
		}finally{
			//关闭连接
			db.close();
		}
	}
}
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>必须指出 NQ 的一个的问题是：在内部，db4o 设法把 NQ 转换成 
          SODA。但并不是所有的查询表达式都可以成功转换。有些查询表达式的流向图（flowgraph）非常难于分析。这种情况下，db4o 
          将不得不实例化一些持久对象来真实地运行 NQ 表达式。</P>
        <P>正在开发中的 NQ 查询优化器就可以化解这个障碍，它将分析 NQ 
          表达式的每个部分，以确保最少量的实例化对象，以此提高性能。当然，优化器的不是灵丹妙药，关键还需要自己多优化代码。</P>
        <P>开发 Java EE 项目经常会用到分页，怎样用 NQ 实现呢？向数据库写入六条记录：</P>
        <BR>
        <A 
name=code7><B>清单7</B></A><BR>
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD class=code-outline><PRE class=displaycode>				
package com;

import java.util.List;

import bo.AutoInfo;

import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.query.Predicate;

public class DB4OTest{
	
	public static void main(String[] args){
		//打开数据库
		ObjectContainer db = Db4o.openFile("auto.yap");
		try{
			List&lt;AutoInfo&gt; list = db.query(new Predicate&lt;AutoInfo&gt;() {
				public boolean match(AutoInfo ai) {
			        return true;
			    }
			});
			//记录总数
			Integer count = list.size();
			//每页两条，分三页
	    	for(int x = 0; x &lt; 3; x++){
	    		System.out.println("第"+x+"页："+list.get(x*2).getLicensePlate());
	    		System.out.println("第"+x+"页："+list.get(x*2+1).getLicensePlate());
			}
		}finally{
			//关闭连接
			db.close();
		}
	}
}
</PRE></TD>
            </TR>
          </TBODY>
        </TABLE>
        <BR>
        <P>我们发现，在进行 NQ 查询时并没有加入任何条件（无条件返回 true），是不是相当于遍历了整个数据库？db4o 的设计者早就想到了这个问题，当 
          db.query() 执行完毕返回 list 实例的时候，db4o 只是与数据库同步取出内部 IDs 而已，并没有把所有的 AutoInfo 
          对象全部取出，只有在 list.get(x*2).getLicensePlate() 之后才会去根据 IDs 取出记录。所以不必担心性能问题。</P>
        <BR>
        <P><A name=N101E7><SPAN class=atitle><STRONG><FONT size=4>结论</FONT></STRONG></SPAN></A></P>
        <P>db4o 为开发者提供了多种查询方式，这些方式都很灵活。要引起大家注意的是：灵活在带来便利的同时也对开发者自身素质提出了更高的要求，（比如排序，既可以用 
          SODA 也可以用 Java 集合对象实现）在开发过程中一定要形成某种统一的开发模式，这样 db4o 才能最高效能地为我所用。</P>
        <BR>
        <BR>
        <P><A name=resources><SPAN class=atitle><STRONG><FONT size=4>参考资料</FONT></STRONG></SPAN></A></P>
        <B>学习</B><BR>
        <UL>
          <LI><A href="http://www-128.ibm.com/developerworks/cn/java/j-lo-db4o1/"><FONT color=#996699>“面向对象数据库 db4o 之旅，第 1 部分：初识 db4o”</FONT></A>：（developerWorks Java 
            ，2006 年 10月）：介绍了 db4o 的历史和现状，应用领域，以及和 ORM 等的比较。<BR>
          <LI><A href="http://developer.db4o.com/forums/"><FONT color=#5c81a7>db4o 
            开发者论坛</FONT></A>：讨论 db4o 技术。<BR>
          <LI><A href="http://developer.db4o.com/forums/10/ShowForum.aspx"><FONT color=#5c81a7>db4o 中国开发者论坛</FONT></A>：讨论 db4o 技术的中文论坛。<BR>
          <LI><A href="http://www.odmg.org/"><FONT color=#5c81a7>ODMG 官方网站</FONT></A>：了解 
            ODMG 技术。<BR>
          <LI><A href="http://sodaquery.sourceforge.net/"><FONT color=#5c81a7>SODA 
            官方网站</FONT></A>：了解简单对象数据库访问技术。<BR>
          <LI><A href="http://www.ibm.com/developerworks/cn/java/"><FONT color=#5c81a7>Java 技术专区</FONT></A>：这里有数百篇有关 Java 编程各方面的文章。<BR>
          <LI><A 
href="http://www.ibm.com/developerworks/forums/dw_forum.jsp?forum=181&amp;cat=10"><FONT color=#5c81a7>developerWorks Java 论坛</FONT></A>：学习 Java 
            技术</LI>
        </UL>
        <BR>
        <B>获得产品和技术</B><BR>
        <UL>
          <LI><A href="http://www.db4o.com/"><FONT color=#996699>db4o 官方网站</FONT></A>：db4o 
            最新信息以及 db4o 下载。<BR>
          <LI><A 
href="http://developer.db4o.com/files/10/objectmanager_18/entry24827.aspx"><FONT color=#5c81a7>下载</FONT></A> db4o 对象数据库管理工具 ObjectManager 1.8 for 
            Windows。</LI>
        </UL>
        <P>作者简介</P>
        <P><BR>
          &nbsp; Rosen Jiang 来自成都，是 db4o 和 OO 的忠实 fans，是 2005 年 db4o 的 dvp 获得者之一。他正在 
          J2me 应用中使用 db4o，你可以通过 <A 
href="mailto:rosener_722@hotmail.com">rosener_722@hotmail.com</A> 和他联系。 </P>
        <P>&nbsp; Chris 来自香港，热爱开源和 db4o。他创办了中国最火热的 Java 和开源社区 Matrix（<A 
href="http://www.matrix.org.cn/">http://www.Matrix.org.cn</A>）， 你可以通过 <A 
href="mailto:chris@Matrix.org.cn">chris@Matrix.org.cn</A> 和他联系。<BR>
          &nbsp;<BR>
          &nbsp; 
          张黄瞩，热爱开源软件，熟悉 Java/C/C++ 编程语言，对数据库技术网络技术均感兴趣。你可以通过 <A 
href="mailto:zhanghuangzhu@gmail.com">zhanghuangzhu@gmail.com</A> 联系他。<BR>
          <BR>
          <STRONG><FONT face=Arial color=#ff0000>IBM DeveloperWorks(IBM DW) 
          版权所有！引用、转贴本文应注明本文来自 IBM DW。</FONT></STRONG></P>
      </DIV>
      <DIV class=postfoot>posted on 2006-11-21 14:21 <A 
href="http://www.blogjava.net/rosen/">Rosen</A> 阅读(1692) <A 
href="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html#Post">评论(1)</A> &nbsp;<A 
href="http://www.blogjava.net/rosen/admin/EditPosts.aspx?postid=82529">编辑</A>&nbsp;<A 
href="http://www.blogjava.net/rosen/AddToFavorite.aspx?id=82529">收藏</A> <A 
href="http://www.blogjava.net/rosen/services/trackbacks/82529.aspx">引用</A> 所属分类: <A href="http://www.blogjava.net/rosen/category/13739.html">db4o 中文项目</A> </DIV>
    </DIV>
    <IMG src="82529.html_webview=1" 
width=1 height=1> <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html"
dc:identifier="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html"
dc:title="开源面向对象数据库 db4o 之旅: db4o 查询方式“db4o 之旅（二）” "
trackback:ping="http://www.blogjava.net/rosen/services/trackbacks/82529.aspx" />
</rdf:RDF>
--> 
    <DIV id=AjaxHolder_UpdatePanel1><A name=pagedcomment></A><A name=评论><BR>
      <DIV id=comments>
        <H3>评论</H3>
        <DIV class=post>
          <DIV class=postTitle><A 
title="permalink: re: 开源面向对象数据库 db4o 之旅: db4o 查询方式“db4o 之旅（二）” " 
href="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html#82567">#</A>&nbsp;<A name=82567></A>re: 
            开源面向对象数据库 db4o 之旅: db4o 查询方式“db4o 之旅（二）” <A name=Post></A><SPAN>2006-11-21 16:39 </SPAN><A id=AjaxHolder_Comments_CommentList_ctl00_NameLink 
target=_blank>jeffjie</A> </DIV>
          <DIV 
class=postText>目前正在一个项目中使用Db4o。目的是代替XML来存储一些配置、个性化设置的信息。感觉挺不错。开发速度快，小数量数据的时候执行速度也较快速。以后做Demo可以考虑他。比较关注的是它到底能不能真正成为一个可行的对象数据库，即不仅是应用在所谓的嵌入式应用。而在大型、海量数据的场所也能发挥作用。&nbsp;&nbsp;<A 
onclick='return SetReplyAuhor("jeffjie")' 
href="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html#post">回复</A>&nbsp;&nbsp;<A title=查看该作者发表过的评论 
href="http://www.blogjava.net/comment?author=jeffjie" target=_blank>更多评论</A> <BR>
            <A id=AjaxHolder_Comments_CommentList_ctl00_DeleteLink 
href="javascript___doPostBack('AjaxHolder$Comments$CommentList$ctl00$DeleteLink','')"></A>&nbsp;&nbsp;<A 
id=AjaxHolder_Comments_CommentList_ctl00_EditLink></A> </DIV>
        </DIV>
        <BR>
      </DIV>
      <DIV id=AjaxHolder_Comments_divRefreshComments 
style="MARGIN-BOTTOM: 5px; FONT-SIZE: 12px; TEXT-ALIGN: right; MARGIN-RIGHT: 10px"><A 
id=AjaxHolder_Comments_refreshList 
href="javascript:__doPostBack('AjaxHolder$Comments$refreshList','')">刷新评论列表</A></DIV>
<STYLE>
td { font-size: 12px }
.commentTextBox 
{ 
    font-family : Verdana; 
    font-size: 13px;
 }
</STYLE>
<!--Beging Temp Save-->
<STYLE>
.userData { BEHAVIOR: url(#default#userdata) }
	</STYLE>
      <DIV class=userData id=CommentsPersistDiv></DIV><!--Ene TempSave-->
      <DIV class=commentform><SPAN id=AjaxHolder_PostComment_ltSubmitMsg 
style="COLOR: red"></SPAN><BR>
        <A name=Feedback></A>
        <TABLE cellSpacing=1 cellPadding=1 border=0>
          <TBODY>
            <TR>
              <TD width=75></TD>
              <TD></TD>
              <TD></TD>
            </TR>
            <TR>
              <TD width=55>标题</TD>
              <TD><INPUT class=commenttb id=AjaxHolder_PostComment_tbTitle 
style="WIDTH: 320px" value="re: 开源面向对象数据库 db4o 之旅: db4o 查询方式“db4o 之旅（二）” " 
name=AjaxHolder$PostComment$tbTitle></TD>
              <TD><SPAN id=AjaxHolder_PostComment_RequiredFieldValidator1 
style="COLOR: red; VISIBILITY: hidden" 
isvalid="true" controltovalidate="AjaxHolder_PostComment_tbTitle" 
errormessage ="请输入标题" 
      initialvalue>请输入标题</SPAN></TD>
            </TR>
            <TR>
              <TD>姓名</TD>
              <TD><INPUT class=commenttb id=AjaxHolder_PostComment_tbName style="WIDTH: 320px" 
name=AjaxHolder$PostComment$tbName></TD>
              <TD><SPAN id=AjaxHolder_PostComment_RequiredFieldValidator2 
style="COLOR: red; VISIBILITY: hidden" 
isvalid="true" controltovalidate="AjaxHolder_PostComment_tbName" 
errormessage ="请输入你的姓名" 
      initialvalue>请输入你的姓名</SPAN></TD>
            </TR>
            <TR>
              <TD>主页</TD>
              <TD><INPUT class=commenttb id=AjaxHolder_PostComment_tbUrl style="WIDTH: 320px" 
name=AjaxHolder$PostComment$tbUrl></TD>
              <TD><FONT face=宋体></FONT></TD>
            </TR>
            <TR>
              <TD align=left colSpan=3><TABLE class=CommentForm id=AjaxHolder_PostComment_tbCaptchaImage cellSpacing=0 
cellPadding=0 border=0>
                  <TBODY>
                    <TR>
                      <TD colSpan=3><SPAN id=AjaxHolder_PostComment_Requiredfieldvalidator4 
style="COLOR: red; DISPLAY: none" 
display="Dynamic" 
isvalid="true" controltovalidate ="AjaxHolder_PostComment_CodeNumberTextBox" 
errormessage="请输入验证码" initialvalue>请输入验证码</SPAN> <SPAN id=AjaxHolder_PostComment_lblImage 
style="FONT-WEIGHT: bold; COLOR: red"></SPAN></TD>
                    </TR>
                    <TR>
                      <TD width=78>验证码</TD>
                      <TD><INPUT id=AjaxHolder_PostComment_CodeNumberTextBox 
name=AjaxHolder$PostComment$CodeNumberTextBox>
                        *</TD>
                      <TD align=left><IMG id=AjaxHolder_PostComment_Img1 
src="JpegImage.aspx"></TD>
                    </TR>
                  </TBODY>
                </TABLE></TD>
            </TR>
            <TR>
              <TD colSpan=3>内容(提交失败后,可以通过“恢复上次提交”恢复刚刚提交的内容) <SPAN 
id=AjaxHolder_PostComment_RequiredFieldValidator3 
style="COLOR: red; VISIBILITY: hidden" 
isvalid="true" controltovalidate="AjaxHolder_PostComment_tbComment" 
errormessage ="请输入评论内容" initialvalue>请输入评论内容</SPAN><BR><TEXTAREA id=AjaxHolder_PostComment_tbComment class=commentTextBox onkeydown="ctlent(event,'AjaxHolder_PostComment_tbComment')" style="HEIGHT: 220px; WIDTH: 480px" rows=10 cols=50 name=AjaxHolder$PostComment$tbComment></TEXTAREA></TD>
            </TR>
            <TR>
              <TD colSpan=3><SPAN id=AjaxHolder_PostComment_Message 
style="COLOR: red"></SPAN></TD>
            <TR>
              <TD colSpan=3><INPUT id=AjaxHolder_PostComment_chkRemember tabIndex=-1 
type=checkbox CHECKED name=AjaxHolder$PostComment$chkRemember>
                <LABEL 
for=AjaxHolder_PostComment_chkRemember>Remember Me?</LABEL></TD>
            </TR>
            <TR>
              <TD height=23><INPUT id=AjaxHolder_PostComment_btnSubmit onclick="TempSave('AjaxHolder_PostComment_tbComment');WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(&quot;AjaxHolder$PostComment$btnSubmit&quot;, &quot;&quot;, true, &quot;&quot;, &quot;&quot;, false, false))" type=submit value=提交 name=AjaxHolder$PostComment$btnSubmit></TD>
              <TD colSpan=2 height=23>&nbsp; <A id=AjaxHolder_PostComment_lnkLogin 
href="http://www.blogjava.net/login.aspx?ReturnURL=http://www.blogjava.net/rosen/archive/2006/11/21/82529.html&amp;SourceURL=/rosen/archive/2006/11/21/82529.html">登录</A>&nbsp;&nbsp;<!--<a id="AjaxHolder_PostComment_linkLoginComment" OnClick="if(document.getElementById('AjaxHolder_PostComment_tbComment').value != '') return confirm('未提交的评论内容将会丢失, 你真的要进入高级评论吗?');" href="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html?login=1#Post">使用高级评论</a>&nbsp;&nbsp;--><A 
href="http://www.blogjava.net/RequireRegister.aspx">新用户注册</A>&nbsp;&nbsp;<A 
href="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html#Top">返回页首</A>&nbsp;&nbsp;<A id=AjaxHolder_PostComment_lbRestore 
onclick="Restore('AjaxHolder_PostComment_tbComment'); return false;" 
href="http://www.blogjava.net/rosen/archive/2006/11/21/82529.html#Post">恢复上次提交</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TD>
            </TR>
            <TR>
              <TD colSpan=3>[使用Ctrl+Enter键可以直接提交]</TD>
            </TR>
            <TR>
              <TD colSpan=3 height=1></TD>
            </TR>
            <TR>
              <TD colSpan=3><BR>
</TD>
            </TR>
            <TR>
              <TD colSpan=3></TD>
            </TR>
          </TBODY>
        </TABLE>
      </DIV>
      <DIV id=AjaxHolder_PostComment_ValidationSummary1 
style="COLOR: red; DISPLAY: none" showsummary="False" 
showmessagebox="True"></DIV>
    </DIV>
  </DIV>
  <P id=footer>Powered by: <BR>
    <A id=Footer1_Hyperlink3 
style="FONT-SIZE: 12px; FONT-FAMILY: Verdana" href="http://www.blogjava.net/" 
name=Hyperlink1>BlogJava</A> <BR>
    Copyright ? Rosen </P>
</FORM>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P><!--EndFragment--></P>
</BODY>
</html>
