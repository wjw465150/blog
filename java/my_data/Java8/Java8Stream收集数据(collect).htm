<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Java8Stream收集数据(collect)</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>收集器可以简洁而灵活地定义collect用来生成结果集合的标准。更具体地说，对流调用 
collect 方法将对流中的元素触发一个归约操作（由Collector来参数化）。一般来说，Collector 
会对元素应用一个转换函数（很多时候是不体现任何效果的恒等转换， 例如 toList 
），并将结果累积在一个数据结构中，从而产生这一过程的最终输出。下面就来学习那些可以从Collectors 
类提供的工厂方法（例如groupingBy）创建的收集器。</P>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>归约和汇总</H2>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>查找流中的最大值和最小值</H2>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>Collectors.maxBy 
和 Collectors.minBy 来计算流中的最大或最小值。</P><PRE class="prettyprint hljs ruby" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'>Optional&lt;Dish&gt; maxDish = Dish.menu.stream().
      collect(Collectors.maxBy(Comparator.comparing(Dish::getCalories)));
maxDish.ifPresent(System.out::println);

Optional&lt;Dish&gt; minDish = Dish.menu.stream().
      collect(Collectors.minBy(Comparator.comparing(Dish::getCalories)));
minDish.ifPresent(System.out::println);
</PRE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>汇总</H2>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>Collectors.summingInt 
汇总求和；</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>Collectors.averagingInt 
汇总求平均值；</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>Collectors.summarizingInt 
汇总所有信息包括数量、求和、平均值、最小值、最大值；</P><PRE class="prettyprint hljs gradle" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'><SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//求总热量</SPAN>
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">int</SPAN> totalColories = Dish.menu.stream().<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">collect</SPAN>(Collectors.summingInt(Dish::getCalories));
System.out.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">println</SPAN>(totalColories);

<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//求平均热量</SPAN>
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">double</SPAN> averageColories = Dish.menu.stream().<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">collect</SPAN>(Collectors.averagingInt(Dish::getCalories));
System.out.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">println</SPAN>(averageColories);

<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//汇总</SPAN>
IntSummaryStatistics menuStatistics = Dish.menu.stream().<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">collect</SPAN>(Collectors.summarizingInt(Dish::getCalories));
System.out.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">println</SPAN>(menuStatistics);
IntSummaryStatistics{<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">count</SPAN>=<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">9</SPAN>, sum=<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">4300</SPAN>, min=<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">120</SPAN>, average=<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">477.777778</SPAN>, max=<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">800</SPAN>}
</PRE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>连接字符串</H2>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>joining 
工厂方法返回的收集器会把对流中每一个对象应用toString方法得到的所有字符串连接成一个字符串。</P><PRE class="prettyprint hljs go" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'>String menu = Dish.menu.stream().<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">map</SPAN>(Dish::getName).collect(Collectors.joining(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">","</SPAN>));
System.out.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">println</SPAN>(menu);
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//pork,beef,chicken,french fries,rice,season fruit,pizza,prawns,salmon</SPAN>
</PRE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>Collectors.reducing</H2>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>Collectors.reducing 
工厂方法是上面所有工厂方法的一般情况，它完全可以实现上述方法的功能。它需要三个参数：</P>
<UL 
style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.75em 25px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>
  <LI 
  style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">第一个参数是归约操作的起始值，也是流中没有元素时的返回值，所以很显然对于数值和而言0是一个合适的值。</LI>
  <LI 
  style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">第二个参数是一个 
  Function，就是具体的取值函数。</LI>
  <LI 
  style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">第三个参数是一个 
  BinaryOperator，将两个项目累积成一个同类型的值。。</LI></UL><PRE class="prettyprint hljs livescript" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'>int totalCalories = Dish.menu.stream<SPAN class=hljs-function><SPAN class=hljs-params>()</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">collect</SPAN><SPAN class=hljs-params>(Collectors.reducing( <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>, Dish::getCalories, (i, j) -&gt; i + j))</SPAN>;
</SPAN></PRE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>分组</H2>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>用Collectors.groupingBy工厂方法返回的收集器可以实现分组任务，分组操作的结果是一个Map，把分组函数返回的值作为映射的键，把流中 
所有具有这个分类值的项目的列表作为对应的映射值。</P>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>多级分组</H2><PRE class="prettyprint hljs dart" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'><SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//Dish的Type为键，Dish类型所对应的dish集合为值</SPAN>
<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Map</SPAN>&lt;Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>, <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">List</SPAN>&lt;Dish&gt;&gt; dishesByType = Dish.menu.stream().collect(Collectors.groupingBy(Dish::getType));
System.out.println(dishesByType);
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//{FISH=[prawns, salmon], OTHER=[french fries, rice, season fruit, pizza], MEAT=[pork, beef, chicken]}</SPAN>

<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//一级分类为Dish的Type，二级分类为Dish的CaloricLevel</SPAN>
<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Map</SPAN>&lt;Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>, <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Map</SPAN>&lt;Dish.CaloricLevel, <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">List</SPAN>&lt;Dish&gt;&gt;&gt; dishes = Dish.menu.stream()
      .collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy(Dish::getLevel)));
System.out.println(dishes);
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//{FISH={NORMAL=[salmon], DIET=[prawns]}, OTHER={NORMAL=[french fries, pizza], DIET=[rice, season fruit]}, MEAT={NORMAL=[beef], FAT=[pork], DIET=[chicken]}}</SPAN>
</PRE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>按子集收集数据</H2><PRE class="prettyprint hljs gradle" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'><SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//Dish的Type为键，Dish类型所对应的dish集合的size为值</SPAN>
Map&lt;Dish.Type, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">Long</SPAN>&gt; dishTypeCount = Dish.menu.stream().<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">collect</SPAN>(Collectors.groupingBy(Dish::getType, Collectors.counting()));
System.out.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">println</SPAN>(dishTypeCount);
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//{FISH=2, OTHER=4, MEAT=3}</SPAN>
</PRE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>分区</H2>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>分区是分组的特殊情况：由一个谓词（返回一个布尔值的函数）作为分类函数，它称分区函数。分区函数返回一个布尔值，这意味着得到的分组 
Map 的键类型是 
Boolean，于是它最多可以分为两组——true是一组，false是一组。分区的好处在于保留了分区函数返回true或false的两套流元素列表。</P><PRE class="prettyprint hljs ruby" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'>Map&lt;Boolean, Map&lt;Dish.Type, List&lt;Dish<SPAN class=hljs-meta style="COLOR: rgb(31,113,153)">&gt;&gt;&gt; </SPAN>partitioningDish = Dish.menu.stream().collect(Collectors.partitioningBy(Dish::isVegetarian, Collectors.groupingBy(Dish::getType)));
System.out.println(partitioningDish);
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//false</SPAN>={FISH=[prawns, salmon], MEAT=[pork, beef, chicken]}, 
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//true</SPAN>={OTHER=[french fries, rice, season fruit, pizza]}
</PRE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>小结</H2>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>下表展示 
Collectors 类的静态工厂方法。</P>
<TABLE class="table table-bordered" 
style='BORDER-LEFT-WIDTH: 0px; MARGIN-BOTTOM: 1.5em; FONT-SIZE: 14px; MAX-WIDTH: 100%; BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 682px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: separate; BORDER-BOTTOM: rgb(221,221,221) 1px solid; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; BORDER-SPACING: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.3em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; border-image: initial; text-decoration-style: initial; text-decoration-color: initial'>
  <THEAD>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TH 
    style="BORDER-TOP: 0px; VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; border-top-left-radius: 4px" 
    width="19%">工厂方法</TH>
    <TH 
    style="BORDER-TOP: 0px; VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px" 
    width="22%">返回类型</TH>
    <TH 
    style="BORDER-TOP: 0px; VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; border-top-right-radius: 4px" 
    width="59%">作用</TH></TR></THEAD>
  
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">toList</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>List&lt;T&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">把流中所有项目收集到一个 
      List</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">toSet</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Set&lt;T&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">把流中所有项目收集到一个 
      Set，删除重复项</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">toCollection</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Collection&lt;T&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">把流中所有项目收集到给定的供应源创建的集合<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>menuStream.collect(toCollection(), 
      ArrayList::new)</CODE></TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">counting</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">Long</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">计算流中元素的个数</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">sumInt</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">Integer</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">对流中项目的一个整数属性求和</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">averagingInt</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">Double</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">计算流中项目 
      Integer 属性的平均值</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">summarizingInt</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">IntSummaryStatistics</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">收集关于流中项目 
      Integer 属性的统计值，例如最大、最小、 总和与平均值</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">joining</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">String</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">连接对流中每个项目调用 
      toString 方法所生成的字符串<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>collect(joining(", 
      "))</CODE></TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">maxBy</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Optional&lt;T&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">一个包裹了流中按照给定比较器选出的最大元素的 
      Optional， 或如果流为空则为 Optional.empty()</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">minBy</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Optional&lt;T&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">一个包裹了流中按照给定比较器选出的最小元素的 
      Optional， 或如果流为空则为 Optional.empty()</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">reducing</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">归约操作产生的类型</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">从一个作为累加器的初始值开始，利用 
      BinaryOperator 与流 中的元素逐个结合，从而将流归约为单个值<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>累加int 
      totalCalories = menuStream.collect(reducing(0, Dish::getCalories, 
      Integer::sum));</CODE></TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">collectingAndThen</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">转换函数返回的类型</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">包裹另一个收集器，对其结果应用转换函数<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>int 
      howManyDishes = menuStream.collect(collectingAndThen(toList(), 
      List::size))</CODE></TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">groupingBy</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Map&lt;K, 
      List&lt;T&gt;&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">根据项目的一个属性的值对流中的项目作问组，并将属性值作 
      为结果 Map 的键</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-left-radius: 4px">partitioningBy</TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Map&lt;Boolean,List&lt;T&gt;&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-right-radius: 4px">根据对流中每个项目应用谓词的结果来对项目进行分区</TD></TR></TABLE>
<H2 
style='FONT-SIZE: 18px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.6em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial; text-rendering: optimizeLegibility'>附录：Dish类</H2><PRE class="prettyprint hljs dart" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px; text-decoration-style: initial; text-decoration-color: initial'>package com.company.bean;

<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">import</SPAN> java.util.Arrays;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">import</SPAN> java.util.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">List</SPAN>;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">import</SPAN> java.util.stream.Collectors;

<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)"><SPAN class=markdown>/**
 * Created by liuguoquan on 2017/4/26.
 */</SPAN></SPAN>
public classDish{

    private <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">String</SPAN> name;
    private boolean vegetarian;
    private <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">int</SPAN> calories;
    private <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN> type;
    private CaloricLevel level;

    publicCaloricLevelgetLevel(){

        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (calories &lt;= <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">400</SPAN>) {

            <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> CaloricLevel.DIET;
        } <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">else</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (calories &lt;= <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">700</SPAN>) {

            <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> CaloricLevel.NORMAL;
        }
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> CaloricLevel.FAT;
    }

    publicvoidsetLevel(CaloricLevel level){
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.level = level;
    }

    public <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">enum</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN> { MEAT, FISH, OTHER }
    public <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">enum</SPAN> CaloricLevel { DIET, NORMAL, FAT }

    publicDish(<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">String</SPAN> name,booleanvegetarian,intcalories, <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN> type){
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.name = name;
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.vegetarian = vegetarian;
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.calories = calories;
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.type = type;
    }

    publicStringgetName(){
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> name;
    }

    publicbooleanisVegetarian(){
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> vegetarian;
    }

    publicintgetCalories(){
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> calories;
    }

    publicTypegetType(){
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> type;
    }

    <SPAN class=hljs-meta style="COLOR: rgb(31,113,153)">@Override</SPAN>
    publicStringtoString(){
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> name;
    }

    public <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">final</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">List</SPAN>&lt;Dish&gt; menu =
            Arrays.asList( <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"pork"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">false</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">800</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.MEAT),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"beef"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">false</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">700</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.MEAT),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"chicken"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">false</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">400</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.MEAT),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"french fries"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">true</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">530</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.OTHER),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"rice"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">true</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">350</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.OTHER),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"season fruit"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">true</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">120</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.OTHER),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"pizza"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">true</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">550</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.OTHER),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"prawns"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">false</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">400</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.FISH),
                    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> Dish(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"salmon"</SPAN>, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">false</SPAN>, <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">450</SPAN>, Dish.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Type</SPAN>.FISH));
}</PRE></body>
</html>
