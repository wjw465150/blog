<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>高并发Java（10）：JDK8对并发的新支持</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<H1 
style='FONT-SIZE: 24px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 5px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-rendering: optimizeLegibility; font-variant-ligatures: normal; font-variant-caps: normal'>高并发Java（10）：JDK8对并发的新支持</H1>
<DIV class=article_meta 
style='FONT-SIZE: 14px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(211,211,211) 1px dashed; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(153,153,153); PADDING-BOTTOM: 5px; FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 21px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>
<DIV style="MARGIN-BOTTOM: 5px"><SPAN class=timestamp 
style="MARGIN-RIGHT: 5px">时间&nbsp;2016-08-31 08:02:52<SPAN 
class=Apple-converted-space>&nbsp;</SPAN></SPAN><SPAN class=from 
style="MARGIN-RIGHT: 5px"><I class=icon-globe 
style="TEXT-DECORATION: ; HEIGHT: auto; FONT-FAMILY: FontAwesome; WIDTH: auto; VERTICAL-ALIGN: baseline; BACKGROUND-IMAGE: none; BACKGROUND-REPEAT: repeat; BACKGROUND-POSITION: 0px 0px; FONT-WEIGHT: normal; FONT-STYLE: normal; MARGIN-TOP: 0px; DISPLAY: inline; LINE-HEIGHT: normal; MARGIN-RIGHT: 0px; -webkit-font-smoothing: antialiased"></I><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A class="cut cut28 from" 
style="OVERFLOW: hidden; TEXT-DECORATION: none; MAX-WIDTH: 28%; WHITE-SPACE: nowrap; TEXT-OVERFLOW: ellipsis; WORD-BREAK: keep-all; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; DISPLAY: inline; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.tuicool.com/sites/ENVN7j" 
target=_blank>ImportNew</A></SPAN></DIV>
<DIV class=source><I style="FLOAT: left; FONT-STYLE: normal">原文</I>&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A class="cut cut70" 
style="OVERFLOW: hidden; TEXT-DECORATION: none; MAX-WIDTH: 69%; WHITE-SPACE: nowrap; TEXT-OVERFLOW: ellipsis; WORD-BREAK: keep-all; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; DISPLAY: inline-block; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.importnew.com/21358.html?utm_source=tuicool&amp;utm_medium=referral">http://www.importnew.com/21358.html</A></DIV>
<DIV><SPAN style="MARGIN-RIGHT: 5px">主题</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.tuicool.com/topics/11080037" target=_blank><SPAN 
class=new-label 
style="FONT-SIZE: 0.9em; TEXT-DECORATION: none; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; COLOR: rgb(120,120,120); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; DISPLAY: inline-block; LINE-HEIGHT: 16px; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(242,242,242); MARGIN-RIGHT: 5px">并发</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN></A><A 
style="TEXT-DECORATION: none; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.tuicool.com/topics/11070070" target=_blank><SPAN 
class=new-label 
style="FONT-SIZE: 0.9em; TEXT-DECORATION: none; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; COLOR: rgb(120,120,120); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; DISPLAY: inline-block; LINE-HEIGHT: 16px; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(242,242,242); MARGIN-RIGHT: 5px">JDK</SPAN></A></DIV></DIV>
<DIV id=nei class=article_body 
style='WORD-WRAP: break-word; MARGIN-BOTTOM: 0px; FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; OVERFLOW-X: hidden; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); PADDING-BOTTOM: 25px; FONT-STYLE: normal; PADDING-TOP: 20px; PADDING-LEFT: 5px; MIN-HEIGHT: 340px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; PADDING-RIGHT: 5px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>
<DIV style="FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">1. 
LongAdder</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">和AtomicLong类似的使用方式，但是性能比AtomicLong更好。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">LongAdder与AtomicLong都是使用了原子操作来提高性能。但是LongAdder在AtomicLong的基础上进行了热点分离，热点分离类似于有锁操作中的减小锁粒度，将一个锁分离成若干个锁来提高性能。在无锁中，也可以用类似的方式来增加CAS的成功率，从而提高性能。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">LongAdder原理图：</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em"><IMG 
class=alignCenter 
style="MAX-WIDTH: 96%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; VERTICAL-ALIGN: middle; BORDER-BOTTOM: 0px; TEXT-ALIGN: center; MARGIN: 0px auto 10px; BORDER-LEFT: 0px; DISPLAY: block" 
src="高并发Java（10）：JDK8对并发的新支持.png" alt=""></P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">AtomicLong的实现方式是内部有个value 
变量，当多线程并发自增，自减时，均通过CAS 
指令从机器指令级别操作保证并发的原子性。唯一会制约AtomicLong高效的原因是高并发，高并发意味着CAS的失败几率更高， 
重试次数更多，越多线程重试，CAS失败几率又越高，变成恶性循环，AtomicLong效率降低。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">而LongAdder将把一个value拆分成若干cell，把所有cell加起来，就是value。所以对LongAdder进行加减操作，只需要对不同的cell来操作，不同的线程对不同的cell进行CAS操作，CAS的成功率当然高了（试想一下3+2+1=6，一个线程3+1，另一个线程2+1，最后是8，LongAdder没有乘法除法的API）。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">可是在并发数不是很高的情况，拆分成若干的cell，还需要维护cell和求和，效率不如AtomicLong的实现。LongAdder用了巧妙的办法来解决了这个问题。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">初始情况，LongAdder与AtomicLong是相同的，只有在CAS失败时，才会将value拆分成cell，每失败一次，都会增加cell的数量，这样在低并发时，同样高效，在高并发时，这种“自适应”的处理方式，达到一定cell数量后，CAS将不会失败，效率大大提高。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">LongAdder是一种以空间换时间的策略。</P>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">2. 
CompletableFuture</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">实现CompletionStage接口（40余个方法），大多数方法多数应用在函数式编程中。并且支持流式调用</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">CompletableFuture是Java 
8中对Future的增强版</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">简单实现：</P><PRE class="prettyprint java" style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">import</SPAN> java.util.concurrent.CompletableFuture;

<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=class style="FONT-WEIGHT: bold; COLOR: rgb(68,85,136)"><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">class</SPAN> <SPAN class=title style="FONT-WEIGHT: bold; COLOR: rgb(68,85,136)">AskThread</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">implements</SPAN> <SPAN class=title style="FONT-WEIGHT: bold; COLOR: rgb(68,85,136)">Runnable</SPAN> {</SPAN>
<SPAN class=indent>  </SPAN>CompletableFuture&lt;Integer&gt; re = <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">null</SPAN>;

<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> AskThread(CompletableFuture&lt;Integer&gt; re) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">this</SPAN>.re = re;
<SPAN class=indent>  </SPAN>}

<SPAN class=indent>  </SPAN><SPAN class=annotation>@Override</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">void</SPAN> run() {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">int</SPAN> myRe = <SPAN class=number style="COLOR: rgb(0,153,153)">0</SPAN>;
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">try</SPAN> {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>myRe = re.get() * re.get();
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>} <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">catch</SPAN> (Exception e) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>}
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>System.out.println(myRe);
<SPAN class=indent>  </SPAN>}

<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">void</SPAN> main(String[] args) <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">throws</SPAN> InterruptedException {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">final</SPAN> CompletableFuture&lt;Integer&gt; future = <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">new</SPAN> CompletableFuture&lt;Integer&gt;();
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">new</SPAN> Thread(<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">new</SPAN> AskThread(future)).start();
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=comment style="COLOR: rgb(153,153,136); FONT-STYLE: italic">// 模拟长时间的计算过程</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>Thread.sleep(<SPAN class=number style="COLOR: rgb(0,153,153)">1000</SPAN>);
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=comment style="COLOR: rgb(153,153,136); FONT-STYLE: italic">// 告知完成结果</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>future.complete(<SPAN class=number style="COLOR: rgb(0,153,153)">60</SPAN>);
<SPAN class=indent>  </SPAN>}
}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">Future最令人诟病的就是要等待，要自己去检查任务是否完成了，在Future中，任务完成的时间是不可控的。而CompletableFuture的最大改进在于，任务完成的时间也开放了出来。</P><PRE class=http style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=attribute style="COLOR: rgb(0,128,128)">future.complete(60);</SPAN></PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">用来设置完成时间。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">CompletableFuture的异步执行：</P><PRE class="prettyprint cs" style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">static</SPAN> Integer calc(Integer para) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">try</SPAN> {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=comment style="COLOR: rgb(153,153,136); FONT-STYLE: italic">// 模拟一个长时间的执行</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>Thread.sleep(<SPAN class=number style="COLOR: rgb(0,153,153)">1000</SPAN>);
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>} <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">catch</SPAN> (InterruptedException e) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>}
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">return</SPAN> para * para;
<SPAN class=indent>  </SPAN>}

<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">void</SPAN> main(String[] args) throws InterruptedException,
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>ExecutionException {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>final CompletableFuture&lt;Integer&gt; future = CompletableFuture
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.supplyAsync(() -&gt; calc(<SPAN class=number style="COLOR: rgb(0,153,153)">50</SPAN>));
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>System.<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">out</SPAN>.println(future.<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">get</SPAN>());
<SPAN class=indent>  </SPAN>}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">CompletableFuture的流式调用：</P><PRE class="prettyprint cs" style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">static</SPAN> Integer calc(Integer para) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">try</SPAN> {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=comment style="COLOR: rgb(153,153,136); FONT-STYLE: italic">// 模拟一个长时间的执行</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>Thread.sleep(<SPAN class=number style="COLOR: rgb(0,153,153)">1000</SPAN>);
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>} <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">catch</SPAN> (InterruptedException e) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>}
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">return</SPAN> para * para;
<SPAN class=indent>  </SPAN>}

<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">void</SPAN> main(String[] args) throws InterruptedException,
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>ExecutionException {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>CompletableFuture&lt;Void&gt; fu = CompletableFuture
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.supplyAsync(() -&gt; calc(<SPAN class=number style="COLOR: rgb(0,153,153)">50</SPAN>))
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.thenApply((i) -&gt; Integer.toString(i))
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.thenApply((str) -&gt; <SPAN class=string style="COLOR: rgb(221,17,68)">"\""</SPAN> + str + <SPAN class=string style="COLOR: rgb(221,17,68)">"\""</SPAN>)
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.thenAccept(System.<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">out</SPAN>::println);
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>fu.<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">get</SPAN>();
<SPAN class=indent>  </SPAN>}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">组合多个CompletableFuture：</P><PRE class="prettyprint cs" style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">static</SPAN> Integer calc(Integer para) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">return</SPAN> para / <SPAN class=number style="COLOR: rgb(0,153,153)">2</SPAN>;
<SPAN class=indent>  </SPAN>}

<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">void</SPAN> main(String[] args) throws InterruptedException,
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>ExecutionException {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>CompletableFuture&lt;Void&gt; fu = CompletableFuture
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.supplyAsync(() -&gt; calc(<SPAN class=number style="COLOR: rgb(0,153,153)">50</SPAN>))
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.thenCompose(
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>(i) -&gt; CompletableFuture.supplyAsync(() -&gt; calc(i)))
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.thenApply((str) -&gt; <SPAN class=string style="COLOR: rgb(221,17,68)">"\""</SPAN> + str + <SPAN class=string style="COLOR: rgb(221,17,68)">"\""</SPAN>)
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>.thenAccept(System.<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">out</SPAN>::println);
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>fu.<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">get</SPAN>();
<SPAN class=indent>  </SPAN>}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">这几个例子更多是侧重Java8的一些新特性，这里就简单举下例子来说明特性，就不深究了。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">CompletableFuture跟性能上关系不大，更多的是为了支持函数式编程，在功能上的增强。当然开放了完成时间的设置是一大亮点。</P>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">3. 
StampedLock</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">在上一篇中刚刚提到了锁分离，而锁分离的重要的实现就是ReadWriteLock。而StampedLock则是ReadWriteLock的一个改进。StampedLock与ReadWriteLock的区别在于，StampedLock认为读不应阻塞写，StampedLock认为当读写互斥的时候，读应该是重读，而不是不让写线程写。这样的设计解决了读多写少时，使用ReadWriteLock会产生写线程饥饿现象。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">所以StampedLock是一种偏向于写线程的改进。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">StampedLock示例：</P><PRE class="prettyprint java" style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">import</SPAN> java.util.concurrent.locks.StampedLock;

<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=class style="FONT-WEIGHT: bold; COLOR: rgb(68,85,136)"><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">class</SPAN> <SPAN class=title style="FONT-WEIGHT: bold; COLOR: rgb(68,85,136)">Point</SPAN> {</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">double</SPAN> x, y;
<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">final</SPAN> StampedLock sl = <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">new</SPAN> StampedLock();

<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">void</SPAN> move(<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">double</SPAN> deltaX, <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">double</SPAN> deltaY) { <SPAN class=comment style="COLOR: rgb(153,153,136); FONT-STYLE: italic">// an exclusively locked method</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">long</SPAN> stamp = sl.writeLock();
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">try</SPAN> {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>x += deltaX;
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>y += deltaY;
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>} <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">finally</SPAN> {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>sl.unlockWrite(stamp);
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>}
<SPAN class=indent>  </SPAN>}

<SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">double</SPAN> distanceFromOrigin() { <SPAN class=comment style="COLOR: rgb(153,153,136); FONT-STYLE: italic">// A read-only method</SPAN>
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">long</SPAN> stamp = sl.tryOptimisticRead();
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">double</SPAN> currentX = x, currentY = y;
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">if</SPAN> (!sl.validate(stamp)) {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>stamp = sl.readLock();
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">try</SPAN> {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>currentX = x;
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>currentY = y;
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>} <SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">finally</SPAN> {
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>sl.unlockRead(stamp);
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>}
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN>}
<SPAN class=indent>  </SPAN><SPAN class=indent>  </SPAN><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">return</SPAN> Math.sqrt(currentX * currentX + currentY * currentY);
<SPAN class=indent>  </SPAN>}
}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">上述代码模拟了写线程和读线程，&nbsp;StampedLock根据stamp来查看是否互斥，写一次stamp变增加某个值</P><PRE class=http style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=attribute style="COLOR: rgb(0,128,128)">tryOptimisticRead()</SPAN></PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">就是刚刚所说的读写不互斥的情况。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">每次读线程要读时，会先判断</P><PRE class=bash style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">if</SPAN> (!sl.validate(stamp))</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">validate中会先查看是否有写线程在写，然后再判断输入的值和当前的&nbsp;stamp是否相同，即判断是否读线程将读到最新的数据。如果有写线程在写，或者&nbsp;stamp数值不同，则返回失败。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">如果判断失败，当然可以重复的尝试去读，在示例代码中，并没有让其重复尝试读，而采用的是将乐观锁退化成普通的读锁去读，这种情况就是一种悲观的读法。</P><PRE class=sql style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>stamp = sl.read<SPAN class=operator><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">Lock</SPAN>();</SPAN></PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">StampedLock的实现思想：</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">CLH自旋锁：当锁申请失败时，不会立即将读线程挂起，在锁当中会维护一个等待线程队列，所有申请锁，但是没有成功的线程都记录在这个队列中。每一个节点（一个节点代表一个线程），保存一个标记位（locked），用于判断当前线程是否已经释放锁。当一个线程试图获得锁时，取得当前等待队列的尾部节点作为其前序节点。并使用类似如下代码判断前序节点是否已经成功释放锁</P><PRE class=bash style='WORD-WRAP: break-word; FONT-SIZE: 12px; BORDER-TOP: 1px solid; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">while</SPAN> (pred.locked) {   
}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">这个循环就是不断等前面那个结点释放锁，这样的自旋使得当前线程不会被操作系统挂起，从而提高了性能。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">当然不会进行无休止的自旋，会在若干次自旋后挂起线程。</P>
<H3 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">本系列：</H3>
<UL 
style="LIST-STYLE-TYPE: none; FONT-SIZE: 16px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.75em 25px; LINE-HEIGHT: 1.7em; PADDING-RIGHT: 0px">
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21229" rel=nofollow,noindex 
  target=_blank>高并发Java（1）：前言</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21239" rel=nofollow,noindex 
  target=_blank>高并发Java（2）：多线程基础</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21245" rel=nofollow,noindex 
  target=_blank>高并发Java（3）：Java内存模型和线程安全</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21282" rel=nofollow,noindex 
  target=_blank>高并发Java（4）：无锁</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21288" rel=nofollow,noindex 
  target=_blank>高并发Java（5）：JDK并发包1</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21303" rel=nofollow,noindex 
  target=_blank>高并发Java（6）：JDK并发包2</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21312" rel=nofollow,noindex 
  target=_blank>高并发Java（7）：并发设计模式</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21341" rel=nofollow,noindex 
  target=_blank>高并发Java（8）：NIO和AIO</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21353" rel=nofollow,noindex 
  target=_blank>高并发Java（9）：锁的优化和注意事项</A>
  <LI style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; LINE-HEIGHT: 1.7em"><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://www.importnew.com/?p=21358" rel=nofollow,noindex 
  target=_blank>高并发Java（10）：JDK8对并发的新支持</A></LI></UL></DIV></DIV></body>
</html>
