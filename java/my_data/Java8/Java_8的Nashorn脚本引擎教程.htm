<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Java 8的Nashorn脚本引擎教程</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>本文为了解所有关于&nbsp;Nashorn&nbsp;JavaScript 
引擎易于理解的代码例子。 Nashorn JavaScript 引擎是Java SE 8的一部分，它与其它像Google V8&nbsp;(它是Google 
Chrome 和Node.js的引擎)的独立引擎相互竞争。&nbsp;Nashorn 扩展了Java在JVM上运行动态JavaScript脚本的能力。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>&nbsp;</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>在接下来的大约15分钟里，您将学习如何在 
JVM 上动态运行 JavaScript。 通过一些简短的代码示例演示最近 Nashorn 的语言特性。&nbsp;学习 Java 与 JavaScript 
的相互调用。最后包括如何在日常的 Java 业务中整合动态脚本。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>使用Nashorn</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>Nashorn 
javascript 引擎要么在java程序中以编程的方式使用要么在命令行工具jjs使用，jjs在目录<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>$JAVA_HOME/bin</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>中。如果你准备建立一个jjs的符号链接，如下：</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>$&nbsp;cd&nbsp;/usr/bin&nbsp;
$&nbsp;ln&nbsp;-s&nbsp;$JAVA_HOME/bin/jjs&nbsp;jjs&nbsp;
$&nbsp;jjs&nbsp;
jjs&gt;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'Hello&nbsp;World'</SPAN>);&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>本教程关注的是在java代码中使用 
nashorn ，所以我们现在跳过jjs。用java代码来一个简单的&nbsp; HelloWorld示例，如下：</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>ScriptEngine 
engine =<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN>new</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>ScriptEngineManager().getEngineByName(<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>"nashorn"</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>); engine.<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>eval</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>(<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>"print('Hello 
World!');"</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>);</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>为了在java中执行JavaScript代码，首先使用原先<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="https://developer.mozilla.org/en-US/docs/Rhino" rel=nofollow,noindex 
target=_blank>Rhino</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>(旧版Java中来自Mozilla的引擎)中的包javax.script来创建一个nashorn脚本引擎。.</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>既可以向上面那样把JavaScript代码作为一个字符串来直接执行，也可放入一个js脚本文件中，如：</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>ScriptEngine 
engine =<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN>new</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>ScriptEngineManager().getEngineByName(<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>"nashorn"</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>); engine.<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>eval</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>(<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>new</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>FileReader(<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>"script.js"</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>));</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>Nashorn 
javascript是基于<SPAN class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://es5.github.io/" rel=nofollow,noindex target=_blank>ECMAScript 
5.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>，但nashorn后续版本将支持 
ECMAScript 6:</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>当前Nashorn的策略是遵循ECMAScript规范。&nbsp;当我们发布JDK 
8时，我们将实现ECMAScript 5.1标准。后续的&nbsp;Nashorn的版本将实现<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts" 
rel=nofollow,noindex target=_blank>ECMAScript Edition 6</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>标准。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>Nashorn定义了很多语言和扩展了 
ECMAScript标准的API 。接下来我们看看java与JavaScript的通信。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>Java调用Javascript 
函数</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>Nashorn 
支持java代码直接调用定义在脚本文件中JavaScript函数。你可以把java对象作为函数的参数且在调用函数的java方法中接收返回的数据。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>如下的JavaScript代码将会在java端调用：</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;fun1&nbsp;=&nbsp;<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN><SPAN class=hljs-params>(name)</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'Hi&nbsp;there&nbsp;from&nbsp;Javascript,&nbsp;'</SPAN>&nbsp;+&nbsp;name);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"greetings&nbsp;from&nbsp;javascript"</SPAN>;&nbsp;};&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;fun2&nbsp;=&nbsp;<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN>&nbsp;<SPAN class=hljs-params>(object)</SPAN>&nbsp;</SPAN>{&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"JS&nbsp;Class&nbsp;Definition:&nbsp;"</SPAN>&nbsp;+&nbsp;Object.prototype.toString.call(object));&nbsp;
};&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>为了调用函数，你首先得把脚本引擎转换为<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Invocable。NashornScriptEngine</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>实现了&nbsp;Invocable 
接口且定义一个调用JavaScript函数的方法&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>invokeFunction</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，传入函数名即可。</P><PRE class="prettyprint hljs go" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>ScriptEngine&nbsp;engine&nbsp;=&nbsp;<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">new</SPAN>&nbsp;ScriptEngineManager().getEngineByName(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"nashorn"</SPAN>);&nbsp;
engine.eval(<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">new</SPAN>&nbsp;FileReader(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"script.js"</SPAN>));&nbsp;
&nbsp;
Invocable&nbsp;invocable&nbsp;=&nbsp;(Invocable)&nbsp;engine;&nbsp;
&nbsp;
Object&nbsp;result&nbsp;=&nbsp;invocable.invokeFunction(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"fun1"</SPAN>,&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Peter&nbsp;Parker"</SPAN>);&nbsp;
System.out.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">println</SPAN>(result);&nbsp;
System.out.<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">println</SPAN>(result.getClass());&nbsp;
&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;Hi&nbsp;there&nbsp;from&nbsp;Javascript,&nbsp;Peter&nbsp;Parker&nbsp;</SPAN>
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;greetings&nbsp;from&nbsp;javascript&nbsp;</SPAN>
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;class&nbsp;java.lang.String&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>上述代码的执行将在控制台打印三行信息。调用 
print 函数将输出内容通过管道送到 System.out 控制台，因此我们首先看到的是 JavaScript打印的信息。</P>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>现在我们通过传递任意的 
Java 对象去调用第二个函数：</H4><PRE class="prettyprint hljs less" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-selector-tag style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">invocable</SPAN><SPAN class=hljs-selector-class style="COLOR: rgb(136,0,0)">.invokeFunction</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"fun2"</SPAN>,&nbsp;new&nbsp;Date());&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;[object&nbsp;java.util.Date]&nbsp;</SPAN>
&nbsp;
<SPAN class=hljs-selector-tag style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">invocable</SPAN><SPAN class=hljs-selector-class style="COLOR: rgb(136,0,0)">.invokeFunction</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"fun2"</SPAN>,&nbsp;LocalDateTime.now());&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;[object&nbsp;java.time.LocalDateTime]&nbsp;</SPAN>
&nbsp;
<SPAN class=hljs-selector-tag style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">invocable</SPAN><SPAN class=hljs-selector-class style="COLOR: rgb(136,0,0)">.invokeFunction</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"fun2"</SPAN>,&nbsp;new&nbsp;Person());&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;[object&nbsp;com.winterbe.java8.Person]&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>你可以传递任意 
Java 对象而不会在 JavaScript 这边丢失类型信息。因为脚本本身是在 JVM 虚拟机中执行的，我们可以完全利用 nashorn 引擎的 Java 
API 和外部库的强大功能。</P>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>在 
JavaScript 端调用 Java 方法</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>在 
JavaScript 中调用 Java 方法很简单。首先我们定义一个静态的 Java 方法：</P><PRE class="prettyprint hljs rust" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN>&nbsp;<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">String</SPAN>&nbsp;fun1(<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">String</SPAN>&nbsp;name)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;System.out.format(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Hi&nbsp;there&nbsp;from&nbsp;Java,&nbsp;%s"</SPAN>,&nbsp;name);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"greetings&nbsp;from&nbsp;java"</SPAN>;&nbsp;
}&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>JavaScript 
可通过 Java.type API 来引用 Java 类。这跟在 Java 类中引入其他类是类似的。当定义了 Java 类型后我们可直接调用其静态方法 
fun1() 并打印结果到 sout。因为方法是静态的，所以我们无需创建类实例。</P><PRE class="prettyprint hljs go" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;MyJavaClass&nbsp;=&nbsp;Java.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">type</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'my.package.MyJavaClass'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;result&nbsp;=&nbsp;MyJavaClass.fun1(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'John&nbsp;Doe'</SPAN>);&nbsp;
<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(result);&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;Hi&nbsp;there&nbsp;from&nbsp;Java,&nbsp;John&nbsp;Doe&nbsp;</SPAN>
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;greetings&nbsp;from&nbsp;java&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>当调用java 
方法时，Nashorn怎样处理原生JavaScript类型与java类型转换？让我们用一个简单的例子来发现。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>下面的java方法简单打印实际的类方法参数的类型:</P><PRE class="prettyprint hljs cs" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">fun2</SPAN>(<SPAN class=hljs-params>Object&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">object</SPAN></SPAN>)&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;System.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">out</SPAN>.println(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">object</SPAN>.getClass());&nbsp;
}&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>为了解引擎如何处理类型转换，我使用不同JavaScript类型来调用java方法：</P><PRE class="prettyprint hljs coffeescript" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>MyJavaClass.fun2(<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">123</SPAN>);&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">java</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">lang</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">Integer</SPAN>&nbsp;</SPAN>
&nbsp;
MyJavaClass.fun2(<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">49.99</SPAN>);&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">java</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">lang</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">Double</SPAN>&nbsp;</SPAN>
&nbsp;
MyJavaClass.fun2(<SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">true</SPAN>);&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">java</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">lang</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">Boolean</SPAN>&nbsp;</SPAN>
&nbsp;
MyJavaClass.fun2(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"hi&nbsp;there"</SPAN>)&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">java</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">lang</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">String</SPAN>&nbsp;</SPAN>
&nbsp;
MyJavaClass.fun2(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;Number(<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">23</SPAN>));&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">jdk</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">nashorn</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">internal</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">objects</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">NativeNumber</SPAN>&nbsp;</SPAN>
&nbsp;
MyJavaClass.fun2(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;Date());&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">jdk</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">nashorn</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">internal</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">objects</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">NativeDate</SPAN>&nbsp;</SPAN>
&nbsp;
MyJavaClass.fun2(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;RegExp());&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">jdk</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">nashorn</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">internal</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">objects</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">NativeRegExp</SPAN>&nbsp;</SPAN>
&nbsp;
MyJavaClass.fun2({foo:&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'bar'</SPAN>});&nbsp;
<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">jdk</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">nashorn</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">internal</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">scripts</SPAN>.<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">JO4</SPAN>&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>原始的javascript 
类型被转换为适当的&nbsp;java 包装器类。而不是本地javascript对象内部适配器类。请记住，这些类来自于<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>jdk.nashorn.internal</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，所以你不应该在客户端使用这些类:</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="https://twitter.com/wickund/status/451322409661259776" 
rel=nofollow,noindex target=_blank>Anything marked internal will likely change 
out from underneath you.</A></P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>ScriptObjectMirror</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>当使用<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>ScriptObjectMirror</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>把本地JavaScript对象传入时，实际上是有一个java对象表示JavaScript 
对象。&nbsp;ScriptObjectMirror 实现了接口与<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>jdk.nashorn.api</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>内部的映射。这个包下的类目的就是用于客户端代码使用。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>下一个示例更改参数类型Object为ScriptObjectMirror，因此我们能获取到传入JavaScript中对象的一些信息：</P><PRE class="prettyprint hljs cs" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">fun3</SPAN>(<SPAN class=hljs-params>ScriptObjectMirror&nbsp;mirror</SPAN>)&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;System.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">out</SPAN>.println(mirror.getClassName()&nbsp;+&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">":&nbsp;"</SPAN>&nbsp;+&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arrays.toString(mirror.getOwnKeys(<SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">true</SPAN>)));&nbsp;
}&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>当我们把传递对象hash到方法中，在Java端就能访问这些属性：</P><PRE class="prettyprint hljs less" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-selector-tag style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">MyJavaClass</SPAN><SPAN class=hljs-selector-class style="COLOR: rgb(136,0,0)">.fun3</SPAN>({&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-attribute style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">foo</SPAN>:&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'bar'</SPAN>,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-attribute style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">bar</SPAN>:&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'foo'</SPAN>&nbsp;
});&nbsp;
&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;Object:&nbsp;[foo,&nbsp;bar]&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>我们也可以在Java端调用JavaScript对象中的函数。我们首先定义一个JavaScript类型 
Person，包含属性<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>firstName</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>、<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>lastName</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>和函数<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>getFullName。</CODE></P><PRE class="prettyprint hljs kotlin" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>function&nbsp;Person(firstName,&nbsp;lastName)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.firstName&nbsp;=&nbsp;firstName;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.lastName&nbsp;=&nbsp;lastName;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.getFullName&nbsp;=&nbsp;function()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.firstName&nbsp;+&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"&nbsp;"</SPAN>&nbsp;+&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">this</SPAN>.lastName;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
}&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>javascript 
函数<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>getFullName</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>能被&nbsp;ScriptObjectMirror 的<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>callMember()调用。</CODE></P><PRE class="prettyprint hljs cs" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">fun4</SPAN>(<SPAN class=hljs-params>ScriptObjectMirror&nbsp;person</SPAN>)&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;System.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">out</SPAN>.println(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Full&nbsp;Name&nbsp;is:&nbsp;"</SPAN>&nbsp;+&nbsp;person.callMember(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"getFullName"</SPAN>));&nbsp;
}&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>当我们传入一个新的person给java 
方法时，我们能在控制台看到预期结果：</P><PRE class="prettyprint hljs verilog" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;person1&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;Person(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Peter"</SPAN>,&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Parker"</SPAN>);&nbsp;
MyJavaClass<SPAN class=hljs-variable style="COLOR: rgb(188,96,96)">.fun4</SPAN>(person1);&nbsp;
&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;Full&nbsp;Name&nbsp;is:&nbsp;Peter&nbsp;Parker&nbsp;</SPAN>
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>语言扩展</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>Nashorn 
定义一系列的语言和扩展了 ECMAScript 标准的API。&nbsp;让我们直接进入最新的功能：</P>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>类型数组</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>原始javascript 
数组时无类型的。&nbsp;Nashorn 运行你在JavaScript中使用java数组：</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;IntArray&nbsp;=&nbsp;Java.type(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"int[]"</SPAN>);&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;IntArray(<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">5</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">5</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">4</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">2</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">2</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">4</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>;&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">try</SPAN>&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">5</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">23</SPAN>;&nbsp;
}&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">catch</SPAN>&nbsp;(e)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(e.message);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;Array&nbsp;index&nbsp;out&nbsp;of&nbsp;range:&nbsp;5&nbsp;</SPAN>
}&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"17"</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>]);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;17&nbsp;</SPAN>
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"wrong&nbsp;type"</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>]);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;0&nbsp;</SPAN>
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>]&nbsp;=&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"17.3"</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">array</SPAN>[<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">0</SPAN>]);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;17&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>int[]</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>数组的行为像一个真正的&nbsp;java int 
数组。&nbsp;但当我们试图添加非整数的值的数组时，Nashorn 会执行隐式类型转换。&nbsp;字符串会自动转换为int，这相当方便。</P>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>集合与For 
Each</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>我们可以使用java的集合来代替数组。首先定义使用<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Java.type</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>定义一个java类型，而后根据需要创建一个实例。</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;ArrayList&nbsp;=&nbsp;Java.type(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'java.util.ArrayList'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;ArrayList();&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'a'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'b'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'c'</SPAN>);&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">for</SPAN>&nbsp;each&nbsp;(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;el&nbsp;in&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>)&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(el);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;a,&nbsp;b,&nbsp;c</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>为了遍历集合和数组中的元素，Nashorn 
引入了 for each 语句。这就像是 Java 的 for 循环一样。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>这里是一个对集合元素进行遍历的例子，使用的是 
:</P><PRE class="prettyprint hljs go" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">map</SPAN>&nbsp;=&nbsp;<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">new</SPAN>&nbsp;java.util.HashMap();&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">map</SPAN>.put(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'foo'</SPAN>,&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'val1'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">map</SPAN>.put(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'bar'</SPAN>,&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'val2'</SPAN>);&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">for</SPAN>&nbsp;each&nbsp;(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;e&nbsp;in&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">map</SPAN>.keySet())&nbsp;<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(e);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;foo,&nbsp;bar&nbsp;</SPAN>
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">for</SPAN>&nbsp;each&nbsp;(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;e&nbsp;in&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">map</SPAN>.values())&nbsp;<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(e);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;val1,&nbsp;val2&nbsp;</SPAN>
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>Lambda 
表达式和 Streams</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>似乎大家都比较喜欢 
Lambda 和 Streams —— Nashorn 也是！虽然 ECMAScript 5.1 中缺少 Java 8 Lambda 
表达式中的紧缩箭头的语法，但我们可以在接受 Lambda 表达式的地方使用函数来替代。</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;list2&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;java.util.ArrayList();&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"ddd2"</SPAN>);&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"aaa2"</SPAN>);&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"bbb1"</SPAN>);&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"aaa1"</SPAN>);&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"bbb3"</SPAN>);&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"ccc"</SPAN>);&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"bbb2"</SPAN>);&nbsp;
list2.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"ddd1"</SPAN>);&nbsp;
&nbsp;
list2&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;.stream()&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;.filter(<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN><SPAN class=hljs-params>(el)</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>&nbsp;el.startsWith(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"aaa"</SPAN>);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;.sorted()&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">forEach</SPAN>(<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN><SPAN class=hljs-params>(el)</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(el);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;});&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;aaa1,&nbsp;aaa2&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>扩展类</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>Java 
的类型可以简单的通过<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Java.extend</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>进行扩展，在下个例子你将在脚本中创建一个多线程示例：</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;Runnable&nbsp;=&nbsp;Java.type(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'java.lang.Runnable'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;Printer&nbsp;=&nbsp;Java.extend(Runnable,&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;run:&nbsp;<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN><SPAN class=hljs-params>()</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'printed&nbsp;from&nbsp;a&nbsp;separate&nbsp;thread'</SPAN>);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
});&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;Thread&nbsp;=&nbsp;Java.type(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'java.lang.Thread'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;Thread(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;Printer()).start();&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;Thread(<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN><SPAN class=hljs-params>()</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'printed&nbsp;from&nbsp;another&nbsp;thread'</SPAN>);&nbsp;
}).start();&nbsp;
&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;printed&nbsp;from&nbsp;a&nbsp;separate&nbsp;thread&nbsp;</SPAN>
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;printed&nbsp;from&nbsp;another&nbsp;thread&nbsp;</SPAN>
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>参数重载</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>方法和函数可以使用点符号或方括号来进行调用。</P><PRE class="prettyprint hljs markdown" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>var&nbsp;System&nbsp;=&nbsp;Java.type('java.lang.System');&nbsp;
System.out.println(10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;10&nbsp;
System.out[<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"println"</SPAN>](<SPAN class=hljs-link style="COLOR: rgb(188,96,96)">11.0</SPAN>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;11.0&nbsp;
System.out[<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"println(double)"</SPAN>](<SPAN class=hljs-link style="COLOR: rgb(188,96,96)">12</SPAN>);&nbsp;&nbsp;&nbsp;//&nbsp;12.0&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>在使用重载的参数来调用方法时可以传递可选参数来确定具体调用了哪个方法，如 
println(double)。</P>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>Java 
Beans</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>我们不需要常规的用 
getter 或者 setter 来访问类成员属性，可直接用属性名简单访问 Java Bean 中的属性。例如：</P><PRE class="prettyprint hljs go" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;Date&nbsp;=&nbsp;Java.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">type</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'java.util.Date'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;date&nbsp;=&nbsp;<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">new</SPAN>&nbsp;Date();&nbsp;
date.year&nbsp;+=&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1900</SPAN>;&nbsp;
<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(date.year);&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;2014&nbsp;</SPAN>
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>函数语法</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>如果只是简单的一行函数我们可以不用大括号：</P><PRE class="hljs perl" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>function&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">s</SPAN><SPAN class=hljs-string style="COLOR: rgb(136,0,0)">qr(x)</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">x</SPAN>&nbsp;*&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">x</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">s</SPAN><SPAN class=hljs-string style="COLOR: rgb(136,0,0)">qr(3)</SPAN>);&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">9</SPAN>&nbsp;
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>属性绑定</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>来自不同对象的属性可以绑定在一起：</P><PRE class="hljs perl" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>function&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">s</SPAN><SPAN class=hljs-string style="COLOR: rgb(136,0,0)">qr(x)</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">x</SPAN>&nbsp;*&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">x</SPAN>;&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">s</SPAN><SPAN class=hljs-string style="COLOR: rgb(136,0,0)">qr(3)</SPAN>);&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">9</SPAN>&nbsp;
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>字符串处理</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>我喜欢字符串裁剪.</P><PRE class="prettyprint hljs lua" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"&nbsp;hehe"</SPAN>.trimLeft());&nbsp;//&nbsp;hehe&nbsp;<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"hehe&nbsp;"</SPAN>.trimRight()&nbsp;+&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"he"</SPAN>);&nbsp;//&nbsp;hehehe&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>在哪里</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>以防忘记你在哪里:</P><PRE class="hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">__FILE__</SPAN>,&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">__LINE__</SPAN>,&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">__DIR__</SPAN>);&nbsp;
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>Import 
的范围</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>有时，这在一次性导入多个java 
包时非常有用。我们可以使用<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JavaImporter并结合with，在with块范围内引用：</CODE></P><PRE class="prettyprint hljs gradle" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>var&nbsp;imports&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;JavaImporter(java.io,&nbsp;java.lang);&nbsp;
with&nbsp;(imports)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">file</SPAN>&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">File</SPAN>(__FILE__);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;System.out.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">println</SPAN>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">file</SPAN>.getAbsolutePath());&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;/path/to/my/script.js&nbsp;</SPAN>
}&nbsp;
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>数组转换</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>有些包时可以直接使用而不必利用<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Java.type</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>或<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JavaImporter引入，如&nbsp;java.util</CODE>:</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;java.util.ArrayList();&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"s1"</SPAN>);&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"s2"</SPAN>);&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">list</SPAN>.add(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"s3"</SPAN>);&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>如下的代码演示了将java 
list转换为JavaScript的数组：</P><PRE class="prettyprint hljs dart" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;jsArray&nbsp;=&nbsp;Java.from(list);&nbsp;
<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(jsArray);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;s1,s2,s3&nbsp;</SPAN>
<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">print</SPAN>(<SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">Object</SPAN>.prototype.toString.call(jsArray));&nbsp;&nbsp;<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;[object&nbsp;Array]&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>其他的方式：</P><PRE class="hljs livescript" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;javaArray&nbsp;=&nbsp;Java.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">to</SPAN>([<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">5</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">7</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">11</SPAN>],&nbsp;<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"int[]"</SPAN>);&nbsp;
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>调用父类函数</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>在 
JavaScript 中访问重载的成员会有一点点尴尬，因为 ECMAScript 没有类似 Java 的 super 关键字一样的东西。所幸的是 Nashorn 
有办法解决。</P>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>首先我们在 
Java 代码中定义一个超类：</H4><PRE class="prettyprint hljs java" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">SuperRunner</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">implements</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">Runnable</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-meta style="COLOR: rgb(31,113,153)">@Override</SPAN>&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">public</SPAN>&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN>&nbsp;<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">run</SPAN><SPAN class=hljs-params>()</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"super&nbsp;run"</SPAN>);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
}&nbsp;
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>接下来我们在 
JavaScript 中重载 SuperRunner 。创建一个新的 Runner 实例时请注意 Nashorn 的扩展语法：其重载成员的语法是参考 Java 
的匿名对象的做法。</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;SuperRunner&nbsp;=&nbsp;Java.type(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'com.winterbe.java8.SuperRunner'</SPAN>);&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;Runner&nbsp;=&nbsp;Java.extend(SuperRunner);&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;runner&nbsp;=&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN>&nbsp;Runner()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;run:&nbsp;<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN><SPAN class=hljs-params>()</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java.super(runner).run();&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'on&nbsp;my&nbsp;run'</SPAN>);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
}&nbsp;
runner.run();&nbsp;
&nbsp;
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;super&nbsp;run&nbsp;</SPAN>
<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//&nbsp;on&nbsp;my&nbsp;run&nbsp;</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>我们使用<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Java.super调用了重载方法</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>SuperRunner.run()。</CODE></P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>在JavaScript中执行其它脚本是十分容易的。我们可以load函数载入本地或远程的脚本。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>在我的很多web前端中都使用了<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://underscorejs.org/" rel=nofollow,noindex 
target=_blank>Underscore.js</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，因此在Nashorn中我们可以重用 Underscore：</P><PRE class="prettyprint hljs php" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'>load(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js'</SPAN>);&nbsp;
&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">var</SPAN>&nbsp;odds&nbsp;=&nbsp;_.filter([<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">2</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">4</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">5</SPAN>,&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">6</SPAN>],&nbsp;<SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">function</SPAN>&nbsp;<SPAN class=hljs-params>(num)</SPAN>&nbsp;</SPAN>{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>&nbsp;num&nbsp;%&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">2</SPAN>&nbsp;==&nbsp;<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>;&nbsp;
});&nbsp;
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">print</SPAN>(odds);&nbsp; <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 1, 3, 5</SPAN>
</PRE>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>扩展脚本的执行是在同一个 
JavaScript 上下文中，因此我们可以直接访问 underscore 变量。记住脚本的加载可能会因为变量名的重叠导致代码出问题。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>我们可以通过将加载的脚本文件放置到一个新的全局上下文来解决这个问题：</P><PRE class="hljs less" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; FONT-STYLE: normal; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; border-radius: 4px'><SPAN class=hljs-selector-tag style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">loadWithNewGlobal</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">'script.js'</SPAN>);&nbsp;
</PRE>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>命令行脚本</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>如果你对用 
Java 编写命令行脚本很感兴趣的话，可以试试<SPAN class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="https://github.com/winterbe/nake" rel=nofollow,noindex 
target=_blank>Nake</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>。Nake 是一个为 
Java 8 Nashorn 准备的简单 Make 工具。你可以在 Nakefile 文件中定义任务，然后使用 nake — myTask 来运行任务。任务使用 
JavaScript 编写并通过 Nashorn 脚本模式运行，因此你可以让你的终端应用完全利用 Java 8 API 和其他 Java 库强大的功能。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>对 
Java 开发者而言，编写命令行脚本从来没有如此简单过。</P>
<H4 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.5em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility'>总结</H4>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>我希望这篇文章对你有用，可以让你轻松理解 
Nashorn JavaScript 引擎。更多关于 Nashorn 的信息请阅读<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/" 
rel=nofollow,noindex target=_blank>这里</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>,&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html" 
rel=nofollow,noindex target=_blank>这里</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>和&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="https://wiki.openjdk.java.net/display/Nashorn/Nashorn+extensions" 
rel=nofollow,noindex target=_blank>这里</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>. 如果你是要用 Nashorn 编写 Shell 
脚本的话可以参考&nbsp;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/shell.html#sthref24" 
rel=nofollow,noindex target=_blank>这里</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>.</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>过去我也发表了一些&nbsp;文章&nbsp;是关于如何在 
Nashron 引擎中使用 Backbone.js 模型数据的。如果你想要了解更多 Java 8 的话可以去看看我的文章<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/" 
rel=nofollow,noindex target=_blank>Java 8 Tutorial</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>和&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/" 
rel=nofollow,noindex target=_blank>Java 8 Stream Tutorial</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>.</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>本文中的示例代码可以通过&nbsp;GitHub&nbsp;获取，你可以 
fork 这个仓库并通过<SPAN class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="https://twitter.com/winterbe_" rel=nofollow,noindex 
target=_blank>Twitter</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>来给我反馈。</P>
<P 
style='FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 0.75em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'>坚持编程！</P></body>
</html>
