<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">

<HTML lang=zh-CN xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>在 Windows 中实现 Java 本地方法</title>
<!-- s-header-meta  for china -->
<LINK 
href="" rel=schema.DC>
<LINK 
href="favicon.ico" rel="SHORTCUT ICON">
<!-- 5.8 0421 egd: Added IBM.Special.Purpose meta tag and the meta tag to suppress the WI login in the masthead --><!-- STYLESHEETS/SCRIPTS --><!-- for tables -->
<LINK 
media=screen,print href="table.css" type=text/css 
rel=stylesheet>
<!-- end for tables -->

<LINK href="/developerworks/css/ie6v14.css" type=text/css rel=stylesheet>
<LINK 
href="main.css" type=text/css rel=stylesheet>
<LINK 
media=all href="screen.css" type=text/css 
rel=stylesheet>
<LINK media=print href="print.css" 
type=text/css rel=stylesheet>

<LINK media=screen href="ie2_screen.css" 
type=text/css rel=stylesheet>
<!--START RESERVED FOR FUTURE USE INCLUDE FILES-->

<!--END RESERVED FOR FUTURE USE INCLUDE FILES-->
</HEAD>

<BODY><!--StartFragment--><!--MASTHEAD_BEGIN-->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
    <TR vAlign=top>
      <TD class=bbg width=110><A href="http://www.ibm.com/cn/"><IMG border=0 alt=IBM? 
src="ibm-logo.gif" width=110 height=52></A></TD>
      <TD class=bbg><IMG border=0 alt="" src="c.gif" width=1 
height=1></TD>
      <TD class=mbbg align=right width=650><TABLE cellSpacing=0 cellPadding=0 align=right border=0>
          <TBODY>
            <TR class=cty-tou>
              <TD class=upper-masthead-corner width=17 rowSpan=2><A href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#main"><IMG border=0 
alt=跳转到主要内容 src="c.gif" width=1 height=1></A></TD>
              <TD align=left><TABLE cellSpacing=0 cellPadding=0 align=left border=0>
                  <TBODY>
                    <TR>
                      <TD><SPAN class=spacer>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><B class=country>中国</B><SPAN 
class=spacer>&nbsp;[</SPAN><A class=ur-link 
href="">选择</A><SPAN 
class=spacer>]</SPAN></TD>
                      <TD class=upper-masthead-divider width=29>&nbsp;&nbsp;&nbsp;&nbsp;</TD>
                      <TD align=left><A class=ur-link 
href="">使用条款</A></TD>
                    </TR>
                  </TBODY>
              </TABLE></TD>
              <TD width=40>&nbsp;</TD>
            </TR>
            <TR>
              <TD class=cty-tou-border colSpan=2 height=1><IMG alt="" src="c.gif" 
width=1 height=1></TD>
            </TR>
            <TR>
              <TD colSpan=3><IMG alt="" src="c.gif" width=1 
height=8></TD>
            </TR>
            <TR>
              <TD>&nbsp;</TD>
              <TD align=center colSpan=2><FORM id=form1 name=form1 
action=http://www-128.ibm.com/developerworks/search/searchResults.jsp 
method=get>
                  <INPUT type=hidden value=1 name=searchType>
                  <INPUT type=hidden 
value=dWChina name=searchSite>
                  <INPUT type=hidden value=zh name=pageLang>
                  <INPUT 
type=hidden value=UTF8 name=langEncoding>
                  <TABLE cellSpacing=0 cellPadding=0 border=0>
                    <TBODY>
                      <TR>
                        <TD width=1><IMG alt="Select a scope:" src ="c.gif" 
width=1 height=1 ></TD>
                        <TD align=right><LABEL for=sq>
                            <SELECT class=input-scope id=sq 
name=searchScope>
                              <OPTION value=dW selected>dW 全部内容</OPTION>
                              <OPTION 
value=dW>-----------------</OPTION>
                              <OPTION value=aixunix>&nbsp;&nbsp;AIX and 
                              UNIX</OPTION>
                              <OPTION value=dmdd>&nbsp;&nbsp;Information management</OPTION>
                              <OPTION 
value=lotusdd>&nbsp;&nbsp;Lotus</OPTION>
                              <OPTION value=rdd>&nbsp;&nbsp;Rational</OPTION>
                              <OPTION 
value=tivolidd>&nbsp;&nbsp;Tivoli</OPTION>
                              <OPTION value=wsdd>&nbsp;&nbsp;WebSphere</OPTION>
                              <OPTION 
value=workplace>&nbsp;&nbsp;Workplace</OPTION>
                              <OPTION 
value=dW>-----------------</OPTION>
                              <OPTION value=gridZ>&nbsp;&nbsp;Grid 
                              computing</OPTION>
                              <OPTION value=javaZ>&nbsp;&nbsp;Java 技术</OPTION>
                              <OPTION 
value=linuxZ>&nbsp;&nbsp;Linux</OPTION>
                              <OPTION value=opensrcZ>&nbsp;&nbsp;Open 
                              source</OPTION>
                              <OPTION value=securityZ>&nbsp;&nbsp;Security</OPTION>
                              <OPTION 
value=webservZ>&nbsp;&nbsp;SOA &amp; Web services</OPTION>
                              <OPTION value=webarchZ>&nbsp;&nbsp;Web 
                              development</OPTION>
                              <OPTION value=xmlZ>&nbsp;&nbsp;XML</OPTION>
                              <OPTION 
value=dW>-----------------</OPTION>
                              <OPTION value=all>IBM 
                              全部内容</OPTION>
                            </SELECT>
                        </LABEL></TD>
                        <TD align=right width=1><IMG alt="Search for:" src 
="c.gif" width=1 height=1 >&nbsp;&nbsp;</TD>
                        <TD align=right><INPUT class=input id=q maxLength=100 size=15 name=query></TD>
                        <TD width=7>&nbsp;</TD>
                        <TD><LABEL for=q>
                            <INPUT type=image alt=搜索 
src="search.gif" value=搜索 name=Search>
                        </LABEL></TD>
                        <TD 
width=20>&nbsp;</TD>
                      </TR>
                    </TBODY>
                  </TABLE>
              </FORM></TD>
            </TR>
          </TBODY>
      </TABLE></TD>
    </TR>
    <TR>
      <TD class=blbg colSpan=3><TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
            <TR>
              <TD><TABLE cellSpacing=0 cellPadding=0 border=0>
                  <TBODY>
                    <TR>
                      <TD><SPAN class=spacer>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></TD>
                      <TD><A class=masthead-mainlink href="http://www.ibm.com/cn/">首页</A></TD>
                      <TD class=masthead-divider width=27>&nbsp;&nbsp;&nbsp;&nbsp;</TD>
                      <TD><A class=masthead-mainlink 
href="">产品</A></TD>
                      <TD class=masthead-divider width=27>&nbsp;&nbsp;&nbsp;&nbsp;</TD>
                      <TD><A class=masthead-mainlink 
href="">服务与解决方案</A></TD>
                      <TD class=masthead-divider width=27>&nbsp;&nbsp;&nbsp;&nbsp;</TD>
                      <TD><A class=masthead-mainlink 
href="">支持与下载</A></TD>
                      <TD class=masthead-divider width=27>&nbsp;&nbsp;&nbsp;&nbsp;</TD>
                      <TD><A class=masthead-mainlink 
href="">个性化服务</A></TD>
                      <TD><SPAN 
class=spacer>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></TD>
                    </TR>
                  </TBODY>
              </TABLE></TD>
            </TR>
          </TBODY>
      </TABLE></TD>
    </TR>
  </TBODY>
</TABLE>
<TABLE id=v14-body-table cellSpacing=0 cellPadding=0 width="100%" border=0>
    <TBODY>
  
  <TR vAlign=top><!--LEFTNAV_BEGIN-->
    <TD id=navigation width=150><TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
        <TBODY>
          <TR>
            <TD class=left-nav-spacer><A class=left-nav-overview 
href="http://www.ibm.com/developerworks/cn/">&nbsp;</A></TD>
          </TR>
        </TBODY>
      </TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
        <TBODY>
          <TR>
            <TD class=left-nav-overview colSpan=2><A class=left-nav-overview 
href="http://www.ibm.com/developerworks/cn/">developerWorks<BR>
              中国</A></TD>
          </TR>
        </TBODY>
      </TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
        <TBODY>
          <TR>
            <TD class=left-nav-highlight colSpan=2><A class=left-nav 
href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#">本文内容包括：</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#Introduction">简介</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#Java Calling C">Java 调用 C</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#Example 1">示例 1 -- 传递参数</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#N10195">调试</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#N10209">其他信息</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#N1022F">小结</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#author">关于作者</A></TD>
          </TR>
          <TR class=left-nav-child-highlight>
            <TD><IMG alt="" src="cl-bullet.gif" width=2 height=8></TD>
            <TD><A class=left-nav-child href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#rate">对本文的评价</A></TD>
          </TR>
          <TR class=left-nav-last>
            <TD width=14><IMG class=display-img alt="" src="c.gif" width=14 
height=1></TD>
            <TD width=136><IMG class=display-img alt="" src="left-nav-corner.gif" 
width=136 
height=19></TD>
          </TR>
        </TBODY>
      </TABLE>
      <BR>
      <TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
        <TBODY>
          <TR>
            <TD class=related colSpan=2><B class=related>相关链接：</B></TD>
          </TR>
          <TR class=rlinks>
            <TD><IMG alt="" src="rl-bullet.gif" width=2 height=8></TD>
            <TD><A class=rlinks 
href="http://www.ibm.com/developerworks/cn/views/java/articles.jsp">Java 
              technology 技术文档库</A></TD>
          </TR><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- No content currently --><!--END RESERVED FOR FUTURE USE INCLUDE FILES-->
          <TR>
            <TD width=14><IMG class=display-img alt="" src="c.gif" width=14 
height=1></TD>
            <TD width=136><IMG class=display-img alt="" src="c.gif" 
width=136 height=19></TD>
          </TR>
        </TBODY>
      </TABLE><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- No content currently --><!--END RESERVED FOR FUTURE USE INCLUDE FILES--></TD><!--LEFTNAV_END-->
    <TD width="100%"><TABLE id=content-table cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
          <TR vAlign=top>
            <TD width="100%"><TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
                <TBODY>
                  <TR>
                    <TD><A name=main><IMG border=0 alt=跳转到主要内容 src="c.gif" width=592 
height=1></A></TD>
                  </TR>
                </TBODY>
              </TABLE>
              <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
                <TBODY>
                  <TR vAlign=top>
                    <TD width=10 height=18><IMG alt="" src="c.gif" width=10 
height=18></TD>
                    <TD width="100%"><IMG alt="" src="c.gif" width=1 height=6><BR>
                      <A 
class=bctl href="http://www.ibm.com/developerworks/cn/">developerWorks 
                      中国</A><SPAN class=bct>&nbsp;&nbsp;&gt;&nbsp;&nbsp;</SPAN><A class=bctl 
href="http://www.ibm.com/developerworks/cn/java/">Java technology</A><SPAN 
class=bct>&nbsp;&nbsp;&gt;</SPAN><IMG alt="" src="c.gif" width=1 
height=1><BR>
                      <H1>在 Windows 中实现 Java 本地方法</H1>
                    <IMG class=display-img alt="" src="c.gif" 
width=1 height=6></TD>
                    <TD class=no-print width=192><IMG alt=developerWorks src="dw.gif" 
width=192 
height=18></TD>
                  </TR>
                </TBODY>
            </TABLE></TD>
          </TR>
        </TBODY>
      </TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
        
        <TR vAlign=top>
          <TD width=10><IMG alt="" src="c.gif" width=10 height=1></TD>
          <TD width="100%"><TABLE class=no-print cellSpacing=0 cellPadding=0 width=160 align=right 
border=0>
                <TBODY>
              
              <TR>
                <TD width=10><IMG alt="" src="c.gif" width=10 height=1></TD>
                <TD><TABLE cellSpacing=0 cellPadding=0 width=150 border=0>
                    <TBODY>
                      <TR>
                        <TD class=v14-header-1-small>文档选项</TD>
                      </TR>
                    </TBODY>
                  </TABLE>
                  <TABLE class=v14-gray-table-border cellSpacing=0 cellPadding=0 border=0>
                      <TBODY>
                    
                    <TR>
                      <TD class=no-padding width=150><TABLE cellSpacing=0 cellPadding=0 width=143 border=0>
                          <IMG alt="" src="c.gif" 
width=8 height=1>
                          <FORM name=email 
action=https://www.ibm.com/developerworks/secure/email-it.jsp>&nbsp;
                            <INPUT 
type=hidden value=cn name=lang>
<TBODY>
                              <TR vAlign=top>
                                <TD width=8><IMG alt="" src="c.gif" width=8 height=1></TD>
                                <TD width=16><IMG alt=将此页作为电子邮件发送 vspace=3 
src="em.gif" width=16 height=16></TD>
                                <TD width=122><P><A class=smallplainlink 
href="javascript_document.email.submit();"><B>将此页作为电子邮件发送</B></A></P></TD>
                              </TR>
                            
                            <NOSCRIPT>
                            </NOSCRIPT>
                          </FORM>
                            </TBODY>
                      </TABLE></TD>
                    </TR>
                      </TBODY>
                  </TABLE><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- this content will be automatically generated across all content areas --><BR><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><BR></TD>
              </TR>
                </TBODY>
            </TABLE>
            <P>级别： 初级</P>
            <P><A href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#author">David Wendt</A>WebSphere Development Research Triangle 
              Park, NC<BR>
            </P>
            <P>1999 年 5 月 01 日</P>
            <BLOCKQUOTE>本文为在 32 位 Windows 平台上实现 Java 本地方法提供了实用的示例、步骤和准则。这些示例包括传递和返回常用的数据类型。
              <P>本文中的示例使用 Sun Microsystems 公司创建的 Java DevelopmentKit (JDK) 版本 1.1.6 和 <A 
href="http://java.sun.com/products/jdk/1.1/docs/guide/jni/">Java本地接口 (JNI) 
                规范</A>。 用 C 语言编写的本地代码是用 MicrosoftVisual C++ 编译器编译生成的。 </P>
            </BLOCKQUOTE><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- include java script once we verify teams wants to use this and it will work on dbcs and cyrillic characters --><!--END RESERVED FOR FUTURE USE INCLUDE FILES-->
            
            <P><A name=Introduction><SPAN class=atitle>简介</SPAN></A></P>
            <P>本文提供调用本地 C 代码的 Java 
              代码示例，包括传递和返回某些常用的数据类型。本地方法包含在特定于平台的可执行文件中。就本文中的示例而言，本地方法包含在 Windows 32 位动态链接库 
              (DLL) 中。</P>
            <P>不过我要提醒您，对 Java 外部的调用通常不能移植到其他平台上，在 applet 中还可能引发安全异常。实现本地代码将使您的 Java 应用程序无法通过 
              100% 纯 Java 测试。但是，如果必须执行本地调用，则要考虑几个准则：</P>
            <OL>
              <LI>将您的所有本地方法都封装在单个类中，这个类调用单个 DLL。对于每种目标操作系统，都可以用特定于适当平台的版本替换这个 
                DLL。这样就可以将本地代码的影响减至最小，并有助于将以后所需的移植问题包含在内。
              <LI>本地方法要简单。尽量将您的 DLL 对任何第三方（包括 Microsoft）运行时 DLL 的依赖减到最小。使您的本地方法尽量独立，以将加载您的 DLL 
                和应用程序所需的开销减到最小。如果需要运行时 DLL，必须随应用程序一起提供它们。 </LI>
            </OL>
            <BR>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD><IMG alt="" src="blue_rule.gif" width="100%" 
height=1><BR>
                  <IMG border=0 alt="" src="c.gif" width=8 
height=6></TD>
                </TR>
              </TBODY>
            </TABLE>
            <TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
              <TBODY>
                <TR align=right>
                  <TD><IMG alt="" src="c.gif" width="100%" height=4><BR>
                    <TABLE cellSpacing=0 cellPadding=0 border=0>
                      <TBODY>
                        <TR>
                          <TD vAlign=middle><IMG border=0 alt="" 
src="u_bold.gif" width=16 height=16><BR></TD>
                          <TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#main"><B>回页首</B></A></TD>
                        </TR>
                      </TBODY>
                  </TABLE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <BR>
            <P><A name="Java Calling C"><SPAN class=atitle>Java 调用 C</SPAN></A></P>
            <P>对于调用 C 函数的 Java 方法，必须在 Java 类中声明一个本地方法。在本部分的所有示例中，我们将创建一个名为 MyNative 
              的类，并逐步在其中加入新的功能。这强调了一种思想，即将本地方法集中在单个类中，以便将以后所需的移植工作减到最少。</P>
            <BR>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD><IMG alt="" src="blue_rule.gif" width="100%" 
height=1><BR>
                  <IMG border=0 alt="" src="c.gif" width=8 
height=6></TD>
                </TR>
              </TBODY>
            </TABLE>
            <TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
              <TBODY>
                <TR align=right>
                  <TD><IMG alt="" src="c.gif" width="100%" height=4><BR>
                    <TABLE cellSpacing=0 cellPadding=0 border=0>
                      <TBODY>
                        <TR>
                          <TD vAlign=middle><IMG border=0 alt="" 
src="u_bold.gif" width=16 height=16><BR></TD>
                          <TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#main"><B>回页首</B></A></TD>
                        </TR>
                      </TBODY>
                  </TABLE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <BR>
            <P><A name="Example 1"><SPAN class=atitle>示例 1 -- 传递参数</SPAN></A></P>
            <P>在第一个示例中，我们将三个常用参数类型传递给本地函数： <I>String</I>、 <I>int</I>和 <I>boolean</I> 。本例说明在本地 C 代码中如何引用这些参数。 </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>public class MyNative
{
  public void showParms( String s, int i, boolean b )
  {
    showParms0( s, i , b );
  }
  private native void showParms0( String s, int i, boolean b );
  static
  {
    System.loadLibrary( "MyNative" );
  }
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>请注意，本地方法被声明为专用的，并创建了一个包装方法用于公用目的。这进一步将本地方法同代码的其余部分隔离开来，从而允许针对所需的平台对它进行优化。 <I>static</I>子句加载包含本地方法实现的 DLL。 </P>
            <P>下一步是生成 C 代码来实现 showParms0 方法。此方法的 C 函数原型是通过对 .class 文件使用 javah 实用程序来创建的，而 
              .class 文件是通过编译 MyNative.java 文件生成的。这个实用程序可在 JDK 中找到。下面是 javah 的用法：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> javac MyNative.java（将 .java 编译为 .class） 
 javah -jni 
      MyNative（生成 .h 文件） 
 </PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>这将生成一个 MyNative.h 文件，其中包含一个本地方法原型，如下所示：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>/*
 * Class:     MyNative
 * Method:    showParms0
 * Signature: (Ljava/lang/String;IZ)V
 */
JNIEXPORT void JNICALL Java_MyNative_showParms0
  (JNIEnv *, jobject, jstring, jint, jboolean);
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>第一个参数是调用 JNI 方法时使用的 JNI Environment 指针。第二个参数是指向在此 Java 代码中实例化的 Java 对象 
              MyNative 的一个句柄。其他参数是方法本身的参数。请注意，MyNative.h 包括头文件 jni.h。jni.h 包含 JNI API 
              和变量类型（包括jobject、jstring、jint、jboolean，等等）的原型和其他声明。</P>
            <P>本地方法是在文件 MyNative.c 中用 C 语言实现的：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>#include &lt;stdio.h&gt;
#include "MyNative.h"
JNIEXPORT void JNICALL Java_MyNative_showParms0
  (JNIEnv *env, jobject obj, jstring s, jint i, jboolean b)
{
  const char* szStr = (*env)-&gt;GetStringUTFChars( env, s, 0 );
  printf( "String = [%s]\n", szStr );
  printf( "int = %d\n", i );
  printf( "boolean = %s\n", (b==JNI_TRUE ? "true" : "false") );
  (*env)-&gt;ReleaseStringUTFChars( env, s, szStr );
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>JNI API，GetStringUTFChars，用来根据 Java 字符串或 jstring 参数创建 C 
              字符串。这是必需的，因为在本地代码中不能直接读取 Java 字符串，而必须将其转换为 C 字符串或 Unicode。有关转换 Java 
              字符串的详细信息，请参阅标题为 NLS Strings and JNI 的一篇论文。但是，jboolean 和 jint 值可以直接使用。</P>
            <P>MyNative.dll 是通过编译 C 源文件创建的。下面的编译语句使用 Microsoft Visual C++ 编译器：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> cl -Ic:\jdk1.1.6\include -Ic:\jdk1.1.6\include\win32 -LD MyNative.c 
      -FeMyNative.dll  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>其中 c:\jdk1.1.6 是 JDK 的安装路径。</P>
            <P>MyNative.dll 已创建好，现在就可将其用于 MyNative 类了。 <BR>
              可以这样测试这个本地方法：在 MyNative 类中创建一个 
              main 方法来调用 showParms 方法，如下所示： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>   public static void main( String[] args )
   {
     MyNative obj = new MyNative();
     obj.showParms( "Hello", 23, true );
     obj.showParms( "World", 34, false );
   }
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>当运行这个 Java 应用程序时，请确保 MyNative.dll 位于 Windows 的 PATH 环境变量所指定的路径中或当前目录下。当执行此 
              Java 程序时，如果未找到这个 DLL，您可能会看到以下的消息：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> java MyNative  
 Can't find class MyNative  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>这是因为 static 子句无法加载这个 DLL，所以在初始化 MyNative 类时引发异常。Java 
              解释器处理这个异常，并报告一个一般错误，指出找不到这个类。 <BR>
              如果用 -verbose 命令行选项运行解释器，您将看到它因找不到这个 DLL 而加载 
              UnsatisfiedLinkError 异常。 </P>
            <P>如果此 Java 程序完成运行，就会输出以下内容：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> java MyNative  
 String = [Hello]  
 int = 23 
 boolean = true  
 String = [World]  
 int 
      = 34  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P><CODE>boolean =  false</CODE> <B>示例 2 -- 返回一个值</B> </P>
            <P>本例将说明如何在本地方法中实现返回代码。 <BR>
              将这个方法添加到 MyNative 类中，这个类现在变为以下形式： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>public class MyNative
{
  public void showParms( String s, int i, boolean b )
  {
    showParms0( s, i , b );
  }
  public int hypotenuse( int a, int b )
  {
    return hyptenuse0( a, b );
  }
  private native void showParms0( String s, int i, boolean b );
  private native int  hypotenuse0( int a, int b );
  static
  {
    System.loadLibrary( "MyNative" );
  }
  /* 测试本地方法 */
  public static void main( String[] args )
  {
    MyNative obj = new MyNative();
    System.out.println( obj.hypotenuse(3,4) );
    System.out.println( obj.hypotenuse(9,12) );
  }
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>公用的 hypotenuse 方法调用本地方法 hypotenuse0 来根据传递的参数计算值，并将结果作为一个整数返回。这个新本地方法的原型是使用 
              javah 生成的。请注意，每次运行这个实用程序时，它将自动覆盖当前目录中的 MyNative.h。按以下方式执行 javah：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> javah -jni MyNative  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>生成的 MyNative.h 现在包含 hypotenuse0 原型，如下所示：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>/*
 * Class:     MyNative
 * Method:    hypotenuse0
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *, jobject, jint, jint);
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>该方法是在 MyNative.c 源文件中实现的，如下所示：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include "MyNative.h"
JNIEXPORT void JNICALL Java_MyNative_showParms0
  (JNIEnv *env, jobject obj, jstring s, jint i, jboolean b)
{
  const char* szStr = (*env)-&gt;GetStringUTFChars( env, s, 0 );
  printf( "String = [%s]\n", szStr );
  printf( "int = %d\n", i );
  printf( "boolean = %s\n", (b==JNI_TRUE ? "true" : "false") );
  (*env)-&gt;ReleaseStringUTFChars( env, s, szStr );
}
JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *env, jobject obj, jint a, jint b)
{
  int rtn = (int)sqrt( (double)( (a*a) + (b*b) ) );
  return (jint)rtn;
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>再次请注意，jint 和 int 值是可互换的。 <BR>
              使用相同的编译语句重新编译这个 DLL： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> cl -Ic:\jdk1.1.6\include -Ic:\jdk1.1.6\include\win32 -LD MyNative.c 
      -FeMyNative.dll  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>现在执行 java MyNative 将输出 5 和 15 作为斜边的值。</P>
            <BLOCKQUOTE><B>示例 3 -- 静态方法</B> </BLOCKQUOTE>
            <P>您可能在上面的示例中已经注意到，实例化的 MyNative 
              对象是没必要的。实用方法通常不需要实际的对象，通常都将它们创建为静态方法。本例说明如何用一个静态方法实现上面的示例。更改 MyNative.java 
              中的方法签名，以使它们成为静态方法：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>  public static int hypotenuse( int a, int b )
  {
    return hypotenuse0(a,b);
  }
  ...
  private static native int  hypotenuse0( int a, int b );
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>现在运行 javah 为 <I>hypotenuse0</I>创建一个新原型，生成的原型如下所示： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>/*
 * Class:     MyNative
 * Method:    hypotenuse0
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *, jclass, jint, jint);
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>C 源代码中的方法签名变了，但代码还保持原样：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *env, jclass cls, jint a, jint b)
{
  int rtn = (int)sqrt( (double)( (a*a) + (b*b) ) );
  return (jint)rtn;
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>本质上，jobject 参数已变为 jclass 参数。此参数是指向 MyNative.class 的一个句柄。main 方法可更改为以下形式：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>  public static void main( String[] args )
  {
    System.out.println( MyNative.hypotenuse( 3, 4 ) );
    System.out.println( MyNative.hypotenuse( 9, 12 ) );
  }
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>因为方法是静态的，所以调用它不需要实例化 MyNative 对象。本文后面的示例将使用静态方法。</P>
            <BLOCKQUOTE><B>示例 4 -- 传递数组</B> </BLOCKQUOTE>
            <P>本例说明如何传递数组型参数。本例使用一个基本类型，boolean，并将更改数组元素。下一个示例将访问 String（非基本类型）数组。将下面的方法添加到 
              MyNative.java 源代码中： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>  public static void setArray( boolean[] ba )
  {
    for( int i=0; i &lt; ba.length; i++ )
      ba[i] = true;
    setArray0( ba );
  }
  ...
  private static native void setArray0( boolean[] ba );
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>在本例中，布尔型数组被初始化为 true，本地方法将把特定的元素设置为 false。同时，在 Java 源代码中，我们可以更改 main 
              以使其包含测试代码：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>    boolean[] ba = new boolean[5];
    MyNative.setArray( ba );
    for( int i=0; i &lt; ba.length; i++ )
      System.out.println( ba[i] );
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>在编译源代码并执行 javah 以后，MyNative.h 头文件包含以下的原型：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>/*
 * Class:     MyNative
 * Method:    setArray0
 * Signature: ([Z)V
 */
JNIEXPORT void JNICALL Java_MyNative_setArray0
  (JNIEnv *, jclass, jbooleanArray);
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>请注意，布尔型数组是作为单个名为 jbooleanArray 的类型创建的。 <BR>
              基本类型有它们自已的数组类型，如 jintArray 和 
              jcharArray。 <BR>
              非基本类型的数组使用 jobjectArray 类型。下一个示例中包括一个 
              jobjectArray。这个布尔数组的数组元素是通过 JNI 方法 GetBooleanArrayElements 来访问的。 <BR>
              针对每种基本类型都有等价的方法。这个本地方法是如下实现的： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>JNIEXPORT void JNICALL Java_MyNative_setArray0
  (JNIEnv *env, jclass cls, jbooleanArray ba)
{
  jboolean* pba = (*env)-&gt;GetBooleanArrayElements( env, ba, 0 );
  jsize len = (*env)-&gt;GetArrayLength(env, ba);
  int i=0;
  // 更改偶数数组元素
  for( i=0; i &lt; len; i+=2 )
    pba[i] = JNI_FALSE;
  (*env)-&gt;ReleaseBooleanArrayElements( env, ba, pba, 0 );
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>指向布尔型数组的指针可以使用 GetBooleanArrayElements 获得。 <BR>
              数组大小可以用 GetArrayLength 方法获得。使用 
              ReleaseBooleanArrayElements 方法释放数组。现在就可以读取和修改数组元素的值了。jsize 声明等价于 
              jint（要查看它的定义，请参阅 JDK 的 include 目录下的 jni.h 头文件）。 </P>
            <BLOCKQUOTE><B>示例 5 -- 传递 Java String 数组</B> </BLOCKQUOTE>
            <P>本例将通过最常用的非基本类型，Java String，说明如何访问非基本对象的数组。字符串数组被传递给本地方法，而本地方法只是将它们显示到控制台上。 <BR>
              MyNative 类定义中添加了以下几个方法： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>  public static void showStrings( String[] sa )
  {
    showStrings0( sa );
  }
  private static void showStrings0( String[] sa );
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>并在 <CODE>main</CODE> 方法中添加了两行进行测试： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>  String[] sa = new String[] { "Hello,", "world!", "JNI", "is", "fun." };
  MyNative.showStrings( sa );
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>本地方法分别访问每个元素，其实现如下所示。</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>JNIEXPORT void JNICALL Java_MyNative_showStrings0
  (JNIEnv *env, jclass cls, jobjectArray sa)
{
  int len = (*env)-&gt;GetArrayLength( env, sa );
  int i=0;
  for( i=0; i &lt; len; i++ )
  {
    jobject obj = (*env)-&gt;GetObjectArrayElement(env, sa, i);
    jstring str = (jstring)obj;
    const char* szStr = (*env)-&gt;GetStringUTFChars( env, str, 0 );
    printf( "%s ", szStr );
    (*env)-&gt;ReleaseStringUTFChars( env, str, szStr );
  }
  printf( "\n" );
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>数组元素可以通过 GetObjectArrayElement 访问。 <BR>
              在本例中，我们知道返回值是 jstring 类型，所以可以安全地将它从 
              jobject 类型转换为 jstring 类型。字符串是通过前面讨论过的方法打印的。有关在 Windows 中处理 Java 字符串的信息，请参阅标题为 
              NLS Strings and JNI 的一篇论文。 </P>
            <BLOCKQUOTE><B>示例 6 -- 返回 Java String 数组</B> </BLOCKQUOTE>
            <P>最后一个示例说明如何在本地代码中创建一个字符串数组并将它返回给 Java 调用者。MyNative.java 中添加了以下几个方法：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>  public static String[] getStrings()
  {
    return getStrings0();
  }
  private static native String[] getStrings0();
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>更改 <CODE>main</CODE> 以使 <CODE>showStrings</CODE> 将 <CODE>getStrings</CODE> 的输出显示出来： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>  MyNative.showStrings( MyNative.getStrings() );
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>实现的本地方法返回五个字符串。</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode>JNIEXPORT jobjectArray JNICALL Java_MyNative_getStrings0
  (JNIEnv *env, jclass cls)
{
  jstring      str;
  jobjectArray args = 0;
  jsize        len = 5;
  char*        sa[] = { "Hello,", "world!", "JNI", "is", "fun" };
  int          i=0;
  args = (*env)-&gt;NewObjectArray(env, len, (*env)-&gt;FindClass(env, "java/lang/String"), 0);
  for( i=0; i &lt; len; i++ )
  {
    str = (*env)-&gt;NewStringUTF( env, sa[i] );
    (*env)-&gt;SetObjectArrayElement(env, args, i, str);
  }
  return args;
}
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>字符串数组是通过调用 NewObjectArray 创建的，同时传递了 String 类和数组长度两个参数。Java String 是使用 
              NewStringUTF 创建的。String 元素是使用 SetObjectArrayElement 存入数组中的。</P>
            <BR>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD><IMG alt="" src="blue_rule.gif" width="100%" 
height=1><BR>
                  <IMG border=0 alt="" src="c.gif" width=8 
height=6></TD>
                </TR>
              </TBODY>
            </TABLE>
            <TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
              <TBODY>
                <TR align=right>
                  <TD><IMG alt="" src="c.gif" width="100%" height=4><BR>
                    <TABLE cellSpacing=0 cellPadding=0 border=0>
                      <TBODY>
                        <TR>
                          <TD vAlign=middle><IMG border=0 alt="" 
src="u_bold.gif" width=16 height=16><BR></TD>
                          <TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#main"><B>回页首</B></A></TD>
                        </TR>
                      </TBODY>
                  </TABLE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <BR>
            <P><A name=N10195><SPAN class=atitle>调试</SPAN></A></P>
            <P>现在您已经为您的应用程序创建了一个本地 DLL，但在调试时还要牢记以下几点。如果使用 Java 调试器 java_g.exe，则还需要创建 DLL 
              的一个“调试”版本。这只是表示必须创建同名但带有一个 _g 后缀的 DLL 版本。就 MyNative.dll 而言，使用 java_g.exe 要求在 
              Windows 的 PATH 环境指定的路径中有一个 MyNative_g.dll 文件。在大多数情况下，这个 DLL 可以通过将原文件重命名或复制为其名称带缀 
              _g 的文件。</P>
            <P>现在，Java 调试器不允许您进入本地代码，但您可以在 Java 环境外使用 C 调试器（如 Microsoft Visual 
              C++）调试本地方法。首先将源文件导入一个项目中。 <BR>
              将编译设置调整为在编译时将 include 目录包括在内： </P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> c:\jdk1.1.6\include;c:\jdk1.1.6\include\win32  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>将配置设置为以调试模式编译 DLL。在 Project Settings 中的 Debug 下，将可执行文件设置为 java.exe（或者 
              java_g.exe，但要确保您生成了一个 _g.dll 文件）。程序参数包括包含 main 的类名。如果在 DLL 
              中设置了断点，则当调用本地方法时，执行将在适当的地方停止。</P>
            <P>下面是设置一个 Visual C++ 6.0 项目来调试本地方法的步骤。</P>
            <OL>
              <LI>在 Visual C++ 中创建一个 Win32 DLL 项目，并将 .c 和 .h 文件添加到这个项目中。 </LI>
            </OL>
            <BR>
            <IMG 
border=0 alt="" src="3665b282.jpg" width=561 height=400> <BR>
            <BR>
            <IMG border=0 
alt="" src="3665b283.jpg" width=426 height=295> <BR>
            <UL>
              <LI>在 Tools 下拉式菜单的 Options 设置下设置 JDK 的 include 目录。下面的对话框显示了这些目录。 </LI>
            </UL>
            <BR>
            <IMG border=0 alt="" src="3665b284.jpg" width=417 height=319> <BR>
            <UL>
              <LI>选择 Build 下拉式菜单下的 Build MyNative.dll 来建立这个项目。确保将项目的活动配置设置为调试（这通常是缺省值）。
              <LI>在 Project Settings 下，设置 Debug 选项卡来调用适当的 Java 解释器，如下所示： </LI>
            </UL>
            <BR>
            <IMG 
border=0 alt="" src="3665b285.jpg" width=577 height=372> <BR>
            <P>当执行这个程序时，忽略“在 java.exe 中找不到任何调试信息”的消息。当调用本地方法时，在 C 代码中设置的任何断点将在适当的地方停止 Java 
              程序的执行。</P>
            <BR>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD><IMG alt="" src="blue_rule.gif" width="100%" 
height=1><BR>
                  <IMG border=0 alt="" src="c.gif" width=8 
height=6></TD>
                </TR>
              </TBODY>
            </TABLE>
            <TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
              <TBODY>
                <TR align=right>
                  <TD><IMG alt="" src="c.gif" width="100%" height=4><BR>
                    <TABLE cellSpacing=0 cellPadding=0 border=0>
                      <TBODY>
                        <TR>
                          <TD vAlign=middle><IMG border=0 alt="" 
src="u_bold.gif" width=16 height=16><BR></TD>
                          <TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#main"><B>回页首</B></A></TD>
                        </TR>
                      </TBODY>
                  </TABLE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <BR>
            <P><A name=N10209><SPAN class=atitle>其他信息</SPAN></A></P>
            <BLOCKQUOTE><B>JNI 方法和 C++</B> </BLOCKQUOTE>
            <P>上面这些示例说明了如何在 C 源文件中使用 JNI 方法。如果使用 C++，则请将相应方法的格式从：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> (*env)-&gt;JNIMethod( env, .... );  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>更改为：</P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD class=code-outline><PRE class=displaycode> env-&gt;JNIMethod( ... );  
</PRE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <P>在 C++ 中，JNI 函数被看作是 JNIEnv 类的成员方法。</P>
            <BLOCKQUOTE><B>字符串和国家语言支持</B> </BLOCKQUOTE>
            <P>本文中使用的技术用 UTF 方法来转换字符串。使用这些方法只是为了方便起见，如果应用程序需要国家语言支持 (NLS)，则不能使用这些方法。有关在 
              Windows 和 NLS 环境中处理 Java 字符串正确方法，请参标题为 NLS Strings and JNI 的一篇论文。</P>
            <BR>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD><IMG alt="" src="blue_rule.gif" width="100%" 
height=1><BR>
                  <IMG border=0 alt="" src="c.gif" width=8 
height=6></TD>
                </TR>
              </TBODY>
            </TABLE>
            <TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
              <TBODY>
                <TR align=right>
                  <TD><IMG alt="" src="c.gif" width="100%" height=4><BR>
                    <TABLE cellSpacing=0 cellPadding=0 border=0>
                      <TBODY>
                        <TR>
                          <TD vAlign=middle><IMG border=0 alt="" 
src="u_bold.gif" width=16 height=16><BR></TD>
                          <TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#main"><B>回页首</B></A></TD>
                        </TR>
                      </TBODY>
                  </TABLE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <BR>
            <P><A name=N1022F><SPAN class=atitle>小结</SPAN></A></P>
            <P>本文提供的示例用最常用的数据类据（如 jint 和 jstring）说明了如何实现本地方法，并讨论了 Windows 
              特定的几个问题，如显示字符串。本文提供的示例并未包括全部 JNI，JNI 还包括其他参数类型，如 jfloat、jdouble、jshort、jbyte 和 
              jfieldID，以及用来处理这些类型的方法。有关这个主题的详细信息，请参阅 Sun Microsystems 提供的 Java 
              本地接口规范。</P>
            <BR>
            <BR>
            <P><A name=author><SPAN class=atitle>关于作者</SPAN></A></P>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR>
                  <TD colSpan=3><IMG alt="" src="c.gif" width="100%" 
height=5></TD>
                </TR>
                <TR vAlign=top align=left>
                  <TD><P></P></TD>
                  <TD><IMG alt="" src="c.gif" width=4 height=5></TD>
                  <TD width="100%"><P>David Wendt 是 IBM WebSphere Studio 的一名程序员，该工作室位于北卡罗莱纳州的 Research Triangle 
                      Park。可以通过 wendt@us.ibm.com 与他联系。</P></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <BR>
            <BR>
            <P class=no-print><SPAN class=atitle><A name=rate>对本文的评价</A></SPAN></P>
            <SPAN 
class=no-print>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
                <TR vAlign=top>
                  <TD><FORM action=https://www.ibm.com/developerworks/secure/cnratings.jsp 
method=get>
                      <INPUT type=hidden value="在 Windows 中实现 Java 本地方法" 
name=ArticleTitle>
                      <INPUT type=hidden value="Java technology" name=Zone>
                      <INPUT 
type=hidden value=http://www.ibm.com/developerworks/cn/thankyou/ 
name=RedirectURL>
                      <INPUT type=hidden value=china name=localsite>
<INPUT type=hidden 
value=http://www.ibm.com/developerworks/cn/java/jnimthds/index.html name=url>
                      <TABLE cellSpacing=0 cellPadding=0 border=0>
                        <TBODY>
                          <TR>
                            <TD><IMG border=0 alt="" src="c.gif" width=100 
height=8></TD>
                          </TR>
                          <TR vAlign=top>
                            <TD><INPUT type=radio value=1 name=Rating>
                              太差！ (1)</TD>
                          </TR>
                          <TR vAlign=top>
                            <TD><INPUT type=radio value=2 name=Rating>
                              需提高 (2)</TD>
                          </TR>
                          <TR vAlign=top>
                            <TD><INPUT type=radio value=3 name=Rating>
                              一般；尚可 (3)</TD>
                          </TR>
                          <TR vAlign=top>
                            <TD><INPUT type=radio value=4 name=Rating>
                              好文章 (4)</TD>
                          </TR>
                          <TR vAlign=top>
                            <TD><INPUT type=radio value=5 
name=Rating>
                              真棒！(5)</TD>
                          </TR>
                        </TBODY>
                      </TABLE>
                      <BR>
                      <B>建议？</B><BR><TEXTAREA id=Comments wrap=virtual rows=5 cols=60 name=Comments>&nbsp;</TEXTAREA>
                      <BR>
                      <BR>
                      <INPUT type=submit value=反馈意见>
                  </FORM></TD>
                </TR>
                <TR vAlign=top>
                  <TD bgColor=#ffffff><IMG border=0 alt="" src="c.gif" width=100 
height=8></TD>
                </TR>
              </TBODY>
            </TABLE>
            </SPAN><SPAN class=no-print>
            <TABLE cellSpacing=0 cellPadding=0 align=right>
              <TBODY>
                <TR align=right>
                  <TD><IMG alt="" src="c.gif" width="100%" height=8><BR>
                    <TABLE cellSpacing=0 cellPadding=0 border=0>
                      <TBODY>
                        <TR>
                          <TD vAlign=middle><IMG border=0 alt="" 
src="u_bold.gif" width=16 height=16><BR></TD>
                          <TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/jnimthds/index.html#main"><B>回页首</B></A></TD>
                        </TR>
                      </TBODY>
                  </TABLE></TD>
                </TR>
              </TBODY>
            </TABLE>
            <BR>
            <BR>
          </SPAN></TD>
          <TD width=10><IMG alt="" src="c.gif" width=10 
height=1></TD>
        </TR>
          </TBODY>
      </TABLE>
      <SPAN class=small>IBM 公司保留在 developerWorks 
      网站上发表的内容的著作权。未经IBM公司或原始作者的书面明确许可，请勿转载。如果您希望转载，请通过 <A 
href="https://www.ibm.com/developerworks/secure/reprintreq.jsp?domain=dwchina">提交转载请求表单</A> 联系我们的编辑团队。</SPAN></TD></TR></TBODY></TABLE><!--FOOTER_BEGIN--><!-- IBM FOOTER -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
    <TR>
      <TD class=bbg height=19><TABLE cellSpacing=0 cellPadding=0 border=0>
          <TBODY>
            <TR>
              <TD><SPAN class=spacer>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><A class=mainlink 
href="index.shtml">关于 IBM</A></TD>
              <TD class=footer-divider width=27>&nbsp;&nbsp;&nbsp;&nbsp;</TD>
              <TD><A class=mainlink 
href="index.shtml">隐私条约</A></TD>
              <TD class=footer-divider width=27>&nbsp;&nbsp;&nbsp;&nbsp;</TD>
              <TD><A class=mainlink href="http://www.ibm.com/contact/cn/">联系 
                IBM</A></TD>
            </TR>
          </TBODY>
      </TABLE></TD>
    </TR>
  </TBODY>
</TABLE><!-- end footer --> 

<NOSCRIPT>
</NOSCRIPT><!--FOOTER_END--><!--XSLT stylesheet used to transform this file:  dw-document-html-5.8.xsl--><!--EndFragment-->
</BODY>
</HTML>