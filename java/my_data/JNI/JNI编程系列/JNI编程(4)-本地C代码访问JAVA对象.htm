<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>JNI编程-本地C代码访问JAVA对象</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<H1 
style='FONT-SIZE: 24px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; MARGIN: 0px 0px 5px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.5em; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-rendering: optimizeLegibility; text-decoration-style: initial; text-decoration-color: initial'>IntelliJ 
IDEA 平台下 JNI 编程（四）—本地 C 代码访问 JAVA 对象</H1>
<DIV class=article_meta 
style='FONT-SIZE: 14px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(211,211,211) 1px dashed; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(153,153,153); PADDING-BOTTOM: 8px; FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>
<DIV style="MARGIN-BOTTOM: 5px"><SPAN class=timestamp 
style="MARGIN-RIGHT: 5px">时间&nbsp;2017-03-22 21:34:55<SPAN 
class=Apple-converted-space>&nbsp;</SPAN></SPAN><SPAN class=from 
style="MARGIN-RIGHT: 5px"><I class=icon-globe 
style="TEXT-DECORATION: ; HEIGHT: auto; FONT-FAMILY: FontAwesome; WIDTH: auto; VERTICAL-ALIGN: baseline; BACKGROUND-IMAGE: none; BACKGROUND-REPEAT: repeat; BACKGROUND-POSITION: 0px 0px; FONT-WEIGHT: normal; FONT-STYLE: normal; MARGIN-TOP: 0px; DISPLAY: inline; LINE-HEIGHT: normal; MARGIN-RIGHT: 0px; -webkit-font-smoothing: antialiased"></I><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A class="cut cut28 from" 
style="OVERFLOW: hidden; TEXT-DECORATION: none; MAX-WIDTH: 28%; WHITE-SPACE: nowrap; TEXT-OVERFLOW: ellipsis; WORD-BREAK: keep-all; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; DISPLAY: inline; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.tuicool.com/sites/vQZRB3" target=_blank>CSDN博客</A></SPAN></DIV>
<DIV class=source><I style="FLOAT: left; FONT-STYLE: normal">原文</I>&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A class="cut cut70" 
style="OVERFLOW: hidden; TEXT-DECORATION: none; MAX-WIDTH: 69%; WHITE-SPACE: nowrap; TEXT-OVERFLOW: ellipsis; WORD-BREAK: keep-all; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; DISPLAY: inline-block; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://blog.csdn.net/huachao1001/article/details/64924057?utm_source=tuicool&amp;utm_medium=referral">http://blog.csdn.net/huachao1001/article/details/64924057</A></DIV>
<DIV><SPAN style="MARGIN-RIGHT: 5px">主题</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.tuicool.com/topics/11070076" target=_blank><SPAN 
class=new-label 
style="FONT-SIZE: 0.9em; TEXT-DECORATION: none; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; COLOR: rgb(120,120,120); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; DISPLAY: inline-block; LINE-HEIGHT: 16px; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(242,242,242); MARGIN-RIGHT: 5px">JNI</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN></A><A 
style="TEXT-DECORATION: none; COLOR: rgb(51,51,51); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="http://www.tuicool.com/topics/11080102" target=_blank><SPAN 
class=new-label 
style="FONT-SIZE: 0.9em; TEXT-DECORATION: none; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; COLOR: rgb(120,120,120); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; DISPLAY: inline-block; LINE-HEIGHT: 16px; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(242,242,242); MARGIN-RIGHT: 5px">IntelliJ 
IDEA</SPAN></A></DIV></DIV>
<DIV id=nei class=article_body 
style='WORD-WRAP: break-word; MARGIN-BOTTOM: 0px; FONT-SIZE: 16px; FONT-FAMILY: "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; OVERFLOW-X: hidden; TEXT-TRANSFORM: none; WORD-BREAK: break-all; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); PADDING-BOTTOM: 25px; FONT-STYLE: normal; PADDING-TOP: 20px; PADDING-LEFT: 5px; MIN-HEIGHT: 340px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.7em; PADDING-RIGHT: 5px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'>
<DIV style="FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">本文主要针对C代码中访问JVM中对象的普通变量、静态属性、普通函数、静态函数进行举例讲解，通过本文的学习将进一步理解JNIEnv在本地代码和Java之间的重要性。有了前面几篇文章的基础，学习起本文来将更容易。好了，接下来往下学习吧~。</P>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">1. 
访问实例对象的属性</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">下面实现一个简单的功能：在本地C代码中，修改Java类实例的属性值。首先在Java类中定义2个简单的属性，代码如下：</P><PRE class="prettyprint hljs cs" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>package com.huachao.java;

<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">/**
 * Created by HuaChao on 2017/03/22.
 */</SPAN>
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">HelloJNI</SPAN> { 
    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">int</SPAN> number = <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">88</SPAN>;
    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> String message = <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Hello from Java"</SPAN>;


    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> {
        System.loadLibrary(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"HelloJNI"</SPAN>);
    }

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> native <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">modifyField</SPAN>(<SPAN class=hljs-params></SPAN>)</SPAN>;

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">main</SPAN>(<SPAN class=hljs-params>String[] args</SPAN>) </SPAN>{
        HelloJNI obj = <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> HelloJNI();
        obj.modifyField();
        System.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">out</SPAN>.println(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Java类中，number的值为："</SPAN> + obj.number);
        System.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">out</SPAN>.println(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Java类中，message属性为："</SPAN> + obj.message);
    }

}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">上面代码很简单，就是定义了一个本地函数modifyField()，还有两个属性number和message。接下来，生成c代码的头文件后，c代码对应的函数代码如下：</P><PRE class="prettyprint hljs cpp" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=hljs-meta style="COLOR: rgb(31,113,153)">#<SPAN class=hljs-meta-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">include</SPAN><SPAN class=hljs-meta-string style="COLOR: rgb(77,153,191)">&lt;jni.h&gt;</SPAN></SPAN>
<SPAN class=hljs-meta style="COLOR: rgb(31,113,153)">#<SPAN class=hljs-meta-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">include</SPAN> <SPAN class=hljs-meta-string style="COLOR: rgb(77,153,191)">&lt;stdio.h&gt;</SPAN></SPAN>
<SPAN class=hljs-meta style="COLOR: rgb(31,113,153)">#<SPAN class=hljs-meta-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">include</SPAN> <SPAN class=hljs-meta-string style="COLOR: rgb(77,153,191)">"com_huachao_java_HelloJNI.h"</SPAN></SPAN>

<SPAN class=hljs-function>JNIEXPORT <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> JNICALL <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">Java_com_huachao_java_HelloJNI_modifyField</SPAN>
  <SPAN class=hljs-params>(JNIEnv * env,jobject thisObj)</SPAN></SPAN>{
       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//获取实例对象类的引用</SPAN>
       jclass thisClass = (*env)-&gt;GetObjectClass(env, thisObj);

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 获取实例对象的nunber对应的属性ID，int类型</SPAN>
       jfieldID fidNumber = (*env)-&gt;GetFieldID(env, thisClass, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"number"</SPAN>, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"I"</SPAN>);
       <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (<SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">NULL</SPAN> == fidNumber) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">//获取实例对象中对应的属性的值</SPAN>
       jint number = (*env)-&gt;GetIntField(env, thisObj, fidNumber);
       <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">printf</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"在C代码中，number属性值为:%d\n"</SPAN>, number);

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 修改number的值</SPAN>
       number = <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">99</SPAN>;
       (*env)-&gt;SetIntField(env, thisObj, fidNumber, number);

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 同理，获取类对象中的message的属性ID</SPAN>
       jfieldID fidMessage = (*env)-&gt;GetFieldID(env, thisClass, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"message"</SPAN>, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Ljava/lang/String;"</SPAN>);
       <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (<SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">NULL</SPAN> == fidMessage) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 获取给定属性ID的属性对象</SPAN>
       jstring message = (*env)-&gt;GetObjectField(env, thisObj, fidMessage);

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 创建C语言中的字符串</SPAN>
       <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">const</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">char</SPAN> *cStr = (*env)-&gt;GetStringUTFChars(env, message, <SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">NULL</SPAN>);
       <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (<SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">NULL</SPAN> == cStr) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;

       <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">printf</SPAN>(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"在C代码中, 字符串message为：%s\n"</SPAN>, cStr);
       (*env)-&gt;ReleaseStringUTFChars(env, message, cStr);

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 创建新的C字符串，并赋值给实例对象的属性</SPAN>
       message = (*env)-&gt;NewStringUTF(env, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Hello from C"</SPAN>);
       <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (<SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">NULL</SPAN> == message) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;

       <SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">// 修改实例对象的属性值</SPAN>
       (*env)-&gt;SetObjectField(env, thisObj, fidMessage, message);
 }</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">编译为dll文件后，运行结果如下：</P><PRE class="prettyprint hljs cmake" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>Java类中，number的值为：<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">99</SPAN>
Java类中，<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">message</SPAN>属性为：Hello from C
在C代码中，number属性值为:<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">88</SPAN>
在C代码中, 字符串<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">message</SPAN>为：Hello from Java</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">看到运行结果觉得挺奇怪，因为先调用modifyField函数，在打印结果中先打印了Java中的代码后打印C中的代码。现在我也还不清楚具体原因，但从结果上看，是先执行本地代码的。因此打印的先后顺序暂时可不管他，我目前认为是c的输出流和Java的输出流在输出到IntelliJ的控制台时合并的先后顺序造成的吧，如果有小伙伴知道原因，可以在评论中指出。</P>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">下面对代码进行解释，访问实例对象的属性可分为如下步骤：</P>
<OL 
style="FONT-SIZE: 16px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.75em 25px; LINE-HEIGHT: 1.7em; PADDING-RIGHT: 0px">
  <LI style="FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">首先是通过<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>jobject</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>指代的实例对象获取实例对象在Java虚拟机中对应的<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Class</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>对象，即对应于<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>jclass</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>类型。这一步通过调用<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JNIEnv</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>对象的<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>jclass 
  GetObjectClass(JNIEnv *env, jobject obj);</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>函数来完成。</LI>
  <LI style="FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">接下来，获取用于标识属性的ID对象，即<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>jfieldID</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>类型对象。通过调用<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JNIEnv</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>的<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>jfieldID 
  GetFieldID(JNIEnv *env, jclass cls, const char *name, const char 
  *sig);</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>函数实现。GetFieldID函数前两个参数不用解释，第三个参数是表示Java类中属性的名称，第四个参数表示属性的描述符。关于描述符在<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><A 
  style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
  href="http://blog.csdn.net/huachao1001/article/details/53992258" 
  rel=nofollow,noindex target=_blank>《IntelliJ IDEA平台下JNI编程（二）—类型映射》</A><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>已经做过介绍，不清楚的可以回去查阅。</LI>
  <LI style="FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">接下来是根据属性的ID获取属性的值，通过调用<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JNIEnv</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>的<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>NativeType 
  Get&lt;type&gt;Field(JNIEnv *env, jobject obj, jfieldID fieldID);</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>来实现。此时可获取Java实例对象的的属性。</LI>
  <LI style="FONT-SIZE: 16px; LINE-HEIGHT: 1.7em">如果需要对实例对象的属性进行修改，调用<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JNIEnv</CODE><SPAN 
  class=Apple-converted-space>&nbsp;</SPAN>的<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><CODE 
  style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>void 
  Set&lt;type&gt;Field(JNIEnv *env, jobject obj, jfieldID fieldID, NativeType 
  value);</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>实现。</LI></OL>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">可以看到，在C代码中访问Java实例对象的属性与Java中通过反射的方法访问非常类似。只是这里用到了ID的方式来进行访问，而不是Java反射中的Field对象来访问。这主要是在跨越两种语言相互访问内存时，通过唯一标识码来间接访问效率更高也更简单。</P>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">2. 
访问类的静态变量</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">因为静态变量是属于类对象，即Class对象。因此在访问静态变量时，c代码获取到对应的jclass对象后，即可访问。下面通过一个简单例子说明，首先在HelloJNI.java类中添加一个静态变量。</P><PRE class="prettyprint hljs cpp" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">double</SPAN> price = <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">55.66</SPAN>;</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">在c代码的<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Java_com_huachao_java_HelloJNI_modifyField</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>中，代码如下：</P><PRE class="prettyprint hljs livescript" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>JNIEXPORT <SPAN class=hljs-literal style="COLOR: rgb(120,169,96)">void</SPAN> JNICALL Java_com_huachao_java_HelloJNI_modifyField
  (JNIEnv * env,jobject thisObj){

     <SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">// 获取实例对象类的引用
       jclass thisClass = (*env)-&gt;GetObjectClass(env, thisObj);

      //</SPAN> 获取静态变量，并修改静态变量的值
      jfieldID <SPAN class=hljs-function><SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">fidNumber</SPAN> = <SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>GetStaticFieldID(env, thisClass, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"price"</SPAN>, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"D"</SPAN>);
      <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (NULL == fidNumber) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;
      jdouble <SPAN class=hljs-function><SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">number</SPAN> = <SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>GetStaticDoubleField(env, thisClass, fidNumber);
      printf(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"In C, the double is %f\n"</SPAN>, number);
      number = <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">77.88</SPAN>;
      <SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>SetStaticDoubleField(env, thisClass, fidNumber, number);
 }</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">运行结果如下：</P><PRE class="prettyprint hljs vbnet" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>Java类中，price的值为：<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">77.88</SPAN>
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">In</SPAN> C, the <SPAN class=hljs-built_in style="COLOR: rgb(57,115,0)">double</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">is</SPAN> <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">55.660000</SPAN></PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">静态变量的访问过程跟实例变量类似，只是对应的函数多了static部分，这里不再继续解释。</P>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">3. 
调用Java的对象方法和静态方法</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">调用Java的函数过程与访问Java属性过程一致，有了前面的经验后，学习起调用函数来更容易了。下面同样通过一个简单例子来学习。首先在Java类中，定义3个具有代表性的函数：有返回值的对象方法、无返回值的对象方法，以及有返回值的静态方法。</P><PRE class="prettyprint hljs java" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">package</SPAN> com.huachao.java;

<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">/**
 * Created by HuaChao on 2017/03/22.
 */</SPAN>
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=hljs-class><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">HelloJNI</SPAN> </SPAN>{


    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> {
        System.loadLibrary(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"HelloJNI"</SPAN>);
    }

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">native</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">nativeMethod</SPAN><SPAN class=hljs-params>()</SPAN></SPAN>;

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">int</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">sum</SPAN><SPAN class=hljs-params>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">int</SPAN> n1, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">int</SPAN> n2)</SPAN> </SPAN>{
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> n1 + n2;
    }

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">double</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">avg</SPAN><SPAN class=hljs-params>(<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">int</SPAN> n1, <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">int</SPAN> n2)</SPAN> </SPAN>{
        <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN> (<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">double</SPAN>) ((n1 + n2) * <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1.0f</SPAN> / <SPAN class=hljs-number style="COLOR: rgb(136,0,0)">2</SPAN>);
    }

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">display</SPAN><SPAN class=hljs-params>()</SPAN> </SPAN>{
        System.out.println(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"invoke display()"</SPAN>);

    }

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">main</SPAN><SPAN class=hljs-params>(String[] args)</SPAN> </SPAN>{
        HelloJNI obj = <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> HelloJNI();
        obj.nativeMethod();
    }

}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">在c代码中，同样是获取方法的id后，再调用方法。</P><PRE class="prettyprint hljs coffeescript" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>JNIEXPORT void JNICALL Java_com_huachao_java_HelloJNI_nativeMethod
  (JNIEnv * env,jobject thisObj){

     <SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN> 获取实例对象类的引用
     jclass thisClass = <SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>GetObjectClass(env, thisObj);
     <SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>获取方法ID，注意普通函数和静态函数的获取区别
     jmethodID sumId = <SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>GetMethodID(env, thisClass, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"sum"</SPAN>, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"(II)I"</SPAN>);
     jmethodID avgId = <SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>GetStaticMethodID(env, thisClass, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"avg"</SPAN>, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"(II)D"</SPAN>);
     jmethodID displayId = <SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>GetMethodID(env, thisClass, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"display"</SPAN>, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"()V"</SPAN>);

     <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (NULL == sumId) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;
     <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (NULL == avgId) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;
     <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (NULL == displayId) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;

    <SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN>调用方法，注意调用静态方程和普通方法的区别
     (*env)-&gt;CallVoidMethod(env, thisObj, displayId);
     double avgRs=<SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>CallStaticDoubleMethod(env,thisClass,avgId,<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>,<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>);
     printf(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"avg(1,3)=%f\n"</SPAN>,avgRs);
     int sumRs=<SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>CallIntMethod(env,thisObj,sumId,<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>,<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>);
     printf(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"sum(1,3)=%d\n"</SPAN>,sumRs);
 }</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">运行结果如下：</P><PRE class="prettyprint hljs erlang" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>invoke display()
<SPAN class=hljs-function><SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">avg</SPAN><SPAN class=hljs-params>(<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>,<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>)</SPAN>=2.000000
<SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">sum</SPAN><SPAN class=hljs-params>(<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">1</SPAN>,<SPAN class=hljs-number style="COLOR: rgb(136,0,0)">3</SPAN>)</SPAN>=4</SPAN></PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">代码中解释很清楚了，这里就不再解释。</P>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">4. 
调用父类中被覆盖的方法</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">构造一个简单的继承关系：</P><PRE class="prettyprint hljs cs" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>package com.huachao.java;

<SPAN class=hljs-comment style="COLOR: rgb(136,136,136)">/**
 * Created by HuaChao on 2017/03/22.
 */</SPAN>
<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">Parent</SPAN> {
    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">protected</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">sayHello</SPAN>(<SPAN class=hljs-params></SPAN>) </SPAN>{
        System.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">out</SPAN>.println(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Hello in Parent"</SPAN>);
    }
}

<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">class</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">HelloJNI</SPAN> {


    <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> {
        System.loadLibrary(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"HelloJNI"</SPAN>);
    }

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">sayHello</SPAN>(<SPAN class=hljs-params></SPAN>) </SPAN>{
        System.<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">out</SPAN>.println(<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"Hello in Child"</SPAN>);
    }

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">private</SPAN> native <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">nativeMethod</SPAN>(<SPAN class=hljs-params></SPAN>)</SPAN>;

    <SPAN class=hljs-function><SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">public</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">static</SPAN> <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">void</SPAN> <SPAN class=hljs-title style="FONT-WEIGHT: bold; COLOR: rgb(136,0,0)">main</SPAN>(<SPAN class=hljs-params>String[] args</SPAN>) </SPAN>{
        HelloJNI obj = <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">new</SPAN> HelloJNI();
        obj.nativeMethod();
    }

}</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">在c代码中，通过子类的实例调用父类的被覆盖的函数方法如下：</P><PRE class="prettyprint hljs coffeescript" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>JNIEXPORT void JNICALL Java_com_huachao_java_HelloJNI_nativeMethod
  (JNIEnv * env,jobject thisObj){

     <SPAN class=hljs-regexp style="COLOR: rgb(188,96,96)">//</SPAN> 在JVM中查找指定的Class对象
     jclass parentClass=<SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>FindClass( env,<SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"com/huachao/java/Parent"</SPAN>);
     jmethodID sayHelloId = <SPAN class=hljs-function><SPAN class=hljs-params>(*env)</SPAN>-&gt;</SPAN>GetMethodID(env, parentClass, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"sayHello"</SPAN>, <SPAN class=hljs-string style="COLOR: rgb(136,0,0)">"()V"</SPAN>);
     <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">if</SPAN> (NULL == sayHelloId) <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">return</SPAN>;

     (*env)-&gt;CallNonvirtualVoidMethod(env, thisObj, parentClass,sayHelloId);

 }</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">运行结果如下：</P><PRE class="hljs lua" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 0.75em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'>Hello <SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">in</SPAN> Parent</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">注意GetMethodID函数，因为传入的是<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>com/huachao/java/Parent</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>对应的Class对象，因此返回的ID是指<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>com/huachao/java/Parent</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>类中的<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sayHello</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>函数。调用父类的函数通过<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>CallNonvirtual&lt;TYPE&gt;Method</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>来实现。<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>CallNonvirtual&lt;TYPE&gt;Method</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>函数有如下几种原型：</P><PRE class="prettyprint hljs elm" style='WORD-WRAP: break-word; FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: pre; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; WORD-BREAK: break-all; COLOR: rgb(68,68,68); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; PADDING-LEFT: 0.5em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: medium none; DISPLAY: block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(246,246,246); border-radius: 4px'><SPAN class=hljs-type style="COLOR: rgb(136,0,0)">NativeType</SPAN> <SPAN class=hljs-type style="COLOR: rgb(136,0,0)">CallNonvirtual</SPAN>&lt;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">type</SPAN>&gt;<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">Method</SPAN>(<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">JNIEnv</SPAN> *env, jobject obj, jclass cls, jmethodID methodID, ...);
<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">NativeType</SPAN> <SPAN class=hljs-type style="COLOR: rgb(136,0,0)">CallNonvirtual</SPAN>&lt;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">type</SPAN>&gt;<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">MethodA</SPAN>(<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">JNIEnv</SPAN> *env, jobject obj, jclass cls, jmethodID methodID, const jvalue *args);
<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">NativeType</SPAN> <SPAN class=hljs-type style="COLOR: rgb(136,0,0)">CallNonvirtual</SPAN>&lt;<SPAN class=hljs-keyword style="FONT-WEIGHT: 700; COLOR: rgb(51,51,51)">type</SPAN>&gt;<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">MethodV</SPAN>(<SPAN class=hljs-type style="COLOR: rgb(136,0,0)">JNIEnv</SPAN> *env, jobject obj, jclass cls, jmethodID methodID, va_list args);</PRE>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">学到这里会发现，c代码中要想访问JVM中对象，必须通过<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JNIEnv</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>提供的函数来间接完成。这也进一步加深了对<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='FONT-SIZE: 14px; BORDER-TOP: medium none; FONT-FAMILY: Menlo, Monaco, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; FONT-WEIGHT: 600; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>JNIEnv</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>的了解。</P></DIV></DIV></body>
</html>
