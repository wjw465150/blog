<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Javastruct</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: 宋体, Arial, Helvetica, sans-serif;
	font-size: 10pt;
}
</style>

</head>

<body>
<H1 
style="FONT-SIZE: x-large; MAX-WIDTH: 700px; BORDER-TOP: 0px; FONT-FAMILY: arial, sans-serif; BORDER-RIGHT: 0px; FONT-VARIANT: normal; BACKGROUND-IMAGE: none; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">What 
is Javastruct</H1>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">javastruct 
is a library for using java objects as C or C++ structs.</P>
<H1 
style="FONT-SIZE: x-large; MAX-WIDTH: 700px; BORDER-TOP: 0px; FONT-FAMILY: arial, sans-serif; BORDER-RIGHT: 0px; FONT-VARIANT: normal; BACKGROUND-IMAGE: none; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
name=What_is_it_used_for?></A>What is it used for?</H1>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
style="COLOR: rgb(0,0,204)" 
href="http://code.google.com/p/javastruct/wiki/HowToUseJavaStruct" 
rel=nofollow>For details please refer to Wiki page</A></P>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This 
library could be useful for java applications communicating with embedded 
devices or other C, C++ applications. It could also be used as a simple but 
space efficent serialization method.</P>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Primitives, 
arrays, C Strings and Nested classes are supported. Big Endian and Little Endian 
byte orders are also supported. javastruct can also handle fields whose length 
is defined in other fields, using ArrayLengthMarker annotation. Please refer to 
examples and documentation in wiki section.</P>
<H1 
style="FONT-SIZE: x-large; MAX-WIDTH: 700px; BORDER-TOP: 0px; FONT-FAMILY: arial, sans-serif; BORDER-RIGHT: 0px; FONT-VARIANT: normal; BACKGROUND-IMAGE: none; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
name=How_to_use></A>How to use JavaStruct</H1>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Classes 
should be marked as StructClass annotation and fields must be annotated to be 
used as struct fields.</P>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Look 
at the test classes to learn usage in detail. A Simple Example:</P><PRE class=prettyprint style="OVERFLOW: auto; MAX-WIDTH: 70em; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; FONT: 12px Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Lucida Console', monospace; PADDING-LEFT: 0.5em; LETTER-SPACING: normal; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(238,238,238); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=lit style="COLOR: rgb(0,102,102)">@StructClass</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR></SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">public</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">class</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">Foo</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">{</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=lit style="COLOR: rgb(0,102,102)">@StructField</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">(</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">order </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">=</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=lit style="COLOR: rgb(0,102,102)">0</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">)</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">public</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">byte</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> b</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">;</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=lit style="COLOR: rgb(0,102,102)">@StructField</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">(</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">order </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">=</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=lit style="COLOR: rgb(0,102,102)">1</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">)</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">public</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">int</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> i</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">;</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR></SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">}</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR><BR></SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">try</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">{</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=com style="COLOR: rgb(136,0,0)">// Pack the class as a byte buffer</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">Foo</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> f </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">=</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">new</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">Foo</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">();</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; f</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">.</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">b </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">=</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">(</SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">byte</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">)</SPAN><SPAN class=lit style="COLOR: rgb(0,102,102)">1</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">;</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; f</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">.</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">i </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">=</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=lit style="COLOR: rgb(0,102,102)">1</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">;</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">byte</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">[]</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> b </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">=</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">JavaStruct</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">.</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">pack</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">(</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">f</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">);</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; <BR>&nbsp; &nbsp; </SPAN><SPAN class=com style="COLOR: rgb(136,0,0)">// Unpack it into an object</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">Foo</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> f2 </SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">=</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">new</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> </SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">Foo</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">();</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR>&nbsp; &nbsp; </SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">JavaStruct</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">.</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">unpack</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">(</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)">f2</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">,</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> b</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">);</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR></SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">}</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR></SPAN><SPAN class=kwd style="COLOR: rgb(0,0,136)">catch</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">(</SPAN><SPAN class=typ style="COLOR: rgb(102,0,102)">StructException</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"> e</SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">){</SPAN><SPAN class=pln style="COLOR: rgb(0,0,0)"><BR></SPAN><SPAN class=pun style="COLOR: rgb(102,102,0)">}</SPAN></PRE>
<H1 
style="FONT-SIZE: x-large; MAX-WIDTH: 700px; BORDER-TOP: 0px; FONT-FAMILY: arial, sans-serif; BORDER-RIGHT: 0px; FONT-VARIANT: normal; BACKGROUND-IMAGE: none; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
name=Peformance></A>Peformance</H1>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">For 
simple classes , JavaStruct is faster than Java serialization, For complex and 
nested objects, generally same performance as Java serialization. Naturally 
JavaStruct produces 2-3 times smaller output.</P>
<H1 
style="FONT-SIZE: x-large; MAX-WIDTH: 700px; BORDER-TOP: 0px; FONT-FAMILY: arial, sans-serif; BORDER-RIGHT: 0px; FONT-VARIANT: normal; BACKGROUND-IMAGE: none; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
name=Future_Work></A>Future Work</H1>
<UL 
style="MAX-WIDTH: 62em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px arial, sans-serif; PADDING-LEFT: 25px; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
  <LI style="MARGIN-BOTTOM: 0.3em">Better naming and 
  unified Fa?ade class 
  <LI style="MARGIN-BOTTOM: 0.3em">Detailed documentation 
  <LI style="MARGIN-BOTTOM: 0.3em">ByteBuffer based struct 
  serialization (Currently it is stream based) 
  <LI style="MARGIN-BOTTOM: 0.3em">Better performance 
  <LI style="MARGIN-BOTTOM: 0.3em">More unit tests 
  <LI style="MARGIN-BOTTOM: 0.3em">Data alignment support 
  <LI style="MARGIN-BOTTOM: 0.3em">Bitfields 
  <LI style="MARGIN-BOTTOM: 0.3em">Unions.</LI></UL>
<H1 
style="FONT-SIZE: x-large; MAX-WIDTH: 700px; BORDER-TOP: 0px; FONT-FAMILY: arial, sans-serif; BORDER-RIGHT: 0px; FONT-VARIANT: normal; BACKGROUND-IMAGE: none; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
name=Requirements></A>Requirements</H1>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">- 
Any Os with Java 5 or upper JVM</P>
<H1 
style="FONT-SIZE: x-large; MAX-WIDTH: 700px; BORDER-TOP: 0px; FONT-FAMILY: arial, sans-serif; BORDER-RIGHT: 0px; FONT-VARIANT: normal; BACKGROUND-IMAGE: none; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
name=Similar_Projects></A>Similar Projects</H1>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Jean-Marie 
Dautelle's<SPAN class=Apple-converted-space>&nbsp;</SPAN><A 
style="COLOR: rgb(0,0,204)" href="http://www.javolution.org/" 
rel=nofollow>Javolution</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>also 
has an excellent struct implementation. Javolution structs uses special classes 
for representing fields, JavaStruct has a different approach and uses POJO's and 
Java 5 annotations.</P>
<P 
style="MAX-WIDTH: 64em; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px/1.25em arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"> 
          
            
  &nbsp;</P></body>
</html>