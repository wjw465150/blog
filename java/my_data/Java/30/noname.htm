<html>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>介绍BASE64、MD5、SHA、HMAC几种加密算法。</title>
<body><!--StartFragment-->本篇内容简要介绍<strong>BASE64</strong>、<strong>MD5</strong>、<strong>SHA</strong>、<strong>HMAC</strong>几种加密算法。 <br>
&nbsp;&nbsp;&nbsp; <strong>BASE64</strong>编码算法不算是真正的加密算法。 <br>
&nbsp;&nbsp;&nbsp; <strong>MD5</strong>、<strong>SHA</strong>、<strong>HMAC</strong>这三种加密算法，可谓是非可逆加密，就是不可解密的加密方法，我们称之为单向加密算法。我们通常只把他们作为加密的基础。单纯的以上三种的加密并不可靠。 <br>
<br>
<strong>BASE64</strong> <br>

按照RFC2045的定义，Base64被定义为：Base64内容传送编码被设计用来把任意序列的8位字节描述为一种不易被人直接识别的形式。（The Base64 Content-Transfer-Encoding is designed to represent arbitrary
 sequences of octets in a form that need not be humanly readable.） <br>
常见于邮件、http加密，截取http信息，你就会发现登录操作的用户名、密码字段通过BASE64加密的。 <br>
<br>
<IMG src="ab497a43-1c90-3053-b196-1db7af6cd792.jpg"> <br>
<br>
通过java代码实现如下： <br>
<div class="dp-highlighter" >
  <div class="bar">
    <div class="tools">Java代码
      <div role=button tabindex="0" title="/javascripts/syntaxhighlighter/clipboard_new.swf" style="OVERFLOW: hidden; CURSOR: pointer; BORDER-TOP: rgb(223,223,223) 1px solid; HEIGHT: 32px; BORDER-RIGHT: rgb(223,223,223) 1px solid; WIDTH: 32px; BACKGROUND: url(chrome://flashblock/content/flash.png) no-repeat center center; MIN-WIDTH: 32px !important; BORDER-BOTTOM: rgb(223,223,223) 1px solid; MIN-HEIGHT: 32px !important; BORDER-LEFT: rgb(223,223,223) 1px solid; DISPLAY: inline-block; VISIBILITY: visible !important; -moz-box-sizing: border-box" bginactive ="url(chrome://flashblock/content/flash.png) no-repeat center" bgactive="url(chrome://flashblock/content/flashplay.png) no-repeat center" srcattribute="/javascripts/syntaxhighlighter/clipboard_new.swf"></div>
    &nbsp;<A onclick="code_favorites_do_favorite(this);return false;" title=收藏这段代码 href="javascript:void()" ><IMG class=star alt=收藏代码 src="icon_star.png"></a></div>
  </div>
  <ol class="dp-j" >
    <li><span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;BASE64解密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@param&nbsp;key</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;decryptBASE64(String&nbsp;key)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;(</span><span class="keyword">new</span><span>&nbsp;BASE64Decoder()).decodeBuffer(key);&nbsp;&nbsp;</span></span>
    <li><span>}&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;BASE64加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@param&nbsp;key</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;String&nbsp;encryptBASE64(</span><span class="keyword">byte</span><span>[]&nbsp;key)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;(</span><span class="keyword">new</span><span>&nbsp;BASE64Encoder()).encodeBuffer(key);&nbsp;&nbsp;</span></span>
    <li><span>}&nbsp;&nbsp;</span></li>
  </ol>
</div>
<br>
主要就是BASE64Encoder、BASE64Decoder两个类，我们只需要知道使用对应的方法即可。另，BASE加密后产生的字节位数是8的倍数，如果不够位数以<strong>=</strong>符号填充。 <br>
<br>
<strong>MD5</strong> <br>
  MD5 -- message-digest 
algorithm
5
（信息-摘要算法）缩写，广泛用于加密和解密技术，常用于文件校验。校验？不管文件多大，经过MD5后都能生成唯一的MD5值。好比现在的ISO校验，都是MD5校验。怎么用？当然是把ISO经过MD5后产生MD5的值。一般下载linux-ISO的朋友都见过下载链接旁边放着MD5的串。就是用来验证文件是否一致的。 <br>
<br>
<IMG src="74b43fdc-8b41-3618-ae71-98fd6bd7ea33.jpg"> <br>
<br>
通过java代码实现如下： <br>
<div class="dp-highlighter" >
  <div class="bar">
    <div class="tools">Java代码
      <div role=button tabindex="0" title="about:blank" style="OVERFLOW: hidden; CURSOR: pointer; BORDER-TOP: rgb(223,223,223) 1px solid; HEIGHT: 32px; BORDER-RIGHT: rgb(223,223,223) 1px solid; WIDTH: 32px; BACKGROUND: url(chrome://flashblock/content/flash.png) no-repeat center center; MIN-WIDTH: 32px !important; BORDER-BOTTOM: rgb(223,223,223) 1px solid; MIN-HEIGHT: 32px !important; BORDER-LEFT: rgb(223,223,223) 1px solid; DISPLAY: inline-block; VISIBILITY: visible !important; -moz-box-sizing: border-box" bginactive ="url(chrome://flashblock/content/flash.png) no-repeat center" bgactive="url(chrome://flashblock/content/flashplay.png) no-repeat center" srcattribute="about:blank"></div>
    &nbsp;<A onclick="code_favorites_do_favorite(this);return false;" title=收藏这段代码 href="javascript:void()" ><IMG class=star alt=收藏代码 src="icon_star.png"></a></div>
  </div>
  <ol class="dp-j" >
    <li><span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;MD5加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@param&nbsp;data</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;encryptMD5(</span><span class="keyword">byte</span><span>[]&nbsp;data)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;MessageDigest&nbsp;md5&nbsp;=&nbsp;MessageDigest.getInstance(KEY_MD5);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;md5.update(data);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;md5.digest();&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>}&nbsp;&nbsp;</span></li>
  </ol>
</div>
<br>
<br>
通常我们不直接使用上述MD5加密。通常将MD5产生的字节数组交给BASE64再加密一把，得到相应的字符串。 <br>
<br>
<strong>SHA</strong> <br>
SHA(Secure Hash Algorithm，安全散列算法），数字签名等密码学应用中重要的工具，被广泛地应用于电子商务等信息安全领域。虽然，SHA与MD5通过碰撞法都被破解了，<IMG src="icon_sad.gif"> 但是SHA仍然是公认的安全加密算法，较之MD5更为安全。<IMG src="icon_biggrin.gif"> <br>
<br>
<IMG src="74b43fdc-8b41-3618-ae71-98fd6bd7ea33.jpg"> <br>
<br>
通过java代码实现如下： <br>
<div class="dp-highlighter" >
  <div class="bar">
    <div class="tools">Java代码
      <div role=button tabindex="0" title="about:blank" style="OVERFLOW: hidden; CURSOR: pointer; BORDER-TOP: rgb(223,223,223) 1px solid; HEIGHT: 32px; BORDER-RIGHT: rgb(223,223,223) 1px solid; WIDTH: 32px; BACKGROUND: url(chrome://flashblock/content/flash.png) no-repeat center center; MIN-WIDTH: 32px !important; BORDER-BOTTOM: rgb(223,223,223) 1px solid; MIN-HEIGHT: 32px !important; BORDER-LEFT: rgb(223,223,223) 1px solid; DISPLAY: inline-block; VISIBILITY: visible !important; -moz-box-sizing: border-box" bginactive ="url(chrome://flashblock/content/flash.png) no-repeat center" bgactive="url(chrome://flashblock/content/flashplay.png) no-repeat center" srcattribute="about:blank"></div>
    &nbsp;<A onclick="code_favorites_do_favorite(this);return false;" title=收藏这段代码 href="javascript:void()" ><IMG class=star alt=收藏代码 src="icon_star.png"></a></div>
  </div>
  <ol class="dp-j" >
    <li><span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;SHA加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;data</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;encryptSHA(</span><span class="keyword">byte</span><span>[]&nbsp;data)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageDigest&nbsp;sha&nbsp;=&nbsp;MessageDigest.getInstance(KEY_SHA);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sha.update(data);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sha.digest();&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>}&nbsp;&nbsp;</span></li>
  </ol>
</div>
<br>
<br>
<strong>HMAC</strong> <br>
  HMAC(Hash 
Message
Authentication
Code，散列消息鉴别码，基于密钥的Hash算法的认证协议。消息鉴别码实现鉴别的原理是，用公开函数和密钥产生一个固定长度的值作为认证标识，用这个标识鉴别消息的完整性。使用一个密钥生成一个固定大小的小数据块，即MAC，并将其加入到消息中，然后传输。接收方利用与发送方共享的密钥进行鉴别认证等。 <br>
<br>
<IMG src="facd8b84-2e47-3125-872c-2e446898a1d0.jpg"> <br>
<br>
通过java代码实现如下： <br>
<div class="dp-highlighter" >
  <div class="bar">
    <div class="tools">Java代码
      <div role=button tabindex="0" title="about:blank" style="OVERFLOW: hidden; CURSOR: pointer; BORDER-TOP: rgb(223,223,223) 1px solid; HEIGHT: 32px; BORDER-RIGHT: rgb(223,223,223) 1px solid; WIDTH: 32px; BACKGROUND: url(chrome://flashblock/content/flash.png) no-repeat center center; MIN-WIDTH: 32px !important; BORDER-BOTTOM: rgb(223,223,223) 1px solid; MIN-HEIGHT: 32px !important; BORDER-LEFT: rgb(223,223,223) 1px solid; DISPLAY: inline-block; VISIBILITY: visible !important; -moz-box-sizing: border-box" bginactive ="url(chrome://flashblock/content/flash.png) no-repeat center" bgactive="url(chrome://flashblock/content/flashplay.png) no-repeat center" srcattribute="about:blank"></div>
    &nbsp;<A onclick="code_favorites_do_favorite(this);return false;" title=收藏这段代码 href="javascript:void()" ><IMG class=star alt=收藏代码 src="icon_star.png"></a></div>
  </div>
  <ol class="dp-j" >
    <li><span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;初始化HMAC密钥</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;String&nbsp;initMacKey()&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;KeyGenerator&nbsp;keyGenerator&nbsp;=&nbsp;KeyGenerator.getInstance(KEY_MAC);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;SecretKey&nbsp;secretKey&nbsp;=&nbsp;keyGenerator.generateKey();&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;encryptBASE64(secretKey.getEncoded());&nbsp;&nbsp;</span></span>
    <li><span>}&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;HMAC加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@param&nbsp;data</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@param&nbsp;key</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;encryptHMAC(</span><span class="keyword">byte</span><span>[]&nbsp;data,&nbsp;String&nbsp;key)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;SecretKey&nbsp;secretKey&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;SecretKeySpec(decryptBASE64(key),&nbsp;KEY_MAC);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;Mac&nbsp;mac&nbsp;=&nbsp;Mac.getInstance(secretKey.getAlgorithm());&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;mac.init(secretKey);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;mac.doFinal(data);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>}&nbsp;&nbsp;</span></li>
  </ol>
</div>
<br>
<br>
给出一个完整类，如下： <br>
<div class="dp-highlighter" >
  <div class="bar">
    <div class="tools">Java代码
      <div role=button tabindex="0" title="about:blank" style="OVERFLOW: hidden; CURSOR: pointer; BORDER-TOP: rgb(223,223,223) 1px solid; HEIGHT: 32px; BORDER-RIGHT: rgb(223,223,223) 1px solid; WIDTH: 32px; BACKGROUND: url(chrome://flashblock/content/flash.png) no-repeat center center; MIN-WIDTH: 32px !important; BORDER-BOTTOM: rgb(223,223,223) 1px solid; MIN-HEIGHT: 32px !important; BORDER-LEFT: rgb(223,223,223) 1px solid; DISPLAY: inline-block; VISIBILITY: visible !important; -moz-box-sizing: border-box" bginactive ="url(chrome://flashblock/content/flash.png) no-repeat center" bgactive="url(chrome://flashblock/content/flashplay.png) no-repeat center" srcattribute="about:blank"></div>
    &nbsp;<A onclick="code_favorites_do_favorite(this);return false;" title=收藏这段代码 href="javascript:void()" ><IMG class=star alt=收藏代码 src="icon_star.png"></a></div>
  </div>
  <ol class="dp-j" >
    <li><span><span class="keyword">import</span><span>&nbsp;java.security.MessageDigest;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span><span class="keyword">import</span><span>&nbsp;javax.crypto.KeyGenerator;&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">import</span><span>&nbsp;javax.crypto.Mac;&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">import</span><span>&nbsp;javax.crypto.SecretKey;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span><span class="keyword">import</span><span>&nbsp;sun.misc.BASE64Decoder;&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">import</span><span>&nbsp;sun.misc.BASE64Encoder;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;基础加密组件</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;梁栋</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@version&nbsp;1.0</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@since&nbsp;1.0</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">abstract</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;Coder&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">final</span><span>&nbsp;String&nbsp;KEY_SHA&nbsp;=&nbsp;</span><span class="string">"SHA"</span><span>;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">final</span><span>&nbsp;String&nbsp;KEY_MD5&nbsp;=&nbsp;</span><span class="string">"MD5"</span><span>;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;MAC算法可选以下多种算法</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;pre&gt;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;HmacMD5&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;HmacSHA1&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;HmacSHA256&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;HmacSHA384&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;HmacSHA512</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;/pre&gt;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">final</span><span>&nbsp;String&nbsp;KEY_MAC&nbsp;=&nbsp;</span><span class="string">"HmacMD5"</span><span>;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;BASE64解密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;decryptBASE64(String&nbsp;key)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;(</span><span class="keyword">new</span><span>&nbsp;BASE64Decoder()).decodeBuffer(key);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;BASE64加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;String&nbsp;encryptBASE64(</span><span class="keyword">byte</span><span>[]&nbsp;key)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;(</span><span class="keyword">new</span><span>&nbsp;BASE64Encoder()).encodeBuffer(key);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;MD5加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;data</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;encryptMD5(</span><span class="keyword">byte</span><span>[]&nbsp;data)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageDigest&nbsp;md5&nbsp;=&nbsp;MessageDigest.getInstance(KEY_MD5);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;md5.update(data);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;md5.digest();&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;SHA加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;data</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;encryptSHA(</span><span class="keyword">byte</span><span>[]&nbsp;data)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageDigest&nbsp;sha&nbsp;=&nbsp;MessageDigest.getInstance(KEY_SHA);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sha.update(data);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sha.digest();&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;初始化HMAC密钥</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;String&nbsp;initMacKey()&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyGenerator&nbsp;keyGenerator&nbsp;=&nbsp;KeyGenerator.getInstance(KEY_MAC);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SecretKey&nbsp;secretKey&nbsp;=&nbsp;keyGenerator.generateKey();&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;encryptBASE64(secretKey.getEncoded());&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;HMAC加密</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;data</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;Exception</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">byte</span><span>[]&nbsp;encryptHMAC(</span><span class="keyword">byte</span><span>[]&nbsp;data,&nbsp;String&nbsp;key)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SecretKey&nbsp;secretKey&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;SecretKeySpec(decryptBASE64(key),&nbsp;KEY_MAC);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mac&nbsp;mac&nbsp;=&nbsp;Mac.getInstance(secretKey.getAlgorithm());&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mac.init(secretKey);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;mac.doFinal(data);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>}&nbsp;&nbsp;</span></li>
  </ol>
</div>
<br>
<br>
再给出一个测试类： <br>
<div class="dp-highlighter" >
  <div class="bar">
    <div class="tools">Java代码
      <div role=button tabindex="0" title="about:blank" style="OVERFLOW: hidden; CURSOR: pointer; BORDER-TOP: rgb(223,223,223) 1px solid; HEIGHT: 32px; BORDER-RIGHT: rgb(223,223,223) 1px solid; WIDTH: 32px; BACKGROUND: url(chrome://flashblock/content/flash.png) no-repeat center center; MIN-WIDTH: 32px !important; BORDER-BOTTOM: rgb(223,223,223) 1px solid; MIN-HEIGHT: 32px !important; BORDER-LEFT: rgb(223,223,223) 1px solid; DISPLAY: inline-block; VISIBILITY: visible !important; -moz-box-sizing: border-box" bginactive ="url(chrome://flashblock/content/flash.png) no-repeat center" bgactive="url(chrome://flashblock/content/flashplay.png) no-repeat center" srcattribute="about:blank"></div>
    &nbsp;<A onclick="code_favorites_do_favorite(this);return false;" title=收藏这段代码 href="javascript:void()" ><IMG class=star alt=收藏代码 src="icon_star.png"></a></div>
  </div>
  <ol class="dp-j" >
    <li><span><span class="keyword">import</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;org.junit.Assert.*;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span><span class="keyword">import</span><span>&nbsp;org.junit.Test;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span><span class="comment">/**</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;梁栋</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@version&nbsp;1.0</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*&nbsp;@since&nbsp;1.0</span>&nbsp;</span>
    <li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span>
    <li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;CoderTest&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Test</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;test()&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;inputStr&nbsp;=&nbsp;<span class="string">"简单加密"</span><span>;&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(<span class="string">"原文:\n"</span><span>&nbsp;+&nbsp;inputStr);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">byte</span><span>[]&nbsp;inputData&nbsp;=&nbsp;inputStr.getBytes();&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;code&nbsp;=&nbsp;Coder.encryptBASE64(inputData);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(<span class="string">"BASE64加密后:\n"</span><span>&nbsp;+&nbsp;code);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">byte</span><span>[]&nbsp;output&nbsp;=&nbsp;Coder.decryptBASE64(code);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;outputStr&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;String(output);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(<span class="string">"BASE64解密后:\n"</span><span>&nbsp;+&nbsp;outputStr);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;验证BASE64加密解密一致性</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(inputStr,&nbsp;outputStr);&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;验证MD5对于同一内容加密是否一致</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertArrayEquals(Coder.encryptMD5(inputData),&nbsp;Coder&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.encryptMD5(inputData));&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;验证SHA对于同一内容加密是否一致</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertArrayEquals(Coder.encryptSHA(inputData),&nbsp;Coder&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.encryptSHA(inputData));&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;key&nbsp;=&nbsp;Coder.initMacKey();&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(<span class="string">"Mac密钥:\n"</span><span>&nbsp;+&nbsp;key);&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;验证HMAC对于同一内容，同一密钥加密是否一致</span><span>&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertArrayEquals(Coder.encryptHMAC(inputData,&nbsp;key),&nbsp;Coder.encryptHMAC(&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputData,&nbsp;key));&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BigInteger&nbsp;md5&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;BigInteger(Coder.encryptMD5(inputData));&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(<span class="string">"MD5:\n"</span><span>&nbsp;+&nbsp;md5.toString(</span><span class="number">16</span><span>));&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BigInteger&nbsp;sha&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;BigInteger(Coder.encryptSHA(inputData));&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(<span class="string">"SHA:\n"</span><span>&nbsp;+&nbsp;sha.toString(</span><span class="number">32</span><span>));&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BigInteger&nbsp;mac&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;BigInteger(Coder.encryptHMAC(inputData,&nbsp;inputStr));&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(<span class="string">"HMAC:\n"</span><span>&nbsp;+&nbsp;mac.toString(</span><span class="number">16</span><span>));&nbsp;&nbsp;</span></span>
    <li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span>
    <li><span>}&nbsp;&nbsp;</span></li>
  </ol>
</div>
<br>
<br>
控制台输出： <br>
<div class="dp-highlighter" >
  <div class="bar">
    <div class="tools">Console代码
      <div role=button tabindex="0" title="about:blank" style="OVERFLOW: hidden; CURSOR: pointer; BORDER-TOP: rgb(223,223,223) 1px solid; HEIGHT: 32px; BORDER-RIGHT: rgb(223,223,223) 1px solid; WIDTH: 32px; BACKGROUND: url(chrome://flashblock/content/flash.png) no-repeat center center; MIN-WIDTH: 32px !important; BORDER-BOTTOM: rgb(223,223,223) 1px solid; MIN-HEIGHT: 32px !important; BORDER-LEFT: rgb(223,223,223) 1px solid; DISPLAY: inline-block; VISIBILITY: visible !important; -moz-box-sizing: border-box" bginactive ="url(chrome://flashblock/content/flash.png) no-repeat center" bgactive="url(chrome://flashblock/content/flashplay.png) no-repeat center" srcattribute="about:blank"></div>
    &nbsp;<A onclick="code_favorites_do_favorite(this);return false;" title=收藏这段代码 href="javascript:void()" ><IMG class=star alt=收藏代码 src="icon_star.png"></a></div>
  </div>
  <ol class="dp-default" >
    <li><span><span>原文:&nbsp;&nbsp;</span></span>
    <li><span>简单加密&nbsp;&nbsp;</span>
    <li><span>BASE64加密后:&nbsp;&nbsp;</span>
    <li><span>566A5Y2V5Yqg5a+G&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>BASE64解密后:&nbsp;&nbsp;</span>
    <li><span>简单加密&nbsp;&nbsp;</span>
    <li><span>Mac密钥:&nbsp;&nbsp;</span>
    <li><span>uGxdHC+6ylRDaik++leFtGwiMbuYUJ6mqHWyhSgF4trVkVBBSQvY/a22xU8XT1RUemdCWW155Bke&nbsp;&nbsp;</span>
    <li><span>pBIpkd7QHg==&nbsp;&nbsp;</span>
    <li><span>&nbsp;&nbsp;</span>
    <li><span>MD5:&nbsp;&nbsp;</span>
    <li><span>-550b4d90349ad4629462113e7934de56&nbsp;&nbsp;</span>
    <li><span>SHA:&nbsp;&nbsp;</span>
    <li><span>91k9vo7p400cjkgfhjh0ia9qthsjagfn&nbsp;&nbsp;</span>
    <li><span>HMAC:&nbsp;&nbsp;</span>
    <li><span>2287d192387e95694bdbba2fa941009a&nbsp;&nbsp;</span></li>
  </ol>
</div>
<P>
<br>
<br>
&nbsp;&nbsp;&nbsp; BASE64的加密解密是双向的，可以求反解。 <br>
&nbsp;&nbsp;&nbsp; MD5、SHA以及HMAC是单向加密，任何数据加密后只会产生唯一的一个加密串，通常用来校验数据在传输过程中是否被修改。其中HMAC算法有一个密钥，增强了数据传输过程中的安全性，强化了算法外的不可控因素。<IMG src="icon_biggrin.gif"> <br>&nbsp;&nbsp;&nbsp; 单向加密的用途主要是为了校验数据在传输过程中是否被修改。 </P>
<P><!--EndFragment--></P>
</body>
</htm>