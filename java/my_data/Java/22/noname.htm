<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html>
<head><title>在Windows中实现Java本地方法</title>
<META NAME="KEYWORDS" CONTENT="Java, java, Java news, Java 新闻, java news, java 新闻, Java information, Java 信息, java informaion, java 信息, IBM">
<META NAME="KEYWORDS" CONTENT="Java, java, Java news, java news, Java information, java information, IBM">
<META NAME="ABSTRACT" CONTENT="本文为在 32 位 Windows 平台上实现 Java 本地方法提供了实用的示例、步骤和准则。这些示例包括传递和返回常用的数据类型。">
<meta name="dWCategory" content="papers_html">
<meta name="zone" content="Java">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<META NAME="DESCRIPTION" CONTENT="本文为在 32 位 Windows 平台上实现 Java 本地方法提供了实用的示例、步骤和准则。这些示例包括传递和返回常用的数据类型。">
<META NAME="SECURITY" CONTENT="public">
<META NAME="LAST UPDATED" CONTENT="19990407">
<STYLE type=text/css>
.input {
	background: #FFFFFF;
	color: #000000;
	font-weight: normal;
}
.iconNames {
	font-weight: 600;
	font-size: 9pt;
}
.iconBlurb {
	font-weight: 400;
	font-size: 8pt;
}
.barTitles {
	font-weight: 700;
	font-size: 9pt;
	letter-spacing: 1px;
}
.boxCaption {
	font-weight: 600;
	font-size: 9pt;
}
.boxBlurb {
	font-weight: 400;
	font-size: 8pt;
}
.zoneSection {
	font-weight: 600;
	font-size: 10pt;
}
</STYLE>
<SCRIPT LANGUAGE="JavaScript">
<!--
function nav_pulldown(list) {top.document.location.href = 
 list.options[list.selectedIndex].value;} functionwB(){var br="BR";if((navigator.userAgent.indexOf('Mozilla')!=-1)&&((navigator.userAgent.indexOf('Spoofer')==-1)&&(navigator.userAgent.indexOf('compatible')==-1))){br= 
 "NS"}return br}functionwV(br){varbv=0;bv=navigator.appVersion.substring(0,1);if(br=="IE"){(parseInt(bv));}if(br== 
  "NS"){(parseInt(bv));}returnbv;}functionwP(){var os="OS";if(navigator.userAgent.indexOf("OS/2")!=-1){os='os/2'}returnos;}b=wB();v=wV(b);o=wP();
function change_bgColor() {if (b=="NS" && v==2 && o != "os/2"){document.bgColor="#999999"}}
function gotosite() {var L = document.formSpinbox.pickWW.selectedIndex; location.href = document.formSpinbox.pickWW.options[L].value; return false;}
// end the hiding comment --> 
</SCRIPT>
<!-- <body onload="change_bgColor()" bgcolor=#ffffff marginheight=0 marginwidth=0 topmargin=0 leftmargin=0> --><!-- begin masthead table --><!-- comments header-1 #2 --><!--  alt header-3w begin -->
<META name=GENERATOR content="MSHTML 11.00.9600.18015">
</head>
<BODY>

<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
  <td width="5" rowspan="2"><SPACER type="block" width="5"></td>
  <td width="100%" valign="top" align="left"><table border="0" width="100%" cellspacing="0" cellpadding="0"><!-- 2 of 2 content tables --><!--INSERT revised content paper here -->
    </table>
      <table width="98%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td><table cellpadding="0" cellspacing="0" width="100%" border="0">
              <tr valign="top">
                <td rowspan="2" width="100%"><br>
                  <b> <font size="+1" color="#3333cc"> 在 </font> <font face="HELVETICA, HELV, ARIAL" size="+1" color="#3333cc"> Windows </font> <font size="+1" color="#3333cc"> 中实现 </font> <font face="HELVETICA, HELV, ARIAL" size="+1" color="#3333cc"> Java </font> <font size="+1" color="#3333cc"> 本地方法 </font> </b> <br>
                  <font color="#000000" size="-1"> <br>
                  </font></td>
                <td width="20%" align=right></td>
              </tr>
            </table><!-- START PAPER HERE --> <br>
            摘要
            <p>本文为在 32 位 Windows 平台上实现 Java 本地方法提供了实用的示例、步骤和准则。这些示例包括传递和返回常用的数据类型。</p>
            <p>本文中的示例使用 Sun Microsystems 公司创建的 Java Development Kit (JDK) 版本 1.1.6 和 <a href="http://java.sun.com/products/jdk/1.1/docs/guide/jni/">Java 本地接口 (JNI) 规范</a>。  
              用 C 语言编写的本地代码是用 Microsoft Visual C++ 编译器编译生成的。</p>
            <a name="Introduction"></a>
            <h4>简介</h4>
            <p>本文提供调用本地 C 代码的 Java 代码示例，包括传递和返回某些常用的数据类型。本地方法包含在特定于平台的可执行文件中。就本文中的示例而言，本地方法包含在 Windows 32 位动态链接库 (DLL) 中。</p>
            <p>不过我要提醒您，对 Java 外部的调用通常不能移植到其他平台上，在 applet 中还可能引发安全异常。实现本地代码将使您的 Java 应用程序无法通过 100% 纯 Java 测试。但是，如果必须执行本地调用，则要考虑几个准则：</p>
            <ol>
              <li>将您的所有本地方法都封装在单个类中，这个类调用单个 
              DLL。对于每种目标操作系统，都可以用特定于适当平台的版本替换这个 
              DLL。这样就可以将本地代码的影响减至最小，并有助于将以后所需的移植问题包含在内。 
              <li>本地方法要简单。尽量将您的 DLL 对任何第三方（包括 Microsoft）运行时 DLL 的依赖减到最小。使您的本地方法尽量独立，以将加载您的 DLL 和应用程序所需的开销减到最小。如果需要运行时 DLL，必须随应用程序一起提供它们。</li>
            </ol>
            <a name="Java Calling C"></a>
            <h4>Java 调用 C</h4>
            <p>对于调用 C 函数的 Java 方法，必须在 Java 类中声明一个本地方法。在本部分的所有示例中，我们将创建一个名为 MyNative 的类，并逐步在其中加入新的功能。这强调了一种思想，即将本地方法集中在单个类中，以便将以后所需的移植工作减到最少。</p>
            <b>示例 1 -- 传递参数</b>
            <p>在第一个示例中，我们将三个常用参数类型传递给本地函数：<i>String</i>、<i>int</i> 和 <i>boolean</i>。本例说明在本地 C 代码中如何引用这些参数。</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">public class MyNative
{
  public void showParms( String s, int i, boolean b )
  {
    showParms0( s, i , b );
  }

  private native void showParms0( String s, int i, boolean b );

  static
  {
    System.loadLibrary( "MyNative" );
  }
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>请注意，本地方法被声明为专用的，并创建了一个包装方法用于公用目的。这进一步将本地方法同代码的其余部分隔离开来，从而允许针对所需的平台对它进行优化。<i>static</i> 子句加载包含本地方法实现的 DLL。</p>
            <p>下一步是生成 C 代码来实现 <var>showParms0</var> 方法。此方法的 C 函数原型是通过对 .class 文件使用 javah 实用程序来创建的，而 .class 文件是通过编译 MyNative.java 文件生成的。这个实用程序可在 JDK 中找到。下面是 javah 的用法：</p>
            <xmp> javac MyNative.java（将 .java 编译为 .class）</xmp>
            <xmp> javah -jni   
              MyNative（生成 .h 文件）</xmp>
            <p>这将生成一个 MyNative.h 文件，其中包含一个本地方法原型，如下所示：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">/*
 * Class:     MyNative
 * Method:    showParms0
 * Signature: (Ljava/lang/String;IZ)V
 */
JNIEXPORT void JNICALL Java_MyNative_showParms0
  (JNIEnv *, jobject, jstring, jint, jboolean);
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>第一个参数是调用 JNI 方法时使用的 JNI Environment 指针。第二个参数是指向在此 Java 代码中实例化的 Java 对象 MyNative 的一个句柄。其他参数是方法本身的参数。请注意，MyNative.h 包括头文件 jni.h。jni.h 包含 JNI API 和变量类型（包括<i>jobject</i>、<i>jstring</i>、<i>jint</i>、<i>jboolean</i>，等等）的原型和其他声明。</p>
            <p>本地方法是在文件 MyNative.c 中用 C 语言实现的：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">#include &lt;stdio.h&gt;
#include "MyNative.h"
JNIEXPORT void JNICALL Java_MyNative_showParms0
  (JNIEnv *env, jobject obj, jstring s, jint i, jboolean b)
{
  const char* szStr = (*env)-&gt;GetStringUTFChars( env, s, 0 );
  printf( "String = [%s]\n", szStr );
  printf( "int = %d\n", i );
  printf( "boolean = %s\n", (b==JNI_TRUE ? "true" : "false") );
  (*env)-&gt;ReleaseStringUTFChars( env, s, szStr );
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>JNI API，<var>GetStringUTFChars</var>，用来根据 Java 字符串或 <i>jstring</i> 参数创建 C 字符串。这是必需的，因为在本地代码中不能直接读取 Java 字符串，而必须将其转换为 C 字符串或 Unicode。有关转换 Java 字符串的详细信息，请参阅标题为 <a href="http://www-4.ibm.com/software/developerWorks/library/jninls/jninls.html">NLS Strings and JNI</a> 的一篇论文。但是，<i>jboolean</i> 和 <i>jint</i> 值可以直接使用。</p>
            <p>MyNative.dll 是通过编译 C 源文件创建的。下面的编译语句使用 Microsoft Visual C++ 编译器：</p>
            <xmp> cl -Ic:\jdk1.1.6\include -Ic:\jdk1.1.6\include\win32 -LD MyNative.c   
              -FeMyNative.dll </xmp>
            <p>其中 c:\jdk1.1.6 是 JDK 的安装路径。</p>
            <p>MyNative.dll 已创建好，现在就可将其用于 MyNative 类了。  
              可以这样测试这个本地方法：在 MyNative 类中创建一个 <i>main</i> 方法来调用 <var>showParms</var> 方法，如下所示：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
   </font><font face="Helvetica, Helv, Arial" size="-1">public static void main( String[] args )
   {
     MyNative obj = new MyNative();
     obj.showParms( "Hello", 23, true );
     obj.showParms( "World", 34, false );
   }
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>当运行这个 Java 应用程序时，请确保 MyNative.dll 位于 Windows 的 PATH 环境变量所指定的路径中或当前目录下。当执行此 Java 程序时，如果未找到这个 DLL，您可能会看到以下的消息：</p>
            <xmp> java MyNative </xmp>
            <xmp> Can't find class MyNative </xmp>
            <p>这是因为 static 子句无法加载这个 DLL，所以在初始化 MyNative 类时引发异常。Java 解释器处理这个异常，并报告一个一般错误，指出找不到这个类。  
              如果用 <i>-verbose</i> 命令行选项运行解释器，您将看到它因找不到这个 DLL 而加载 <i>UnsatisfiedLinkError</i> 异常。</p>
            <p>如果此 Java 程序完成运行，就会输出以下内容：</p>
            <xmp> java MyNative </xmp>
            <xmp> String = [Hello] </xmp>
            <xmp> int = 23 </xmp>
            <xmp> boolean = true </xmp>
            <xmp> String = [World] </xmp>
            <xmp> int   
              = 34 </xmp>
            <xmp> boolean = false </xmp>
            <b>示例 2 -- 返回一个值</b>
            <p>本例将说明如何在本地方法中实现返回代码。  
              将这个方法添加到 MyNative 类中，这个类现在变为以下形式：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">public class MyNative
{
  public void showParms( String s, int i, boolean b )
  {
    showParms0( s, i , b );
  }
  public int hypotenuse( int a, int b )
  {
    return hyptenuse0( a, b );
  }

  private native void showParms0( String s, int i, boolean b );
  private native int  hypotenuse0( int a, int b );

  static
  {
    System.loadLibrary( "MyNative" );
  }

  /* </font><font size="-1">测试本地方法 </font><font face="Helvetica, Helv, Arial" size="-1">*/
  public static void main( String[] args )
  {
    MyNative obj = new MyNative();
    System.out.println( obj.hypotenuse(3,4) );
    System.out.println( obj.hypotenuse(9,12) );
  }
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>公用的 <var>hypotenuse</var> 方法调用本地方法 <var>hypotenuse0</var> 来根据传递的参数计算值，并将结果作为一个整数返回。这个新本地方法的原型是使用 javah 生成的。请注意，每次运行这个实用程序时，它将自动覆盖当前目录中的 MyNative.h。按以下方式执行 javah：</p>
            <xmp> javah -jni MyNative </xmp>
            <p>生成的 MyNative.h 现在包含 <var>hypotenuse0</var> 原型，如下所示：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">/*
 * Class:     MyNative
 * Method:    hypotenuse0
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *, jobject, jint, jint);
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>该方法是在 MyNative.c 源文件中实现的，如下所示：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include "MyNative.h"

JNIEXPORT void JNICALL Java_MyNative_showParms0
  (JNIEnv *env, jobject obj, jstring s, jint i, jboolean b)
{
  const char* szStr = (*env)-&gt;GetStringUTFChars( env, s, 0 );
  printf( "String = [%s]\n", szStr );
  printf( "int = %d\n", i );
  printf( "boolean = %s\n", (b==JNI_TRUE ? "true" : "false") );
  (*env)-&gt;ReleaseStringUTFChars( env, s, szStr );
}

JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *env, jobject obj, jint a, jint b)
{
  int rtn = (int)sqrt( (double)( (a*a) + (b*b) ) );
  return (jint)rtn;
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>再次请注意，<i>jint</i> 和 <i>int</i> 值是可互换的。  
              使用相同的编译语句重新编译这个 DLL：</p>
            <xmp> cl -Ic:\jdk1.1.6\include -Ic:\jdk1.1.6\include\win32 -LD MyNative.c   
              -FeMyNative.dll </xmp>
            <p>现在执行 java MyNative 将输出 5 和 15 作为斜边的值。</p>
            <b>示例 3 -- 静态方法</b>
            <p>您可能在上面的示例中已经注意到，实例化的 MyNative 对象是没必要的。实用方法通常不需要实际的对象，通常都将它们创建为静态方法。本例说明如何用一个静态方法实现上面的示例。更改 MyNative.java 中的方法签名，以使它们成为静态方法：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
  </font><font face="Helvetica, Helv, Arial" size="-1">public static int hypotenuse( int a, int b )
  {
    return hypotenuse0(a,b);
  }
  ...
  private static native int  hypotenuse0( int a, int b );
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>现在运行 javah 为 <var>hypotenuse0</var> 创建一个新原型，生成的原型如下所示：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">/*
 * Class:     MyNative
 * Method:    hypotenuse0
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *, jclass, jint, jint);
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>C 源代码中的方法签名变了，但代码还保持原样：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">JNIEXPORT jint JNICALL Java_MyNative_hypotenuse0
  (JNIEnv *env, jclass cls, jint a, jint b)
{
  int rtn = (int)sqrt( (double)( (a*a) + (b*b) ) );
  return (jint)rtn;
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>本质上，<i>jobject</i> 参数已变为 <i>jclass</i> 参数。此参数是指向 MyNative.class 的一个句柄。<i>main</i> 方法可更改为以下形式：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
  </font><font face="Helvetica, Helv, Arial" size="-1">public static void main( String[] args )
  {
    System.out.println( MyNative.hypotenuse( 3, 4 ) );
    System.out.println( MyNative.hypotenuse( 9, 12 ) );
  }

</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>因为方法是静态的，所以调用它不需要实例化 MyNative 对象。本文后面的示例将使用静态方法。</p>
            <b>示例 4 -- 传递数组</b>
            <p>本例说明如何传递数组型参数。本例使用一个基本类型，<i>boolean</i>，并将更改数组元素。下一个示例将访问 <i>String</i>（非基本类型）数组。将下面的方法添加到 MyNative.java 源代码中：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
  </font><font face="Helvetica, Helv, Arial" size="-1">public static void setArray( boolean[] ba )
  {
    for( int i=0; i &lt; ba.length; i++ )
      ba[i] = true;
    setArray0( ba );
  }
  ...
  private static native void setArray0( boolean[] ba );
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>在本例中，布尔型数组被初始化为 true，本地方法将把特定的元素设置为 false。同时，在 Java 源代码中，我们可以更改 <i>main</i> 以使其包含测试代码：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
    </font><font face="Helvetica, Helv, Arial" size="-1">boolean[] ba = new boolean[5];
    MyNative.setArray( ba );
    for( int i=0; i &lt; ba.length; i++ )
      System.out.println( ba[i] );
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>在编译源代码并执行 javah 以后，MyNative.h 头文件包含以下的原型：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">/*
 * Class:     MyNative
 * Method:    setArray0
 * Signature: ([Z)V
 */
JNIEXPORT void JNICALL Java_MyNative_setArray0
  (JNIEnv *, jclass, jbooleanArray);
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>请注意，布尔型数组是作为单个名为 <i>jbooleanArray</i> 的类型创建的。  
              基本类型有它们自已的数组类型，如 <i>jintArray</i> 和 <i>jcharArray</i>。  
              非基本类型的数组使用 <i>jobjectArray</i> 类型。下一个示例中包括一个 <i>jobjectArray</i>。这个布尔数组的数组元素是通过 JNI 方法 <var>GetBooleanArrayElements</var> 来访问的。  
              针对每种基本类型都有等价的方法。这个本地方法是如下实现的：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">JNIEXPORT void JNICALL Java_MyNative_setArray0
  (JNIEnv *env, jclass cls, jbooleanArray ba)
{
  jboolean* pba = (*env)-&gt;GetBooleanArrayElements( env, ba, 0 );
  jsize len = (*env)-&gt;GetArrayLength(env, ba);
  int i=0;
  // </font><font size="-1">更改偶数数组元素
  </font><font face="Helvetica, Helv, Arial" size="-1">for( i=0; i &lt; len; i+=2 )
    pba[i] = JNI_FALSE;
  (*env)-&gt;ReleaseBooleanArrayElements( env, ba, pba, 0 );
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>指向布尔型数组的指针可以使用 <var>GetBooleanArrayElements</var> 获得。  
              数组大小可以用 <var>GetArrayLength</var> 方法获得。使用 <var>ReleaseBooleanArrayElements</var> 方法释放数组。现在就可以读取和修改数组元素的值了。<i>jsize</i> 声明等价于 <i>jint</i>（要查看它的定义，请参阅 JDK 的 include 目录下的 jni.h 头文件）。</p>
            <b>示例 5 -- 传递 Java String 数组</b>
            <p>本例将通过最常用的非基本类型，Java String，说明如何访问非基本对象的数组。字符串数组被传递给本地方法，而本地方法只是将它们显示到控制台上。  
              MyNative 类定义中添加了以下几个方法：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
  </font><font face="Helvetica, Helv, Arial" size="-1">public static void showStrings( String[] sa )
  {
    showStrings0( sa );
  }
  private static void showStrings0( String[] sa );
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>并在 main 方法中添加了两行进行测试：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
  </font><font face="Helvetica, Helv, Arial" size="-1">String[] sa = new String[] { "Hello,", "world!", "JNI", "is", "fun." };
  MyNative.showStrings( sa );
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>本地方法分别访问每个元素，其实现如下所示。</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">JNIEXPORT void JNICALL Java_MyNative_showStrings0
  (JNIEnv *env, jclass cls, jobjectArray sa)
{
  int len = (*env)-&gt;GetArrayLength( env, sa );
  int i=0;
  for( i=0; i &lt; len; i++ )
  {
    jobject obj = (*env)-&gt;GetObjectArrayElement(env, sa, i);
    jstring str = (jstring)obj;
    const char* szStr = (*env)-&gt;GetStringUTFChars( env, str, 0 );
    printf( "%s ", szStr );
    (*env)-&gt;ReleaseStringUTFChars( env, str, szStr );
  }
  printf( "\n" );
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>数组元素可以通过 <var>GetObjectArrayElement</var> 访问。  
              在本例中，我们知道返回值是 <i>jstring</i> 类型，所以可以安全地将它从 <i>jobject</i> 类型转换为 <i>jstring</i> 类型。字符串是通过前面讨论过的方法打印的。有关在 Windows 中处理 Java 字符串的信息，请参阅标题为 <a href="http://www-4.ibm.com/software/developerWorks/library/jninls/jninls.html">NLS Strings and JNI</a> 的一篇论文。</p>
            <b>示例 6 -- 返回 Java String 数组</b>
            <p>最后一个示例说明如何在本地代码中创建一个字符串数组并将它返回给 Java 调用者。MyNative.java 中添加了以下几个方法：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
  </font><font face="Helvetica, Helv, Arial" size="-1">public static String[] getStrings()
  {
    return getStrings0();
  }
  private static native String[] getStrings0();
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>更改 <i>main</i> 以使 <var>showStrings</var> 将 <var>getStrings</var> 的输出显示出来：</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
  </font><font face="Helvetica, Helv, Arial" size="-1">MyNative.showStrings( MyNative.getStrings() );
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>实现的本地方法返回五个字符串。</p>
            <p>
            <table width="100%" border="1" cellspacing="0" cellpadding="3" bgcolor="#99ccff">
              <tr>
                <td><pre><font size="-1"> 
</font><font face="Helvetica, Helv, Arial" size="-1">JNIEXPORT jobjectArray JNICALL Java_MyNative_getStrings0
  (JNIEnv *env, jclass cls)
{
  jstring      str;
  jobjectArray args = 0;
  jsize        len = 5;
  char*        sa[] = { "Hello,", "world!", "JNI", "is", "fun" };
  int          i=0;
  args = (*env)-&gt;NewObjectArray(env, len, (*env)-&gt;FindClass(env, "java/lang/String"), 0);
  for( i=0; i &lt; len; i++ )
  {
    str = (*env)-&gt;NewStringUTF( env, sa[i] );
    (*env)-&gt;SetObjectArrayElement(env, args, i, str);
  }
  return args;
}
</font></pre></td>
              </tr>
            </table>
            <p></p>
            <p>字符串数组是通过调用 <var>NewObjectArray</var> 创建的，同时传递了 String 类和数组长度两个参数。Java String 是使用 <var>NewStringUTF</var> 创建的。String 元素是使用 <var>SetObjectArrayElement</var> 存入数组中的。</p>
            <a name="Debugging"></a>
            <h4>调试</h4>
            <p>现在您已经为您的应用程序创建了一个本地 DLL，但在调试时还要牢记以下几点。如果使用 Java 调试器 java_g.exe，则还需要创建 DLL 的一个“调试”版本。这只是表示必须创建同名但带有一个 <i>_g</i> 后缀的 DLL 版本。就 MyNative.dll 而言，使用 java_g.exe 要求在 Windows 的 PATH 环境指定的路径中有一个 MyNative_g.dll 文件。在大多数情况下，这个 DLL 可以通过将原文件重命名或复制为其名称带缀 <i>_g</i> 的文件。</p>
            <p>现在，Java 调试器不允许您进入本地代码，但您可以在 Java 环境外使用 C 调试器（如 Microsoft Visual C++）调试本地方法。首先将源文件导入一个项目中。  
              将编译设置调整为在编译时将 include 目录包括在内：</p>
            <xmp> c:\jdk1.1.6\include;c:\jdk1.1.6\include\win32 </xmp>
            <p>将配置设置为以调试模式编译 DLL。在 Project Settings 中的 Debug 下，将可执行文件设置为 java.exe（或者 java_g.exe，但要确保您生成了一个 _g.dll 文件）。程序参数包括包含 main 的类名。如果在 DLL 中设置了断点，则当调用本地方法时，执行将在适当的地方停止。</p>
            <p>下面是设置一个 Visual C++ 6.0 项目来调试本地方法的步骤。</p>
            <ol>
              <li>在 Visual C++ 中创建一个 Win32 DLL 项目，并将 .c 和 
              .h 文件添加到这个项目中。 
              <p><IMG border=0 src="3665b282.jpg" width=561 align=bottom height=400></p>
              <p><IMG border=0 src="3665b283.jpg" width=426 align=bottom height=295></p>
              <li>在 Tools 下拉式菜单的 Options 设置下设置 JDK 的 
              include 目录。下面的对话框显示了这些目录。 
              <p><IMG border=0 src="3665b284.jpg" width=417 align=bottom height=319></p>
              <li>选择 Build 下拉式菜单下的 Build MyNative.dll 
              来建立这个项目。确保将项目的活动配置设置为调试（这通常是缺省值）。 
              <li>在 Project Settings 下，设置 Debug 选项卡来调用适当的 
              Java 解释器，如下所示： 
              <p><IMG border=0 src="3665b285.jpg" width=577 align=bottom height=372></p>       </li>
            </ol>
            <p>当执行这个程序时，忽略“在 java.exe 中找不到任何调试信息”的消息。当调用本地方法时，在 C 代码中设置的任何断点将在适当的地方停止 Java 程序的执行。</p>
            <a name="Other Information"></a>
            <h4>其他信息</h4>
            <b>JNI 方法和 C++</b>
            <p>上面这些示例说明了如何在 C 源文件中使用 JNI 方法。如果使用 C++，则请将相应方法的格式从：</p>
            <xmp> (*env)->JNIMethod( env, .... ); </xmp>
            <p>更改为：</p>
            <xmp> env->JNIMethod( ... ); </xmp>
            <p>在 C++ 中，JNI 函数被看作是 <i>JNIEnv</i> 类的成员方法。</p>
            <b>字符串和国家语言支持</b>
            <p>本文中使用的技术用 UTF 方法来转换字符串。使用这些方法只是为了方便起见，如果应用程序需要国家语言支持 (NLS)，则不能使用这些方法。有关在 Windows 和 NLS 环境中处理 Java 字符串正确方法，请参标题为 <a href="http://www-4.ibm.com/software/developerWorks/library/jninls/jninls.html">NLS Strings and JNI</a> 的一篇论文。</p>
            <a name="Summary"></a>
            <h4>小结</h4>
            <p>本文提供的示例用最常用的数据类据（如 <i>jint</i> 和 <i>jstring</i>）说明了如何实现本地方法，并讨论了 Windows 特定的几个问题，如显示字符串。本文提供的示例并未包括全部 JNI，JNI 还包括其他参数类型，如 <i>jfloat</i>、<i>jdouble</i>、<i>jshort</i>、<i>jbyte</i> 和 <i>jfieldID</i>，以及用来处理这些类型的方法。有关这个主题的详细信息，请参阅 Sun Microsystems 提供的 <a href="http://java.sun.com/products/jdk/1.1/docs/guide/jni/">Java 本地接口规范</a>。</p><!-- end content --><!-- rate article form --></td>
        </tr>
      </table><!-- end rate article form --></tr></table>
<P>&nbsp;</P>
<P>&nbsp;</P></BODY></html>
