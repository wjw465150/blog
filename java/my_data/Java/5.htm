<HTML>
<HEAD>
<META HTTP-EQUIV=Content-Type CONTENT=text/html; charset=UTF-8>
<title>神奇的Enum用法</title>
<style type="text/css">
<!--
.9t {
	font-size: 9pt;
	color: #000000;
	font-family: "宋体";
}
-->
</style>
</HEAD>
<body bgcolor="#ffffff">
<table width="90%" border="0" align="center" >
  <tr>
    <td><PRE class="9t">
package com.hazelcast.client;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public final class ClientProperties {

    public static enum ClientPropertyName {
        GROUP_NAME("hazelcast.client.group.name", null),
        GROUP_PASSWORD("hazelcast.client.group.password", null),
        INIT_CONNECTION_ATTEMPTS_LIMIT("hazelcast.client.init.connection.attempts.limit", "5"),
        RECONNECTION_ATTEMPTS_LIMIT("hazelcast.client.reconnection.attempts.limit", "5"),
        CONNECTION_TIMEOUT("hazelcast.client.connection.timeout", "300000"),
        RECONNECTION_TIMEOUT("hazelcast.client.reconnection.timeout", "5000");

        private final String name;
        private final String defaultValue;

        private ClientPropertyName(final String name, final String defaultValue) {
            this.name = name;
            this.defaultValue = defaultValue;
        }

        public String getName() {
            return name;
        }

        public String getDefaultValue() {
            return defaultValue;
        }

        private static final java.util.Map&lt;String, ClientPropertyName &gt; _nameAndEnumMap = new java.util.HashMap&lt;String, ClientPropertyName &gt;(ClientPropertyName .values().length);
        static {
          for (ClientPropertyName clientPropertyName: ClientPropertyName.values()) {
            _nameAndEnumMap.put(clientPropertyName.name, clientPropertyName);
          }
        }
        
        public static ClientPropertyName fromValue(final String name) {
          ClientPropertyName result = _nameAndEnumMap .get(name);
          if (result == null) {
            throw new IllegalArgumentException("There is no client property that has name '" + name + "'");
          } else {
            return result;
          }
        }
    }

    private final Map&lt;ClientPropertyName, String&gt; properties;

    public ClientProperties() {
        this.properties = new HashMap&lt;ClientProperties.ClientPropertyName, String&gt;();
    }

    public Map&lt;ClientPropertyName, String&gt; getProperties() {
        return this.properties;
    }

    public ClientProperties setProperties(final Map&lt;ClientPropertyName, String&gt; properties) {
        for (final Entry&lt;ClientPropertyName, String&gt; entry : properties.entrySet()) {
            setPropertyValue(entry.getKey(), entry.getValue());
        }
        return this;
    }

    public ClientProperties setPropertyValue(final String name, final String value) {
        return setPropertyValue(ClientPropertyName.fromValue(name), value);
    }

    public ClientProperties setPropertyValue(final ClientPropertyName name, final String value) {
        this.properties.put(name, value);
        return this;
    }

    public String getProperty(final String name) {
        return getProperty(ClientPropertyName.fromValue(name));
    }

    public String getProperty(final ClientPropertyName name) {
        String string = this.properties.get(name);
        if (string == null) {
            string = System.getProperty(name.getName());
        }
        if (string == null) {
            string = name.defaultValue;
        }
        if (string == null) {
            throw new IllegalStateException("property " + name.getName() + " is null");
        }
        return string;
    }

    public int getInteger(final ClientPropertyName name) {
        return Integer.parseInt(getProperty(name));
    }

    public long getLong(final ClientPropertyName name) {
        return Long.parseLong(getProperty(name));
    }

    public static ClientProperties createBaseClientProperties(final String groupName, final String groupPassword) {
        ClientProperties clientProperties = new ClientProperties();
        clientProperties.setPropertyValue(ClientPropertyName.GROUP_NAME, groupName);
        clientProperties.setPropertyValue(ClientPropertyName.GROUP_PASSWORD, groupPassword);
        return clientProperties;
    }
}
 
</PRE></td>
  </tr>
</table>
<P>&nbsp;</P>
<P>&nbsp;</P>
</body>
</HTML>
