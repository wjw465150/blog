<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML xmlns="http://www.w3.org/1999/xhtml">
<HEAD 
profile="http://gmpg.org/xfn/11">
<title>JavaGUI应用程序发布&amp;数字签名</title>
<LINK 
title="RSS 2.0 - 所有文章" rel=alternate type=application/rss+xml 
href="_feed=rss2">
<LINK title="RSS 2.0 - 所有评论" 
rel=alternate type=application/rss+xml 
href="_feed=comments-rss2">
<LINK rel=pingback 
href="xmlrpc.php">
<!-- style START --><!-- default style -->
<STYLE type=text/css media=screen>
@import url( http://twaver.servasoft.com/wp-content/themes/inove/style.css );
</STYLE>
<!-- for translations -->
<LINK rel=stylesheet type=text/css 
href="chinese.css" 
media=screen>
<LINK rel=stylesheet type=text/css 
href="ie.css" media=screen>
<!-- style END --><!-- script START -->
<SCRIPT type=text/javascript src="ga.js" 
async="true"></SCRIPT>
<SCRIPT type=text/javascript 
src="base.js"></SCRIPT>
<SCRIPT type=text/javascript 
src="menu.js"></SCRIPT>
<SCRIPT id=__ie_onload_for_inove defer src="javascript_void(0)"></SCRIPT>
<!-- script END -->
<LINK title="TWaver中文社区 ? JavaGUI应用程序发布&amp;数字签名 评论 Feed" 
rel=alternate type=application/rss+xml 
href="_feed=rss2&amp;p=1919">
<LINK 
id=wp-pagenavi-css rel=stylesheet type=text/css 
href="pagenavi-css.css_ver=2.60" 
media=all>
<SCRIPT type=text/javascript 
src="jquery.js_ver=1.3.2"></SCRIPT>
<LINK title=RSD rel=EditURI type=application/rsd+xml 
href="xmlrpc.php_rsd">
<LINK rel=wlwmanifest 
type=application/wlwmanifest+xml 
href="wlwmanifest.xml">
<LINK 
title=TWaver中文社区 rel=index href="http://twaver.servasoft.com/">
<LINK 
title=Swing探秘：创建带图像的菜单 rel=start href="_p=132">
<LINK 
title=想知道心中的她/他/它在哪里吗？ rel=prev href="_p=1907">
<LINK 
rel=canonical href="_p=1919">
<LINK rel=stylesheet type=text/css 
href="shCore.css_ver=2.1.364b">
<LINK 
rel=stylesheet type=text/css 
href="shThemeDefault.css_ver=2.1.364b">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</HEAD>

<BODY>
<DIV id=wrap>
  <DIV id=container>
    <DIV id=content>
      <DIV id=main>
        <DIV id=post-1919 class=post><!--StartFragment-->
          <H2>JavaGUI应用程序发布&amp;数字签名</H2>
          <DIV class=info><SPAN class=date>2010年9月4日</SPAN> <SPAN class=author><A 
title="由 zht 发表" href="http://twaver.servasoft.com/?author=13">zht</A></SPAN> <SPAN class=comments>30 次阅读</SPAN> <SPAN class=addcomment><A 
href="http://twaver.servasoft.com/?p=1919#respond">发表评论</A>&nbsp;&nbsp;</SPAN> <SPAN class=comments><A 
href="http://twaver.servasoft.com/?p=1919#comments">阅读评论</A></SPAN>
            <DIV class=fixed></DIV>
          </DIV>
          <DIV class=content>
            <P>JavaGUI应用程序部署 JavaGUI程序发布分类<BR>
              1) Applet：可以嵌入到浏览器中，通过网页的方式展示给用户<BR>
              2) 
              application ：有两种发布方式<BR>
              ü 打包成jar包通过bat的方式运行，或者通过第三方软件打成exe(后续会再详细介绍)<BR>
              ü 通过Java 
              Web Start的方式发布到服务器端，通过JNLP运行<BR>
              相对来说第二种方式可能更好一些，免除了更新的麻烦。</P>
            <P>用applet或者jws的方式发布，大部分都需要数字签名。<BR>
              为什么要签名 
              其实签名不是必须的，如果你的程序只是单纯的绘图，显示，只要不访问网络资源也不访问本地文件，是不用签名的，<BR>
              但是如果要访问本地或网上资源就必须签名， 
              比如读取本地文件或者访问数据库，这是由java的沙箱机制决定的，即jvm内部有一组安全检查规则，要通过检查之后才能访问特定资源。</P>
            <P>如果要突破这个规则，可以有两个方法:<BR>
              1) 修改jre权限文件如下<BR>
              java.policy为grant {<BR>
              permission 
              java.security.AllPermission;<BR>
              };<BR>
              一般权限文件的目录如下C:/Program 
              Files/Java/jre6/lib/security 但是修改每个客户端的权限文件，无论从时间还是操作上都是很麻烦的。<BR>
              2) 
              签名，意思就是告诉用户，这个程序是谁发布的，是不是能信任，如果客户确定，ok，这个applet或者jws就可以访问外部资源了。</P>
            <P>如何签名</P>
            <P>1)首先确保你已经完全安装了Java2的环境，有keytool工具，它位于JDK的bin目录下。这一般不会有问题。</P>
            <P>2)到Dos状态下，进入你需发布应用程序的jar包所在的目录，运行下面这句话<BR>
              keytool -genkey -keystore 
              myKeystore -alias jwstest -validity 
              1000<BR>
              它将会提示你输入用户名、密码等，按照提示随便输入即可，不输入直接回车即可，<BR>
              但一定要记住密码。运行结束它将会在当前路径下创建名为myKeystore的文件。</P>
            <P>3)如果你想查看一下刚才生成的myKeystore文件的内容，可以使用下面这句话：<BR>
              keytool -list -keystore 
              myKeystore<BR>
              显示出来应该类似如下：<BR>
              Keystore type: jks<BR>
              Keystore provider: 
              SUN<BR>
              Your keystore contains 1 entry:<BR>
              jwstest, Tue Nov 23 19:29:32 PST 2001, 
              keyEntry,<BR>
              Certificate fingerprint 
              (Test):<BR>
              C3:A9:CD:F3:D3:AC:4D:3F:3C:5B:AF:9E:CF:0D:46:5C</P>
            <P>4)对你需发布应用程序的jar包进行签名，运行下面这句话：<BR>
              jarsigner -keystore myKeystore yourtest.jar 
              jwstest<BR>
              其中yourtest.jar是你的jar包名，你需要修改它，别的就不必修改了。<BR>
              运行时会提示你输入密码，就是你刚才在生成myKeystore文件时设定的密码。</P>
            <P>如果有很多jar包怎么办</P>
            <P>在开发的过程中很可能会引用到第三方的jar包，而第三方的jar包又可能引用到其它的，所以可能有很多的jar包，需要和applet一起发布，有两个方法<BR>
              1) 
              分别打包签名，使用于包比较少，比如只有3、4个的情况<BR>
              2) 只 
              把applet的jar包签名，让用户确认访问授权，applet已经被用户授权，那么就可以在applet里改变安全管理器（SecurityManager）<BR>
              只需要继承SecurityManager类，创建自己的安全管理器类，然后覆盖checkPermission方法，允许访问任何资源。<BR>
              在applet的init方法中调用System.setSecurityManager把安全管理器设置为我们自定义的即可。</P>
            <DIV id=highlighter_88020 class="syntaxhighlighter  java">
              <DIV class="bar ">
                <DIV class=toolbar><A style="HEIGHT: 16px; WIDTH: 16px" class="item viewSource" 
title=查看源代码 href="http://twaver.servasoft.com/?p=1919#viewSource" commandName="viewSource" 
highlighterId="highlighter_88020">查看源代码</A>
                  <DIV class="item copyToClipboard">
<OBJECT id=highlighter_88020_clipboard title=复制到剪贴板 
codeBase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" 
classid=clsid:d27cdb6e-ae6d-11cf-96b8-444553540000 
data="data:application/x-oleobject;base64,btt80m2uzxGWuERFU1QAAGdVZlUACQAApwEAAKcBAAAIAAIAAAAAAAgA0gAAAGgAdAB0AHAAOgAvAC8AdAB3AGEAdgBlAHIALgBzAGUAcgB2AGEAcwBvAGYAdAAuAGMAbwBtAC8AdwBwAC0AYwBvAG4AdABlAG4AdAAvAHAAbAB1AGcAaQBuAHMALwBzAHkAbgB0AGEAeABoAGkAZwBoAGwAaQBnAGgAdABlAHIALwBzAHkAbgB0AGEAeABoAGkAZwBoAGwAaQBnAGgAdABlAHIALwBzAGMAcgBpAHAAdABzAC8AYwBsAGkAcABiAG8AYQByAGQALgBzAHcAZgAAAAgA0gAAAGgAdAB0AHAAOgAvAC8AdAB3AGEAdgBlAHIALgBzAGUAcgB2AGEAcwBvAGYAdAAuAGMAbwBtAC8AdwBwAC0AYwBvAG4AdABlAG4AdAAvAHAAbAB1AGcAaQBuAHMALwBzAHkAbgB0AGEAeABoAGkAZwBoAGwAaQBnAGgAdABlAHIALwBzAHkAbgB0AGEAeABoAGkAZwBoAGwAaQBnAGgAdABlAHIALwBzAGMAcgBpAHAAdABzAC8AYwBsAGkAcABiAG8AYQByAGQALgBzAHcAZgAAAAgAGAAAAFQAcgBhAG4AcwBwAGEAcgBlAG4AdAAAAAgABAAAADAAAAAIAAYAAAAtADEAAAAIAAoAAABIAGkAZwBoAAAACAACAAAAAAAIAAQAAAAwAAAACAACAAAAAAAIAA4AAABhAGwAdwBhAHkAcwAAAAgAEAAAAFMAaABvAHcAQQBsAGwAAAAIAAQAAAAwAAAACAAEAAAAMAAAAAgAAgAAAAAACAACAAAAAAAIAAIAAAAAAA0AAAAAAAAAAAAAAAAAAAAAAAgABAAAADEAAAAIAAQAAAAwAAAACAAAAAAACAAEAAAAMAAAAAgACAAAAGEAbABsAAAACAAMAAAAZgBhAGwAcwBlAAAACAAMAAAAZgBhAGwAcwBlAAAACAAEAAAAMAAAAAgADAAAAHMAYwBhAGwAZQAAAA==" width=16 
height=16 type=application/x-shockwave-flash></OBJECT>
                  </DIV>
                  <A 
style="HEIGHT: 16px; WIDTH: 16px" class="item printSource" title=打印 
href="http://twaver.servasoft.com/?p=1919#printSource" commandName="printSource" 
highlighterId="highlighter_88020">打印</A><A style="HEIGHT: 16px; WIDTH: 16px" 
class="item about" title=帮助 href="http://twaver.servasoft.com/?p=1919#about" commandName="about" 
highlighterId="highlighter_88020">帮助</A></DIV>
              </DIV>
              <DIV class=lines>
                <DIV class="line alt1">
                  <TABLE>
                    <TBODY>
                      <TR>
                        <TD class=number><CODE>1</CODE></TD>
                        <TD class=content><CODE class="java keyword">class</CODE> <CODE 
class="java plain">CustomManager </CODE><CODE 
class="java keyword">extends</CODE> <CODE class="java plain">SecurityManager { </CODE></TD>
                      </TR>
                    </TBODY>
                  </TABLE>
                </DIV>
                <DIV class="line alt2">
                  <TABLE>
                    <TBODY>
                      <TR>
                        <TD class=number><CODE>2</CODE></TD>
                        <TD class=content><CODE class=spaces>&nbsp;</CODE><CODE 
class="java keyword">public</CODE> <CODE class="java keyword">void</CODE> <CODE 
class="java plain">checkPermission(Permission perm, Object context) { </CODE></TD>
                      </TR>
                    </TBODY>
                  </TABLE>
                </DIV>
                <DIV class="line alt1">
                  <TABLE>
                    <TBODY>
                      <TR>
                        <TD class=number><CODE>3</CODE></TD>
                        <TD class=content><CODE class=spaces>&nbsp;</CODE><CODE class="java plain">} </CODE></TD>
                      </TR>
                    </TBODY>
                  </TABLE>
                </DIV>
                <DIV class="line alt2">
                  <TABLE>
                    <TBODY>
                      <TR>
                        <TD class=number><CODE>4</CODE></TD>
                        <TD class=content><CODE class=spaces>&nbsp;</CODE><CODE 
class="java keyword">public</CODE> <CODE class="java keyword">void</CODE> <CODE 
class="java plain">checkPermission(Permission perm) { </CODE></TD>
                      </TR>
                    </TBODY>
                  </TABLE>
                </DIV>
                <DIV class="line alt1">
                  <TABLE>
                    <TBODY>
                      <TR>
                        <TD class=number><CODE>5</CODE></TD>
                        <TD class=content><CODE class=spaces>&nbsp;</CODE><CODE class="java plain">} </CODE></TD>
                      </TR>
                    </TBODY>
                  </TABLE>
                </DIV>
                <DIV class="line alt2">
                  <TABLE>
                    <TBODY>
                      <TR>
                        <TD class=number><CODE>6</CODE></TD>
                        <TD class=content><CODE 
class="java plain">}</CODE></TD>
                      </TR>
                    </TBODY>
                  </TABLE>
                </DIV>
              </DIV>
            </DIV>
            <P>其它一些相关资料如下</P>
            <P>JDK中keytool常用命令</P>
            <P>-genkey 
              在用户主目录中创建一个默认文件”.keystore”,还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书<BR>
              -alias 
              产生别名<BR>
              -keystore 指定密钥库的名称(产生的各类信息将不在.keystore文件中<BR>
              -keyalg 
              指定密钥的算法<BR>
              -validity 指定创建的证书有效期多少天<BR>
              -keysize 指定密钥长度<BR>
              -storepass 
              指定密钥库的密码<BR>
              -keypass 指定别名条目的密码<
                 
              BR>-dname指定证书拥有者信息例如：“CN=sagely,OU=atr,O=szu,L=sz,ST=gd,C=cn”<BR>
              -list 显示密钥库中的证书信息 keytool -list -v 
              -keystore sage -storepass ….<BR>
              -v 显示密钥库中的证书详细信息<BR>
              -export 将别名指定的证书导出到文件 
              keytool -export -alias caroot -file caroot.crt<BR>
              -file 参数指定导出到文件的文件名<BR>
              -delete 
              删除密钥库中某条目 keytool -delete -alias sage -keystore sage<BR>
              -keypasswd 修改密钥库中指定条目口令 
              keytool -keypasswd -alias sage -keypass …. -new …. -storepass … -keystore 
              sage<BR>
              -import 将已签名数字证书导入密钥库 keytool -import -alias sage -keystore sagely -file 
              sagely.crt<BR>
              导入已签名数字证书用keytool -list -v 以后可以明显发现多了认证链长度，并且把整个CA链全部打印出来。</P>
            <P>Keytool 是安全钥匙与证书的管理工具.它管理一个存储了私有钥匙和验证相应公共钥匙的与它们相关联的X.509 
              证书链的keystore(相当一个数据库).</P>
            <P>Keytool 是一个有效的安全钥匙和证书的管理工具. 
              它能够使用户使用数字签名来管理他们自己的私有/公共钥匙对,管理用来作自我鉴定的相关的证书,管理数据完整性和鉴定服务.它还能使用户在通信时缓存它们的公共钥匙.</P>
            <P>一个证书是某一实体(个人,公司等)的数字签名,指出其他实体的公共钥匙(或其他信息)的详细的值.当数据被签名后,这个签名信息被用来检验数据的完整性和真实性.完整性指数据没有被修改和篡改,真实性指数据从任何产生和签名的一方真正的传输到达.</P>
            <P>Keytool 把钥匙和证书储存到一个keystore.默任的实现keystore的是一个文件.它用一个密码保护钥匙.</P>
            <P>而另外的一个工具jarsigner用keystore中的信息产生或检验Java aRchive(jar文件)中的数字签名.</P>
            <P>Keystore有两个不同的入口:</P>
            <P>1.钥匙入口:保存了非常敏感的加密的钥匙信息,并且是用一个保护的格式存储以防止未被授权的访问.以这种形式存储的钥匙是秘密钥匙,或是一个对应证书链中公有钥匙的私有钥匙.</P>
            <P>2.信任证书入口:包含一个属于其他部分的单一公共钥匙证书.它之所以被称为”信任证书”,是因为keystore信任的证书中的公共钥匙真正属于证书所有者的身份识别.</P>
            <P>Keystore的别名:</P>
            <P>所有的keystore入口(钥匙和信任证书入口)是通过唯一的别名访问.别名是 
              不区分大小写的.如别名Hugo和hugo指向同一个keystore入口.</P>
            <P>可以在加一个入口到keystore的时候使用-genkey参数来产生一个钥匙对(公共钥匙和私有钥匙)时指定别名.也可以用-import参数加一个证书或证书链到信任证书.</P>
            <P>如:</P>
            <P>keytool -genkey -alias duke -keypass dukekeypasswd</P>
            <P>其中duke为别名,dukekeypasswd为duke别名的密码.这行命令的作用是产生一个新的公共/私有钥匙对.</P>
            <P>假如你想修改密码,可以用:</P>
            <P>keytool -keypasswd -alias duke -keypass dukekeypasswd -new newpass</P>
            <P>将旧密码dukekeypasswd改为newpass.</P>
            <P>Keystore的产生:</P>
            <P>1.当使用-genkey 
              或-import或-identitydb命令添加数据到一个keystore,而当这个keystore不存在时,产生一个keystore.默认名是.keystore,存放到user-home目录.</P>
            <P>2.当用-keystore指定时,将产生指定的keystore.</P>
            <P>Keystore的实现:</P>
            <P>Keytool 类位于java.security包下,提供一个非常好的接口去取得和修改一个keystore中的信息. 
              目前有两个命令行:keytool和jarsinger,一个GUI工具Policy 
              可以实现keystore.由于keystore是公开的,用户可以用它写一些额外的安全应用程序.</P>
            <P>Keystore还有一个sun公司提供的內在实现.它把keystore作为一个文件来实现.利用了一个keystore类型(格式)”JKS”.它用单独的密码保护每一个私有钥匙.也用可能不同的密码保护整个keystore的完整性.</P>
            <P>支持的算法和钥匙大小:</P>
            <P>keytool允许用户指定钥匙对和注册密码服务供应者所提供的签名算法.缺省的钥匙对产生算法是”DSA”.假如私有钥匙是”DSA”类型,缺省签名算法是”SHA1withDSA”,假如私有钥匙是”RSA”类型,缺省算法是”MD5withRSA”.</P>
            <P>当产生一个DSA钥匙对,钥匙必须在512-1024位之间.对任何算法的缺省钥匙大小是1024位.</P>
            <P>证书:</P>
            <P>一个证书是一个实体的数字签名,指出其他实体的公共钥匙有明确的值.</P>
            <P>1.公共钥匙 :是同一个详细的实体的数字关联,并有意让所有想同这个实体发生信任关系的其他实体知道.公共钥匙用来检验签名;</P>
            <P>2.数字签名:假如数据已被签名,并用身份存储在一个实体中,一个签名能够证明这个实体知道这个数据.这个数据用实体私有钥匙签名并递交;</P>
            <P>3.身份:知道实体的方法.在一些系统中身份是公共钥匙,其他系统中可以是从一个X.509名字的邮件地址的Unix UID来的任何东西;</P>
            <P>4.签名:一个签名用用实体私有钥匙来计算某些加密数据;</P>
            <P>5.私有钥匙:是一些数字,每一个私有钥匙只能被特定的拥有该私有钥匙的实体知道.私有和公共钥匙存在所有用公共钥匙加密的系统的钥匙对中.一个公共钥匙加密(如DSA),一个私有钥匙与一个正确的公共钥匙通信.私有钥匙用来计算签名.</P>
            <P>6.实体:一个实体可以是一个人,一个组织,一个程序,一台计算机,一个商业,一个银行,或其他你想信任的东西.</P>
            <P>Keytool应用实例:</P>
            <P>1.产生一个keystore:</P>
            <P>keytool -genkey -alias User(keystore的别名) -keyalg RSA -validity 7 -keystore 
              keystore(指定keystore).</P>
            <P>运行这个命令,系统提示:</P>
            <P>Enter keystore password:yourpassword(输入密码)</P>
            <P>What is your first and last name?</P>
            <P>[Unknown]: your name(输入你的名字)</P>
            <P>What is the name of your organizational unit?</P>
            <P>[Unknown]:your organizational(输入你所在组织单位的名字)</P>
            <P>What is the name of your organization?</P>
            <P>[Unknown]:your organization name (输入你所在组织的名字)</P>
            <P>What is the name of your City or Locality?</P>
            <P>[Unknown]:your city name(输入所在城市的名字)</P>
            <P>What is the name of your State or Province?</P>
            <P>[Unknown]:your provice name(输入所在省份名字)</P>
            <P>What is the two-letter country code for this unit?</P>
            <P>[Unknown]:cn(输入国家名字)</P>
            <P>Is CN=your name, OU=your organizaion, O=”your organization name”,</P>
            <P>L=your city name, ST=your province name, C=cn correct?</P>
            <P>[no]: yes</P>
            <P>2.检查一个keystore:</P>
            <P>keytool -list -v -keystore keystore</P>
            <P>Enter keystore password:your password(输入密码)</P>
            <P>将显示keystore內容如:</P>
            <P>Keystore type: jks</P>
            <P>Keystore provider: SUN</P>
            <P>Your keystore contains 1 entry</P>
            <P>Alias name: yourname</P>
            <P>Creation date: Dec 20, 2001</P>
            <P>Entry type: keyEntry</P>
            <P>Certificate chain length: 1</P>
            <P>Certificate[1]:</P>
            <P>Owner: CN=yourname, OU=your organization, O=”your organization name”,</P>
            <P>L=your city name, ST=your province name, C=CN</P>
            <P>Issuer: CN=Duke, OU=Java Software, O=”Sun Microsystems, Inc.”, L=Palo Alto, 
              ST=CA, C=US</P>
            <P>Serial number: 3c22adc1</P>
            <P>Valid from: Thu Dec 20 19:34:25 PST 2001 until: Thu Dec 27 19:34:25 PST 
              2001</P>
            <P>Certificate fingerprints:</P>
            <P>MD5: F1:5B:9B:A1:F7:16:CF:25:CF:F4:FF:35:3F:4C:9C:F0</P>
            <P>SHA1: B2:00:50:DD:B6:CC:35:66:21:45:0F:96:AA:AF:6A:3D:E4:03:7C:74</P>
            <P>3.输出keystore到一个文件:testkey:</P>
            <P>keytool -export -alias duke -keystore keystore -rfc -file testkey</P>
            <P>系统输出:</P>
            <P>Enter keystore password:your password(输入密码)</P>
            <P>Certificate stored in file &lt; td&gt;</P>
            <P>4.输入证书到一个新的truststore:</P>
            <P>keytool -import -alias dukecert -file testkey -keystore truststore</P>
            <P>Enter keystore password:your new password.(输入truststore新密码)</P>
            <P>5.检查truststore:</P>
            <P>keytool -list -v -keystore truststore</P>
            <P>系统将显示truststore的信息.</P>
            <P>现在可以用适当的keystore运行你的应用程序.如:</P>
            <P>java -Djavax.net.ssl.keyStore=keystore 
              -Djavax.net.ssl.keyStorePassword=password Server</P>
            <P>和: java -Djavax.net.ssl.trustStore=truststore</P>
            <P>-Djavax.net.ssl.trustStorePassword=trustword Client</P>
            <P> &nbsp;</P>
            <P> &nbsp;</P>
          </DIV><!--EndFragment--></DIV>
      </DIV>
    </DIV>
  </DIV>
</DIV>
</BODY>
</HTML>