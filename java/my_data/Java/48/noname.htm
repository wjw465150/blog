<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">

<HTML xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>JAVA操作SSL协议，通过Socket访问Https的程序代码例子</title>
<SCRIPT src="jquery-1.2.3.pack.js" 
type=text/javascript></SCRIPT>
<LINK media=all href="sea_1.css" type=text/css 
rel=stylesheet>
<LINK media=all 
href="csdn_favbykimi.css" type=text/css 
rel=stylesheet>
<LINK href="1.ico" 
rel="Shortcut Icon">
<LINK title=RSS 
href="java2000_net" type=application/rss+xml 
rel=alternate>
<LINK media=screen 
href="SyntaxHighlighter.css" 
type=text/css rel=stylesheet>
<STYLE type=text/css>
.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>
</HEAD>

<BODY id=defaultuser>
<DIV id=csdnblog_allwrap>
  <DIV id=csdnblog_midwrap>
    <DIV id=csdnblog_content>
      <DIV class=gutter>
        <DIV class=default_contents>
          <DIV class=user_article><!--StartFragment-->
            <H1 class=title_txt>JAVA操作SSL协议，通过Socket访问Https的程序代码例子 <CITE class=fav_csdnstylebykimi><A 
title=收藏到我的网摘中，并分享给我的朋友 class=fav_csdnstylebykimi 
href="javascript:d=document;t=d.selection%3F(d.selection.type!='None'?d.selection.createRange().text:''):(d.getSelection?d.getSelection():'');void(saveit=window.open('http://wz.csdn.net/storeit.aspx?t='+escape(d.title)+'&amp;u='+escape(d.location.href)+'&amp;c='+escape(t),'saveit','scrollbars=no,width=590,height=300,left=75,top=20,status=no,resizable=yes'));saveit.focus();">收藏</A> </CITE></H1>
            <DIV class=blogstory> 
              <SCRIPT type=text/javascript>
						document.body.oncopy = function() {
							if (window.clipboardData) {
								setTimeout(function() {
									var text = clipboardData.getData("text"); 
									if (text && text.length>300) {
										text = text + "\r\n\n本文来自CSDN博客，转载请标明出处：" + location.href;
										clipboardData.setData("text", text); 
									}
								}, 100);
							}
						}
					</SCRIPT> 
              <SCRIPT class=blogstory>functionStorePage(){d=document;t=d.selection?(d.selection.type!='None'?d.selection.createRange().text:''):(d.getSelection?d.getSelection():'');void(keyit=window.open('http://www.365key.com/storeit.aspx?t='+escape(d.title)+'&u='+escape(d.location.href)+'&c='+escape(t),'keyit','scrollbars=no,width=475,height=575,left=75,top=20,status=no,resizable=yes'));keyit.focus();}</SCRIPT>
              <P><SPAN 
style="FONT-SIZE: small">今天有人问，需要访问HTTPS的网站，作为client访问基于HTTPS的webservices，client这边通过设置以下系统参数，是可以成功的， <BR>
                System.setProperty("javax.net.ssl.keyStore", keystoreFile); <BR>
                System.setProperty("javax.net.ssl.keyStorePassword",keystorePassword); <BR>
                System.setProperty("javax.net.ssl.trustStore", truststoreFile); <BR>
                System.setProperty("javax.net.ssl.trustStorePassword",truststorePassword); <BR>
                <BR>
                但是，问题是要作为clinet访问另外一个也是基于HTTPS的web services，当然证书是不一样的， 
                这时client能再次设置这些系统参数为另外的值么？访问能成功么？ </SPAN></P>
              <P><SPAN style="FONT-SIZE: small"><BR>
                </SPAN></P>
              <P><SPAN style="FONT-SIZE: small">原始帖子看这里：<A 
href="http://topic.csdn.net/u/20090713/10/112488bb-bf45-4f87-93f6-62961fc12ad5.html"> http://topic.csdn.net/u/20090713/10/112488bb-bf45-4f87-93f6-62961fc12ad5.html</A> </SPAN></P>
              <P><SPAN style="FONT-SIZE: small"><BR>
                </SPAN></P>
              <P><SPAN 
style="FONT-SIZE: small">我查看了资料并整理了一下，通过Socket可以进行，当然我个人认为httpclient等现成的组件也可以，不过我就不去尝试了，因为我许多时候更喜欢用自己封装的组件。</SPAN> </P>
              <P><SPAN style="FONT-SIZE: small"><BR>
                </SPAN></P>
              <P><SPAN style="FONT-SIZE: small">完整的代码如下：</SPAN> </P>
              <P>&nbsp; </P>
              <P>
              <SPAN style="FONT-SIZE: small"></P>
              <DIV class=dp-highlighter>
                <DIV class=bar>
                  <DIV class=tools><A 
onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" 
href="http://blog.csdn.net/java2000_net/archive/2009/07/13/4344332.aspx#">view 
                    plain</A><A 
onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" 
href="http://blog.csdn.net/java2000_net/archive/2009/07/13/4344332.aspx#">copy 
                    to clipboard</A><A 
onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;" 
href="http://blog.csdn.net/java2000_net/archive/2009/07/13/4344332.aspx#">print</A><A 
onclick="dp.sh.Toolbar.Command('About',this);return false;" 
href="http://blog.csdn.net/java2000_net/archive/2009/07/13/4344332.aspx#">?</A></DIV>
                </DIV>
                <OL class=dp-j>
                  <LI class=alt><SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.io.BufferedReader; &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.io.BufferedWriter; &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.io.InputStreamReader; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.io.OutputStreamWriter; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.net.Socket; &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.security.cert.CertificateException; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.security.cert.X509Certificate; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;javax.net.ssl.SSLContext; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;javax.net.ssl.SSLSocketFactory; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;javax.net.ssl.TrustManager; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;javax.net.ssl.X509TrustManager; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN></SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN>
                  <LI class=alt><SPAN><SPAN class=comment>&nbsp;*&nbsp;JAVA操作SSL协议，通过Socket访问Https的程序代码例子。 </SPAN>&nbsp;</SPAN>
                  <LI ><SPAN><SPAN class=comment>&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN>
                  <LI class=alt><SPAN><SPAN class=comment>&nbsp;*&nbsp;@author&nbsp;JAVA世纪网(java2000.net) </SPAN>&nbsp;</SPAN>
                  <LI ><SPAN><SPAN class=comment>&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN>
                  <LI class=alt><SPAN><SPAN class=comment>&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;ReadHttpsURL&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;默认的HTTPS&nbsp;端口 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=keyword>static</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>final</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;HTTPS_PORT&nbsp;=&nbsp;</SPAN><SPAN 
class=number>443</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;main(String&nbsp;argv[])&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;Exception&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;受访主机 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;host&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"www.google.com"</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;受访的页面 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;url&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"/adsense/?sourceid=aso&amp;subid=ZH_CN-ET-AS-ADSBY6&amp;medium=link&amp;hl=zh_CN"</SPAN><SPAN>; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;自定义的管理器 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;X509TrustManager&nbsp;xtm&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;Java2000TrustManager(); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;TrustManager&nbsp;mytm[]&nbsp;=&nbsp;{&nbsp;xtm&nbsp;}; &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;得到上下文 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;SSLContext&nbsp;ctx&nbsp;=&nbsp;SSLContext.getInstance(</SPAN><SPAN 
class=string>"SSL"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;初始化 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;ctx.init(</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>,&nbsp;mytm,&nbsp;</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;获得工厂 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;SSLSocketFactory&nbsp;factory&nbsp;=&nbsp;ctx.getSocketFactory(); 
                    &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;从工厂获得Socket连接 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;Socket&nbsp;socket&nbsp;=&nbsp;factory.createSocket(host,&nbsp;HTTPS_PORT); 
                    &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;剩下的就和普通的Socket操作一样了 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;BufferedWriter&nbsp;out&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BufferedWriter(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;OutputStreamWriter(socket.getOutputStream())); 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;BufferedReader&nbsp;in&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;BufferedReader(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;InputStreamReader(socket.getInputStream())); 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;out.write(</SPAN><SPAN 
class=string>"GET&nbsp;"</SPAN><SPAN>&nbsp;+&nbsp;url&nbsp;+&nbsp;</SPAN><SPAN 
class=string>"&nbsp;HTTP/1.0\n\n"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;out.flush(); &nbsp;&nbsp;</SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN><SPAN 
class=string>"start&nbsp;&nbsp;&nbsp;work!"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;line; &nbsp;&nbsp;</SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer&nbsp;sb&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;StringBuffer(); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>while</SPAN><SPAN>&nbsp;((line&nbsp;=&nbsp;in.readLine())&nbsp;!=&nbsp;</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.append(line&nbsp;+&nbsp;</SPAN><SPAN 
class=string>"\n"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;out.close(); &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;in.close(); &nbsp;&nbsp;</SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(sb.toString()); &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
                  <LI ><SPAN>} &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN></SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN>
                  <LI ><SPAN><SPAN class=comment>&nbsp;*&nbsp;自定义的认证管理类。 </SPAN>&nbsp;</SPAN>
                  <LI class=alt><SPAN><SPAN class=comment>&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN>
                  <LI ><SPAN><SPAN class=comment>&nbsp;*&nbsp;@author&nbsp;JAVA世纪网(java2000.net) </SPAN>&nbsp;</SPAN>
                  <LI class=alt><SPAN><SPAN class=comment>&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN>
                  <LI ><SPAN><SPAN class=comment>&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN></SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Java2000TrustManager&nbsp;</SPAN><SPAN 
class=keyword>implements</SPAN><SPAN>&nbsp;X509TrustManager&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;Java2000TrustManager()&nbsp;{ &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;这里可以进行证书的初始化操作 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;检查客户端的可信任状态 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;checkClientTrusted(X509Certificate&nbsp;chain[],&nbsp;String&nbsp;authType)&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;CertificateException&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN><SPAN 
class=string>"检查客户端的可信任状态..."</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;检查服务器的可信任状态 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;checkServerTrusted(X509Certificate&nbsp;chain[],&nbsp;String&nbsp;authType)&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;CertificateException&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN><SPAN 
class=string>"检查服务器的可信任状态"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;返回接受的发行商数组 </SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;X509Certificate[]&nbsp;getAcceptedIssuers()&nbsp;{ 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(</SPAN><SPAN 
class=string>"获取接受的发行商数组..."</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN>
                  <LI ><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword>null</SPAN><SPAN>; 
                    &nbsp;&nbsp;</SPAN></SPAN>
                  <LI class=alt><SPAN>&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN>
                  <LI ><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><TEXTAREA class=java style="DISPLAY: none" rows=15 cols=50 name=code>import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
/**
 * JAVA操作SSL协议，通过Socket访问Https的程序代码例子。
 * 
 * @author JAVA世纪网(java2000.net)
 * 
 */
public class ReadHttpsURL {
  // 默认的HTTPS 端口
  static final int HTTPS_PORT = 443;
  public static void main(String argv[]) throws Exception {
    // 受访主机
    String host = "www.google.com";
    // 受访的页面
    String url = "/adsense/?sourceid=aso&amp;subid=ZH_CN-ET-AS-ADSBY6&amp;medium=link&amp;hl=zh_CN";
    // 自定义的管理器
    X509TrustManager xtm = new Java2000TrustManager();
    TrustManager mytm[] = { xtm };
    // 得到上下文
    SSLContext ctx = SSLContext.getInstance("SSL");
    // 初始化
    ctx.init(null, mytm, null);
    // 获得工厂
    SSLSocketFactory factory = ctx.getSocketFactory();
    // 从工厂获得Socket连接
    Socket socket = factory.createSocket(host, HTTPS_PORT);
    // 剩下的就和普通的Socket操作一样了
    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
    BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    out.write("GET " + url + " HTTP/1.0\n\n");
    out.flush();
    System.out.println("start   work!");
    String line;
    StringBuffer sb = new StringBuffer();
    while ((line = in.readLine()) != null) {
      sb.append(line + "\n");
    }
    out.close();
    in.close();
    System.out.println(sb.toString());
  }
}
/**
 * 自定义的认证管理类。
 * 
 * @author JAVA世纪网(java2000.net)
 * 
 */
class Java2000TrustManager implements X509TrustManager {
  Java2000TrustManager() {
    // 这里可以进行证书的初始化操作
  }
  // 检查客户端的可信任状态
  public void checkClientTrusted(X509Certificate chain[], String authType) throws CertificateException {
    System.out.println("检查客户端的可信任状态...");
  }
  // 检查服务器的可信任状态
  public void checkServerTrusted(X509Certificate chain[], String authType) throws CertificateException {
    System.out.println("检查服务器的可信任状态");
  }
  // 返回接受的发行商数组
  public X509Certificate[] getAcceptedIssuers() {
    System.out.println("获取接受的发行商数组...");
    return null;
  }
}</TEXTAREA>
              <BR></SPAN>
<P></P>
              </DIV><!--EndFragment-->
            </DIV></DIV>
        </DIV>
      </DIV>
    </DIV>
  </DIV>
</BODY>
</HTML>