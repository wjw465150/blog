<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Hadoop常见问题及解决办法</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold">1：Shuffle Error: Exceeded MAX_FAILED_UNIQUE_FETCHES; 
bailing-out</STRONG><BR>Answer：<BR>程序里面需要打开多个文件，进行分析，系统一般默认数量是1024，（用ulimit 
-a可以看到）对于正常使用是够了，但是对于程序来讲，就太少了。<BR>修改办法：<BR>修改2个文件。<BR>/etc/security/limits.conf<BR>vi 
/etc/security/limits.conf<BR>加上：<BR>* soft nofile 102400<BR>* hard nofile 
409600<BR>$cd /etc/pam.d/<BR>$sudo vi 
login<BR>添加&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session&nbsp;&nbsp;&nbsp; 
required&nbsp;&nbsp;&nbsp;&nbsp; 
/lib/security/pam_limits.so<BR>针对第一个问题我纠正下答案：<BR>这是reduce预处理阶段shuffle时获取已完成的map的输出失败次数超过上限造成的，上限默认为5。引起此问题的方式可能会有很多种，比如网络连接不正常，连接超时，带宽较差以及端口阻塞等。。。通常框架内网络情况较好是不会出现此错误的。<BR><STRONG 
style="FONT-WEIGHT: bold">2：Too many 
fetch-failures</STRONG><BR>Answer:<BR>出现这个问题主要是结点间的连通不够全面。<BR>1) 检查 
、/etc/hosts<BR>要求本机ip 对应 服务器名<BR>要求要包含所有的服务器ip + 服务器名<BR>2) 检查 
.ssh/authorized_keys<BR>要求包含所有服务器（包括其自身）的public key<BR><STRONG 
style="FONT-WEIGHT: bold">3：处理速度特别的慢 出现map很快 但是reduce很慢 而且反复出现 reduce=0%<SPAN 
class=Apple-converted-space>&nbsp;</SPAN></STRONG><BR>Answer:<BR>结合第二点，然后<BR>修改 
conf/hadoop-env.sh 中的export HADOOP_HEAPSIZE=4000<BR><STRONG 
style="FONT-WEIGHT: bold">4：能够启动datanode，但无法访问，也无法结束的错误</STRONG><BR>在 
重新格式化一个新的分布式文件时，需要将你NameNode上所配置的dfs.name.dir这一namenode用来存放NameNode 
持久存储名字空间及事务日志的本地文件系统路径删除，同时将各DataNode上的dfs.data.dir的路径 DataNode 
存放块数据的本地文件系统路径的目录也删除。如本此配置就是在NameNode上删除/home/hadoop/NameData，在DataNode上 
删除/home/hadoop/DataNode1和/home/hadoop/DataNode2。这是因为Hadoop在格式化一个新的分布式文件系 
统时，每个存储的名字空间都对应了建立时间的那个版本（可以查看/home/hadoop 
/NameData/current目录下的VERSION文件，上面记录了版本信息），在重新格式化新的分布式系统文件时，最好先删除NameData 
目录。必须删除各DataNode的dfs.data.dir。这样才可以使namedode和datanode记录的信息版本对应。<BR>注意：删除是个很危险的动作，不能确认的情况下不能删除！！做好删除的文件等通通备份！！<BR><STRONG 
style="FONT-WEIGHT: bold">5：java.io.IOException: Could not obtain block: 
blk_194219614024901469_1100 
file=/user/hive/warehouse/src_20090724_log/src_20090724_log</STRONG><BR>出现这种情况大多是结点断了，没有连接上。<BR><STRONG 
style="FONT-WEIGHT: bold">6：java.lang.OutOfMemoryError: Java heap 
space</STRONG><BR>出现这种异常，明显是jvm内存不够得原因，要修改所有的datanode的jvm内存大小。<BR>Java -Xms1024m 
-Xmx4096m<BR>一般jvm的最大内存使用应该为总内存大小的一半，我们使用的8G内存，所以设置为4096m，这一值可能依旧不是最优的值。</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px">本主题由 
admin 于 2009-11-20 10:50 置顶</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px">顶，这样的贴子非常好，要置顶。附件是由Hadoop技术交流群中若冰的同学提供的相关资料：<BR>(12.58 
KB)<BR><STRONG style="FONT-WEIGHT: bold"><A title=大数据处理利器：Hadoop具有五大优势 
style="TEXT-DECORATION: none; COLOR: rgb(1,150,227)" 
href="http://www.superwu.cn/2014/10/28/1258/">Hadoop</A>添加节点的方法</STRONG><BR>自己实际添加节点过程：<BR>1. 
先在slave上配置好环境，包括ssh，jdk，相关config，lib，bin等的拷贝；<BR>2. 
将新的datanode的host加到集群namenode及其他datanode中去；<BR>3. 
将新的datanode的ip加到master的conf/slaves中；<BR>4. 
重启cluster,在cluster中看到新的datanode节点；<BR>5. 
运行bin/start-balancer.sh，这个会很耗时间<BR>备注：<BR>1. 
如果不balance，那么cluster会把新的数据都存放在新的node上，这样会降低mr的工作效率；<BR>2. 
也可调用bin/start-balancer.sh 命令执行，也可加参数 -threshold 5<BR>threshold 
是平衡阈值，默认是10%，值越低各节点越平衡，但消耗时间也更长。<BR>3. balancer也可以在有mr 
job的cluster上运行，默认dfs.balance.bandwidthPerSec很低，为1M/s。在没有mr 
job时，可以提高该设置加快负载均衡时间。<BR>其他备注：<BR>1. 必须确保slave的firewall已关闭;<BR>2. 
确保新的slave的ip已经添加到master及其他slaves的/etc/hosts中，反之也要将master及其他slave的ip添加到新的slave的/etc/hosts中<BR><STRONG 
style="FONT-WEIGHT: bold">mapper及reducer个数</STRONG><BR>url地址： 
http://wiki.apache.org/hadoop/HowManyMapsAndReduces<BR>HowManyMapsAndReduces<BR>Partitioning 
your job into maps and reduces<BR>Picking the appropriate size for the tasks for 
your job can radically change the performance of Hadoop. Increasing the number 
of tasks increases the framework overhead, but increases load balancing and 
lowers the cost of failures. At one extreme is the 1 map/1 reduce case where 
nothing is distributed. The other extreme is to have 1,000,000 maps/ 1,000,000 
reduces where the framework runs out of resources for the overhead.<BR>Number of 
Maps<BR>The number of maps is usually driven by the number of DFS blocks in the 
input files. Although that causes people to adjust their DFS block size to 
adjust the number of maps. The right level of parallelism for maps seems to be 
around 10-100 maps/node, although we have taken it up to 300 or so for very 
cpu-light map tasks. Task setup takes awhile, so it is best if the maps take at 
least a minute to execute.<BR>Actually controlling the number of maps is subtle. 
The mapred.map.tasks parameter is just a hint to the InputFormat for the number 
of maps. The default InputFormat behavior is to split the total number of bytes 
into the right number of fragments. However, in the default case the DFS block 
size of the input files is treated as an upper bound for input splits. A lower 
bound on the split size can be set via mapred.min.split.size. Thus, if you 
expect 10TB of input data and have 128MB DFS blocks, you'll end up with 82k 
maps, unless your mapred.map.tasks is even larger. Ultimately the [WWW] 
InputFormat determines the number of maps.<BR>The number of map tasks can also 
be increased manually using the JobConf's conf.setNumMapTasks(int num). This can 
be used to increase the number of map tasks, but will not set the number below 
that which Hadoop determines via splitting the input data.<BR>Number of 
Reduces<BR>The right number of reduces seems to be 0.95 or 1.75 * (nodes * 
mapred.tasktracker.tasks.maximum). At 0.95 all of the reduces can launch 
immediately and start transfering map outputs as the maps finish. At 1.75 the 
faster nodes will finish their first round of reduces and launch a second round 
of reduces doing a much better job of load balancing.<BR>Currently the number of 
reduces is limited to roughly 1000 by the buffer size for the output files 
(io.buffer.size * 2 * numReduces &lt;&lt; heapSize). This will be fixed at some 
point, but until it is it provides a pretty firm upper bound.<BR>The number of 
reduces also controls the number of output files in the output directory, but 
usually that is not important because the next map/reduce step will split them 
into even smaller splits for the maps.<BR>The number of reduce tasks can also be 
increased in the same way as the map tasks, via JobConf's 
conf.setNumReduceTasks(int num).<BR>自己的理解：<BR>mapper个数的设置：跟input file 
有关系，也跟filesplits有关系，filesplits的上线为dfs.block.size，下线可以通过mapred.min.split.size设置，最后还是由InputFormat决定。<BR>较好的建议：<BR>The 
right number of reduces seems to be 0.95 or 1.75 multiplied by (&lt;no. of 
nodes&gt; * mapred.tasktracker.reduce.tasks.maximum).increasing the number of 
reduces increases the framework overhead, but increases load balancing and 
lowers the cost of 
failures.<BR>&lt;property&gt;<BR>&lt;name&gt;mapred.tasktracker.reduce.tasks.maximum&lt;/name&gt;<BR>&lt;value&gt;2&lt;/value&gt;<BR>&lt;description&gt;The 
maximum number of reduce tasks that will be run<BR>simultaneously by a task 
tracker.<BR>&lt;/description&gt;<BR>&lt;/property&gt;<BR><STRONG 
style="FONT-WEIGHT: bold">单个node新加硬盘</STRONG><BR>1.修改需要新加硬盘的node的dfs.data.dir，用逗号分隔新、旧文件目录<BR>2.重启dfs<BR><STRONG 
style="FONT-WEIGHT: bold">同步hadoop 代码</STRONG><BR>hadoop-env.sh<BR># host:path 
where hadoop code should be rsync'd from.&nbsp; Unset by default.<BR># export 
HADOOP_MASTER=master:/home/$USER/src/hadoop<BR><STRONG 
style="FONT-WEIGHT: bold">用命令合并HDFS小文件</STRONG><BR>hadoop fs -getmerge 
&lt;src&gt; &lt;dest&gt;<BR><STRONG style="FONT-WEIGHT: bold">重启reduce 
job方法</STRONG><BR>Introduced recovery of jobs when JobTracker restarts. This 
facility is off by default.<BR>Introduced config parameters 
"mapred.jobtracker.restart.recover", "mapred.jobtracker.job.history.block.size", 
and "mapred.jobtracker.job.history.buffer.size".<BR>还未验证过。<BR><STRONG 
style="FONT-WEIGHT: bold">IO写操作出现问题</STRONG><BR>0-1246359584298, infoPort=50075, 
ipcPort=50020):Got exception while serving blk_-5911099437886836280_1292 to 
/172.16.100.165:<BR>java.net.SocketTimeoutException: 480000 millis timeout while 
waiting for channel to be ready for write. ch : 
java.nio.channels.SocketChannel[connected local=/<BR>172.16.100.165:50010 
remote=/172.16.100.165:50930]<BR>at 
org.apache.hadoop.net.SocketIOWithTimeout.waitForIO(SocketIOWithTimeout.java:185)<BR>at 
org.apache.hadoop.net.SocketOutputStream.waitForWritable(SocketOutputStream.java:159)<BR>at 
org.apache.hadoop.net.SocketOutputStream.transferToFully(SocketOutputStream.java:198)<BR>at 
org.apache.hadoop.hdfs.server.datanode.BlockSender.sendChunks(BlockSender.java:293)<BR>at 
org.apache.hadoop.hdfs.server.datanode.BlockSender.sendBlock(BlockSender.java:387)<BR>at 
org.apache.hadoop.hdfs.server.datanode.DataXceiver.readBlock(DataXceiver.java:179)<BR>at 
org.apache.hadoop.hdfs.server.datanode.DataXceiver.run(DataXceiver.java:94)<BR>at 
java.lang.Thread.run(Thread.java:619)<BR>It seems there are many reasons that it 
can timeout, the example given in<BR>HADOOP-3831 is a slow reading 
client.<BR>解决办法：在hadoop-site.xml中设置dfs.datanode.socket.write.timeout=0试试；<BR>My 
understanding is that this issue should be fixed in Hadoop 0.19.1 so that<BR>we 
should leave the standard timeout. However until then this can help<BR>resolve 
issues like the one you're seeing.<BR><STRONG 
style="FONT-WEIGHT: bold">HDFS退服节点的方法</STRONG><BR>目前版本的dfsadmin的帮助信息是没写清楚的，已经file了一个bug了，正确的方法如下：<BR>1. 
将 dfs.hosts 置为当前的 slaves，文件名用完整路径，注意，列表中的节点主机名要用大名，即 uname -n 可以得到的那个。<BR>2. 将 
slaves 中要被退服的节点的全名列表放在另一个文件里，如 slaves.ex，使用 dfs.host.exclude 参数指向这个文件的完整路径<BR>3. 
运行命令 bin/hadoop dfsadmin -refreshNodes<BR>4. web界面或 bin/hadoop dfsadmin -report 
可以看到退服节点的状态是 Decomission in progress，直到需要复制的数据复制完成为止<BR>5. 完成之后，从 slaves 里（指 
dfs.hosts 指向的文件）去掉已经退服的节点<BR>附带说一下 -refreshNodes 命令的另外三种用途：<BR>2. 
添加允许的节点到列表中（添加主机名到 dfs.hosts 里来）<BR>3. 直接去掉节点，不做数据副本备份（在 dfs.hosts 里去掉主机名）<BR>4. 
退服的逆操作——停止 exclude 里面和 dfs.hosts 里面都有的，正在进行 decomission 的节点的退服，也就是把 Decomission 
in progress 的节点重新变为 Normal （在 web 界面叫 in service)<BR><STRONG 
style="FONT-WEIGHT: bold">hadoop 学习借鉴</STRONG><BR>1. 解决hadoop 
OutOfMemoryError问题：<BR>&lt;property&gt;<BR>&lt;name&gt;mapred.child.java.opts&lt;/name&gt;<BR>&lt;value&gt;-Xmx800M 
-server&lt;/value&gt;<BR>&lt;/property&gt;<BR>With the right JVM size in your 
hadoop-site.xml , you will have to copy this<BR>to all mapred nodes and restart 
the cluster.<BR>或者：hadoop jar jarfile [main class] -D 
mapred.child.java.opts=-Xmx800M<BR>2. Hadoop java.io.IOException: Job failed! at 
org.apache.hadoop.mapred.JobClient.runJob(JobClient.java:1232) while 
indexing.<BR>when i use nutch1.0,get this error:<BR>Hadoop java.io.IOException: 
Job failed! at org.apache.hadoop.mapred.JobClient.runJob(JobClient.java:1232) 
while 
indexing.<BR>这个也很好解决：<BR>可以删除conf/log4j.properties，然后可以看到详细的错误报告<BR>我这儿出现的是out 
of memory<BR>解决办法是在给运行主类org.apache.nutch.crawl.Crawl加上参数：-Xms64m 
-Xmx512m<BR>你的或许不是这个问题，但是能看到详细的错误报告问题就好解决了<BR><STRONG 
style="FONT-WEIGHT: bold">distribute 
cache使用</STRONG><BR>类似一个全局变量，但是由于这个变量较大，所以不能设置在config文件中，转而使用distribute 
cache<BR>具体使用方法：(详见《the definitive guide》,P240)<BR>1. 
在命令行调用时：调用-files，引入需要查询的文件(可以是local file, HDFS file(使用hdfs://xxx?)), 或者 
-archives (JAR,ZIP, tar等)<BR>% hadoop jar job.jar 
MaxTemperatureByStationNameUsingDistributedCacheFile /<BR>-files 
input/ncdc/metadata/stations-fixed-width.txt input/ncdc/all output<BR>2. 
程序中调用：<BR>public void configure(JobConf conf) {<BR>metadata = new 
NcdcStationMetadata();<BR>try {<BR>metadata.initialize(new 
File("stations-fixed-width.txt"));<BR>} catch (IOException e) {<BR>throw new 
RuntimeException(e);<BR>}<BR>}<BR>另外一种间接的使用方法：在hadoop-0.19.0中好像没有<BR>调用addCacheFile()或者addCacheArchive()添加文件，<BR>使用getLocalCacheFiles() 
或 getLocalCacheArchives() 获得文件<BR><STRONG 
style="FONT-WEIGHT: bold">hadoop的job显示web</STRONG><BR>There are web-based 
interfaces to both the JobTracker (MapReduce master) and NameNode (HDFS master) 
which display status pages about the state of the entire system. By default, 
these are located at [WWW] http://job.tracker.addr:50030/ and [WWW] 
http://name.node.addr:50070/.<BR><STRONG 
style="FONT-WEIGHT: bold">hadoop监控</STRONG><BR>OnlyXP(52388483) 
131702<BR>用nagios作告警，ganglia作监控图表即可<BR><STRONG style="FONT-WEIGHT: bold">status 
of 255 error</STRONG><BR>错误类型：<BR>java.io.IOException: Task process exit with 
nonzero status of 255.<BR>at 
org.apache.hadoop.mapred.TaskRunner.run(TaskRunner.java:424)<BR>错误原因：<BR>Set 
mapred.jobtracker.retirejob.interval and mapred.userlog.retain.hours to higher 
value. By default, their values are 24 hours. These might be the reason for 
failure, though I'm not sure<BR><STRONG style="FONT-WEIGHT: bold">split 
size</STRONG><BR>FileInputFormat input splits: (详见 《the definitive 
guide》P190)<BR>mapred.min.split.size: default=1, the smallest valide size in 
bytes for a file split.<BR>mapred.max.split.size: default=Long.MAX_VALUE, the 
largest valid size.<BR>dfs.block.size: default = 64M, 系统中设置为128M。<BR>如果设置 
minimum split size &gt; block size, 
会增加块的数量。(猜想从其他节点拿去数据的时候，会合并block，导致block数量增多)<BR>如果设置maximum split size &lt; 
block size, 会进一步拆分block。<BR>split size = max(minimumSize, min(maximumSize, 
blockSize));<BR>其中 minimumSize &lt; blockSize &lt; maximumSize.<BR><STRONG 
style="FONT-WEIGHT: bold">sort by value</STRONG><BR>hadoop 不提供直接的sort by 
value方法，因为这样会降低mapreduce性能。<BR>但可以用组合的办法来实现，具体实现方法见《the definitive guide》, 
P250<BR>基本思想：<BR>1. 组合key/value作为新的key；<BR>2. 重载partitioner，根据old 
key来分割；<BR>conf.setPartitionerClass(FirstPartitioner.class);<BR>3. 
自定义keyComparator：先根据old key排序，再根据old 
value排序；<BR>conf.setOutputKeyComparatorClass(KeyComparator.class);<BR>4. 
重载GroupComparator, 也根据old key 来组合；&nbsp; 
conf.setOutputValueGroupingComparator(GroupComparator.class);<BR><STRONG 
style="FONT-WEIGHT: bold">small input files的处理</STRONG><BR>对于一系列的small 
files作为input file，会降低hadoop效率。<BR>有3种方法可以将small file合并处理：<BR>1. 将一系列的small 
files合并成一个sequneceFile，加快mapreduce速度。<BR>详见WholeFileInputFormat及SmallFilesToSequenceFileConverter,《the 
definitive guide》, P194<BR>2. 
使用CombineFileInputFormat集成FileinputFormat，但是未实现过；<BR>3. 使用hadoop 
archives(类似打包)，减少小文件在namenode中的metadata内存消耗。(这个方法不一定可行，所以不建议使用)<BR>方法：<BR>将/my/files目录及其子目录归档成files.har，然后放在/my目录下<BR>bin/hadoop 
archive -archiveName files.har /my/files /my<BR>查看files in the 
archive:<BR>bin/hadoop fs -lsr har://my/files.har<BR><STRONG 
style="FONT-WEIGHT: bold">skip bad records</STRONG><BR>JobConf conf = new 
JobConf(ProductMR.class);<BR>conf.setJobName("ProductMR");<BR>conf.setOutputKeyClass(Text.class);<BR>conf.setOutputValueClass(Product.class);<BR>conf.setMapperClass(Map.class);<BR>conf.setReducerClass(Reduce.class);<BR>conf.setMapOutputCompressorClass(DefaultCodec.class);<BR>conf.setInputFormat(SequenceFileInputFormat.class);<BR>conf.setOutputFormat(SequenceFileOutputFormat.class);<BR>String 
objpath = "abc1";<BR>SequenceFileInputFormat.addInputPath(conf, new 
Path(objpath));<BR>SkipBadRecords.setMapperMaxSkipRecords(conf, 
Long.MAX_VALUE);<BR>SkipBadRecords.setAttemptsToStartSkipping(conf, 
0);<BR>SkipBadRecords.setSkipOutputPath(conf, new 
Path("data/product/skip/"));<BR>String output = 
"abc";<BR>SequenceFileOutputFormat.setOutputPath(conf, new 
Path(output));<BR>JobClient.runJob(conf);<BR>For skipping failed tasks try : 
mapred.max.map.failures.percent<BR><STRONG style="FONT-WEIGHT: bold">restart 
单个datanode</STRONG><BR>如果一个datanode 
出现问题，解决之后需要重新加入cluster而不重启cluster，方法如下：<BR>bin/hadoop-daemon.sh start 
datanode<BR>bin/hadoop-daemon.sh start jobtracker<BR><STRONG 
style="FONT-WEIGHT: bold">reduce exceed 100%</STRONG><BR>"Reduce Task Progress 
shows &gt; 100% when the total size of map outputs (for a<BR>single reducer) is 
high "<BR>造成原因：<BR>在reduce的merge过程中，check progress有误差，导致status &gt; 
100%，在统计过程中就会出现以下错误：java.lang.ArrayIndexOutOfBoundsException: 3<BR>at 
org.apache.hadoop.mapred.StatusHttpServer$TaskGraphServlet.getReduceAvarageProgresses(StatusHttpServer.java:228)<BR>at 
org.apache.hadoop.mapred.StatusHttpServer$TaskGraphServlet.doGet(StatusHttpServer.java:159)<BR>at 
javax.servlet.http.HttpServlet.service(HttpServlet.java:689)<BR>at 
javax.servlet.http.HttpServlet.service(HttpServlet.java:802)<BR>at 
org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:427)<BR>at 
org.mortbay.jetty.servlet.WebApplicationHandler.dispatch(WebApplicationHandler.java:475)<BR>at 
org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:567)<BR>at 
org.mortbay.http.HttpContext.handle(HttpContext.java:1565)<BR>at 
org.mortbay.jetty.servlet.WebApplicationContext.handle(WebApplicationContext.java:635)<BR>at 
org.mortbay.http.HttpContext.handle(HttpContext.java:1517)<BR>at 
org.mortbay.http.HttpServer.service(HttpServer.java:954)<BR>jira地址：<BR><STRONG 
style="FONT-WEIGHT: bold">counters</STRONG><BR>3中counters：<BR>1. built-in 
counters: Map input bytes, Map output records...<BR>2. enum 
counters<BR>调用方式：<BR>enum Temperature 
{<BR>MISSING,<BR>MALFORMED<BR>}<BR>reporter.incrCounter(Temperature.MISSING, 
1)<BR>结果显示：<BR>09/04/20 06:33:36 INFO mapred.JobClient:&nbsp;&nbsp; Air 
Temperature Recor<BR>09/04/20 06:33:36 INFO 
mapred.JobClient:&nbsp;&nbsp;&nbsp;&nbsp; Malformed=3<BR>09/04/20 06:33:36 INFO 
mapred.JobClient:&nbsp;&nbsp;&nbsp;&nbsp; Missing=66136856<BR>3. dynamic 
countes:<BR>调用方式：<BR>reporter.incrCounter("TemperatureQuality", 
parser.getQuality(),1);<BR>结果显示：<BR>09/04/20 06:33:36 INFO 
mapred.JobClient:&nbsp;&nbsp; TemperatureQuality<BR>09/04/20 06:33:36 INFO 
mapred.JobClient:&nbsp;&nbsp;&nbsp;&nbsp; 2=1246032<BR>09/04/20 06:33:36 INFO 
mapred.JobClient:&nbsp;&nbsp;&nbsp;&nbsp; 1=973422173<BR>09/04/20 06:33:36 INFO 
mapred.JobClient:&nbsp;&nbsp;&nbsp;&nbsp; 0=1</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold">7: Namenode in safe mode<SPAN 
class=Apple-converted-space>&nbsp;</SPAN></STRONG><BR>解决方法<BR>bin/hadoop 
dfsadmin -safemode leave<BR><STRONG 
style="FONT-WEIGHT: bold">8:java.net.NoRouteToHostException: No route to 
host</STRONG><BR>j解决方法：<BR>sudo /etc/init.d/iptables stop<BR><STRONG 
style="FONT-WEIGHT: bold">9：更改namenode后，在hive中运行select 
依旧指向之前的namenode地址</STRONG><BR>这是因为：When youcreate a table, hive actually stores 
the location of the table (e.g.<BR>hdfs://ip:port/user/root/...) in the SDS and 
DBS tables in the metastore . So when I bring up a new cluster the master has a 
new IP, but hive's metastore is still pointing to the locations within the 
old<BR>cluster. I could modify the metastore to update with the new IP everytime 
I bring up a cluster. But the easier and simpler solution was to just use an 
elastic IP for the 
master<BR>所以要将metastore中的之前出现的namenode地址全部更换为现有的namenode地址</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold">10：Your DataNode is started and you can create 
directories with bin/hadoop dfs -mkdir, but you get an error message when you 
try to put files into the HDFS (e.g., when you run a command like bin/hadoop dfs 
-put).</STRONG><BR>解决方法：<BR>Go to the HDFS info web page (open your web browser 
and go to http://namenode:dfs_info_port where namenode is the hostname of your 
NameNode and dfs_info_port is the port you chose dfs.info.port; if followed the 
QuickStart on your personal computer then this URL will be 
http://localhost:50070). Once at that page click on the number where it tells 
you how many DataNodes you have to look at a list of the DataNodes in your 
cluster.<BR>If it says you have used 100% of your space, then you need to free 
up room on local disk(s) of the DataNode(s).<BR>If you are on Windows then this 
number will not be accurate (there is some kind of bug either in Cygwin's df.exe 
or in Windows). Just free up some more space and you should be okay. On one 
Windows machine we tried the disk had 1GB free but Hadoop reported that it was 
100% full. Then we freed up another 1GB and then it said that the disk was 
99.15% full and started writing data into the HDFS again. We encountered this 
bug on Windows XP SP2.<BR><STRONG style="FONT-WEIGHT: bold">11：Your DataNodes 
won't start, and you see something like this in 
logs/*datanode*:</STRONG><BR>Incompatible namespaceIDs in 
/tmp/hadoop-ross/dfs/data<BR>原因：<BR>Your Hadoop namespaceID became corrupted. 
Unfortunately the easiest thing to do reformat the HDFS.<BR>解决方法：<BR>You need to 
do something like this:<BR>bin/stop-all.sh<BR>rm -Rf 
/tmp/hadoop-your-username/*<BR>bin/hadoop namenode -format<BR><STRONG 
style="FONT-WEIGHT: bold">12：You can run Hadoop jobs written in Java (like the 
grep example), but your HadoopStreaming jobs (such as the Python example that 
fetches web page titles) won't work.</STRONG><BR>原因：<BR>You might have given 
only a relative path to the mapper and reducer programs. The tutorial originally 
just specified relative paths, but absolute paths are required if you are 
running in a real cluster.<BR>解决方法：<BR>Use absolute paths like this from the 
tutorial:<BR>bin/hadoop jar contrib/hadoop-0.15.2-streaming.jar 
/<BR>-mapper&nbsp; 
$HOME/proj/hadoop/multifetch.py&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
/<BR>-reducer 
$HOME/proj/hadoop/reducer.py&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
/<BR>-input&nbsp;&nbsp; 
urls/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
/<BR>-output&nbsp; titles</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold">13： 2009-01-08 10:02:40,709 ERROR metadata.Hive 
(Hive.java:getPartitions(499)) - javax.jdo.JDODataStoreException: Required table 
missing : ""PARTITIONS"" in Catalog "" Schema "". JPOX requires this table to 
perform its persistence operations. Either your MetaData is incorrect, or you 
need to enable "org.jpox.autoCreateTables"</STRONG><BR>原因：就是因为在 hive-default.xml 
里把 org.jpox.fixedDatastore 设置成 true 了</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px">starting 
namenode, logging to 
/home/hadoop/HadoopInstall/hadoop/bin/../logs/hadoop-hadoop-namenode-hadoop.out<BR>localhost: 
starting datanode, logging to 
/home/hadoop/HadoopInstall/hadoop/bin/../logs/hadoop-hadoop-datanode-hadoop.out<BR>localhost: 
starting secondarynamenode, logging to 
/home/hadoop/HadoopInstall/hadoop/bin/../logs/hadoop-hadoop-secondarynamenode-hadoop.out<BR>localhost: 
Exception in thread "main" 
java.lang.NullPointerException<BR>localhost:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at 
org.apache.hadoop.net.NetUtils.createSocketAddr(NetUtils.java:130)<BR>localhost:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at 
org.apache.hadoop.dfs.NameNode.getAddress(NameNode.java:116)<BR>localhost:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at 
org.apache.hadoop.dfs.NameNode.getAddress(NameNode.java:120)<BR>localhost:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at 
org.apache.hadoop.dfs.SecondaryNameNode.initialize(SecondaryNameNode.java:124)<BR>localhost:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at 
org.apache.hadoop.dfs.SecondaryNameNode.&lt;init&gt;(SecondaryNameNode.java:108)<BR>localhost:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at org.apache.hadoop.dfs.SecondaryNameNode.main(SecondaryNameNode.java:460)</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold">14：09/08/31 18:25:45 INFO hdfs.DFSClient: Exception in 
createBlockOutputStream java.io.IOException:Bad connect ack with firstBadLink 
192.168.1.11:50010</STRONG><BR>&gt; 09/08/31 18:25:45 INFO hdfs.DFSClient: 
Abandoning block blk_-8575812198227241296_1001<BR>&gt; 09/08/31 18:25:51 INFO 
hdfs.DFSClient: Exception in createBlockOutputStream java.io.IOException:<BR>Bad 
connect ack with firstBadLink 192.168.1.16:50010<BR>&gt; 09/08/31 18:25:51 INFO 
hdfs.DFSClient: Abandoning block blk_-2932256218448902464_1001<BR>&gt; 09/08/31 
18:25:57 INFO hdfs.DFSClient: Exception in createBlockOutputStream 
java.io.IOException:<BR>Bad connect ack with firstBadLink 
192.168.1.11:50010<BR>&gt; 09/08/31 18:25:57 INFO hdfs.DFSClient: Abandoning 
block blk_-1014449966480421244_1001<BR>&gt; 09/08/31 18:26:03 INFO 
hdfs.DFSClient: Exception in createBlockOutputStream java.io.IOException:<BR>Bad 
connect ack with firstBadLink 192.168.1.16:50010<BR>&gt; 09/08/31 18:26:03 INFO 
hdfs.DFSClient: Abandoning block blk_7193173823538206978_1001<BR>&gt; 09/08/31 
18:26:09 WARN hdfs.DFSClient: DataStreamer Exception: java.io.IOException: 
Unable<BR>to create new 
block.<BR>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at 
org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.nextBlockOutputStream(DFSClient.java:2731)<BR>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at 
org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.access$2000(DFSClient.java:1996)<BR>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at 
org.apache.hadoop.hdfs.DFSClient$DFSOutputStream$DataStreamer.run(DFSClient.java:2182)<BR>&gt;<BR>&gt; 
09/08/31 18:26:09 WARN hdfs.DFSClient: Error Recovery for block 
blk_7193173823538206978_1001<BR>bad datanode[2] nodes == null<BR>&gt; 09/08/31 
18:26:09 WARN hdfs.DFSClient: Could not get block locations. Source file 
"/user/umer/8GB_input"<BR>- Aborting...<BR>&gt; put: Bad connect ack with 
firstBadLink 192.168.1.16:50010<BR>解决方法：<BR>I have resolved the issue:<BR>What i 
did:<BR>1) '/etc/init.d/iptables stop' --&gt;stopped firewall<BR>2) 
SELINUX=disabled in '/etc/selinux/config' file.--&gt;disabled selinux<BR>I 
worked for me after these two changes</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold">解决jline.ConsoleReader.readLine在Windows上不生效问题方法</STRONG><BR>在 
CliDriver.java的main()函数中，有一条语句reader.readLine，用来读取标准输入，但在Windows平台上该语句总是 
返回null，这个reader是一个实例jline.ConsoleReader实例，给Windows 
Eclipse调试带来不便。<BR>我们可以通过使用java.util.Scanner.Scanner来替代它，将原来的<BR>while 
((line=reader.readLine(curPrompt+"&gt; ")) != null)<BR>复制代码<BR>替换为：<BR>Scanner 
sc = new Scanner(System.in);<BR>while ((line=sc.nextLine()) != 
null)<BR>复制代码<BR>重新编译发布，即可正常从标准输入读取输入的SQL语句了。<BR><STRONG 
style="FONT-WEIGHT: bold">Windows eclispe调试hive报does not have a 
scheme错误可能原因</STRONG><BR>1、Hive配置文件中的“hive.metastore.local”配置项值为false，需要将它修改为true，因为是单机版<BR>2、没有设置HIVE_HOME环境变量，或设置错误<BR>3、 
“does not have a scheme”很可能是因为找不到“hive-default.xml”。使用Eclipse调试Hive时，遇到找不到hive- 
default.xml的解决方法：http://bbs.hadoopor.com/thread-292-1-1.html</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px">1、中文问题<BR>从url中解析出中文,但hadoop中打印出来仍是乱码?我们曾经以为hadoop是不支持中文的，后来经过查看源代码，发现hadoop仅仅是不支持以gbk格式输出中文而己。<BR>这是TextOutputFormat.class中的代码，hadoop默认的输出都是继承自FileOutputFormat来 
的，FileOutputFormat的两个子类一个是基于二进制流的输出，一个就是基于文本的输出TextOutputFormat。<BR>public class 
TextOutputFormat&lt;K, V&gt; extends FileOutputFormat&lt;K, V&gt; {<BR>protected 
static class LineRecordWriter&lt;K, V&gt;<BR>implements RecordWriter&lt;K, V&gt; 
{<BR>private static final String utf8 = “UTF-8″;//这里被写死成了utf-8<BR>private static 
final byte[] newline;<BR>static {<BR>try {<BR>newline = 
“/n”.getBytes(utf8);<BR>} catch (UnsupportedEncodingException uee) {<BR>throw 
new IllegalArgumentException(”can’t find ” + utf8 + ” 
encoding”);<BR>}<BR>}<BR>…<BR>public LineRecordWriter(DataOutputStream out, 
String keyValueSeparator) {<BR>this.out = out;<BR>try 
{<BR>this.keyValueSeparator = keyValueSeparator.getBytes(utf8);<BR>} catch 
(UnsupportedEncodingException uee) {<BR>throw new 
IllegalArgumentException(”can’t find ” + utf8 + ” 
encoding”);<BR>}<BR>}<BR>…<BR>private void writeObject(Object o) throws 
IOException {<BR>if (o instanceof Text) {<BR>Text to = (Text) 
o;<BR>out.write(to.getBytes(), 0, to.getLength());//这里也需要修改<BR>} else 
{<BR>out.write(o.toString().getBytes(utf8));<BR>}<BR>}<BR>…<BR>}<BR>可以看出hadoop默认的输出写死为utf-8，因此如果decode中文正确，那么将Linux客户端的character设为utf-8是可以看到中文的。因为hadoop用utf-8的格式输出了中文。<BR>因为大多数数据库是用gbk来定义字段的，如果想让hadoop用gbk格式输出中文以兼容数据库怎么办？<BR>我们可以定义一个新的类：<BR>public 
class GbkOutputFormat&lt;K, V&gt; extends FileOutputFormat&lt;K, V&gt; 
{<BR>protected static class LineRecordWriter&lt;K, V&gt;<BR>implements 
RecordWriter&lt;K, V&gt; {<BR>//写成gbk即可<BR>private static final String gbk = 
“gbk”;<BR>private static final byte[] newline;<BR>static {<BR>try {<BR>newline = 
“/n”.getBytes(gbk);<BR>} catch (UnsupportedEncodingException uee) {<BR>throw new 
IllegalArgumentException(”can’t find ” + gbk + ” 
encoding”);<BR>}<BR>}<BR>…<BR>public LineRecordWriter(DataOutputStream out, 
String keyValueSeparator) {<BR>this.out = out;<BR>try 
{<BR>this.keyValueSeparator = keyValueSeparator.getBytes(gbk);<BR>} catch 
(UnsupportedEncodingException uee) {<BR>throw new 
IllegalArgumentException(”can’t find ” + gbk + ” 
encoding”);<BR>}<BR>}<BR>…<BR>private void writeObject(Object o) throws 
IOException {<BR>if (o instanceof Text) 
{<BR>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text to = (Text) 
o;<BR>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; out.write(to.getBytes(), 0, 
to.getLength());<BR>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else 
{<BR>out.write(o.toString().getBytes(gbk));<BR>}<BR>}<BR>…<BR>}<BR>然后在mapreduce代码中加入conf1.setOutputFormat(GbkOutputFormat.class)<BR>即可以gbk格式输出中文。<BR><STRONG 
style="FONT-WEIGHT: bold"><BR></STRONG>2、某次正常运行mapreduce实例时,抛出错误<BR>java.io.IOException: 
All datanodes xxx.xxx.xxx.xxx:xxx are bad. Aborting…<BR>at 
org.apache.hadoop.dfs.DFSClient$DFSOutputStream.processDatanodeError(DFSClient.java:2158)<BR>at 
org.apache.hadoop.dfs.DFSClient$DFSOutputStream.access$1400(DFSClient.java:1735)<BR>at 
org.apache.hadoop.dfs.DFSClient$DFSOutputStream$DataStreamer.run(DFSClient.java:1889)<BR>java.io.IOException: 
Could not get block locations. Aborting…<BR>at 
org.apache.hadoop.dfs.DFSClient$DFSOutputStream.processDatanodeError(DFSClient.java:2143)<BR>at 
org.apache.hadoop.dfs.DFSClient$DFSOutputStream.access$1400(DFSClient.java:1735)<BR>at 
org.apache.hadoop.dfs.DFSClient$DFSOutputStream$DataStreamer.run(DFSClient.java:1889)<BR>经查明，问题原因是linux机器打开了过多的文件导致。用命令ulimit 
-n可以发现linux默认的文件打开数目为1024，修改/ect/security/limit.conf，增加hadoop soft 
65535<BR>再重新运行程序（最好所有的datanode都修改），问题解决<BR>3、运行一段时间后hadoop不能stop-all.sh的问题，显示报错<BR>no 
tasktracker to stop ，no datanode to stop<BR>问 
题的原因是hadoop在stop的时候依据的是datanode上的mapred和dfs进程号。而默认的进程号保存在/tmp下，linux默认会每 
隔一段时间（一般是一个月或者7天左右）去删除这个目录下的文件。因此删掉hadoop-hadoop-jobtracker.pid和hadoop- 
hadoop-namenode.pid两个文件后，namenode自然就找不到datanode上的这两个进程了。<BR>在配置文件中的export 
HADOOP_PID_DIR可以解决这个问题</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px">问题：<BR>Incompatible 
namespaceIDs in /usr/local/hadoop/dfs/data: namenode namespaceID = 405233244966; 
datanode namespaceID = 33333244<BR>原因：<BR>在 每次执行hadoop namenode 
-format时，都会为NameNode生成namespaceID,，但是在hadoop.tmp.dir目录下的DataNode还是保留上次的 
namespaceID，因为namespaceID的不一致，而导致DataNode无法启动，所以只要在每次执行hadoop namenode 
-format之前，先删除hadoop.tmp.dir目录就可以启动成功。请注意是删除hadoop.tmp.dir对应的本地目录，而不是HDFS 目录。</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold"><STRONG style="FONT-WEIGHT: bold">Problem:<SPAN 
class=Apple-converted-space>&nbsp;</SPAN></STRONG>Storage directory not 
exist</STRONG><BR>2010-02-09 21:37:53,203 INFO 
org.apache.hadoop.hdfs.server.common.Storage: Storage directory 
D:/hadoop/run/dfs_name_dir does not exist.<BR>2010-02-09 21:37:53,203 ERROR 
org.apache.hadoop.hdfs.server.namenode.FSNamesystem: FSNamesystem initialization 
failed.<BR>org.apache.hadoop.hdfs.server.common.InconsistentFSStateException: 
Directory D:/hadoop/run/dfs_name_dir is in an inconsistent state: storage 
directory does not exist or is not accessible.<BR>solution: 
是因为存储目录D:/hadoop/run/dfs_name_dir不存在，所以只需要手动创建好这个目录即可。<BR><STRONG 
style="FONT-WEIGHT: bold">Problem:<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><STRONG 
style="FONT-WEIGHT: bold">NameNode is not formatted</STRONG><SPAN 
class=Apple-converted-space>&nbsp;</SPAN></STRONG><BR>solution: 
是因为HDFS还没有格式化，只需要运行hadoop namenode -format一下，然后再启动即可</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px 'Microsoft YaHei', 微软雅黑, Arial, 'Lucida Grande', Tahoma, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 10px; BORDER-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 2em; -webkit-text-stroke-width: 0px"><STRONG 
style="FONT-WEIGHT: bold">bin/hadoop jps后报如下异常：</STRONG><BR>Exception in thread 
"main" java.lang.NullPointerException<BR>at 
sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager.activeVms(LocalVmManager.java:127)<BR>at 
sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostProvider.activeVms(MonitoredHostProvider.java:133)<BR>at 
sun.tools.jps.Jps.main(Jps.java:45)<BR>原因为：<BR>系统根目录/tmp文件夹被删除了。重新建立/tmp文件夹即可。<BR>bin/hive中出现 
unable to&nbsp; create log directory /tmp/...也可能是这个原因</P></body>
</html>
