<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Using Gradle for a Mixed Java and Groovy Project</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; PADDING-RIGHT: 0px" 
href="http://www.gradle.org">Gradle</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>is a build system to build software 
projects. Gradle supports convention over configuration, build-in takss and 
dependency support. We write a build script in Groovy (!) to define our Gradle 
build. This means we can use all available Groovy (and Java) stuff we want, like 
control structures, classes and methods. In this post we see how we can use 
Gradle to build a very simple mixed Java and Groovy project.</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">To 
get started we must first have installed Gradle on our computers. We can read 
the manual to see how to do that. To check Gradle is installed correctly and we 
can run build script we type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle -v</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at our shell 
prompt and we must get a result with the versions of Java, Groovy, operating 
system, Ivy and more.</P>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">It 
is time to create our Groovy/Java project. We create a new directory<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">mixed-project</CODE>:</P><PRE class=brush:shell style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">$ mkdir mixed-project
$ cd mixed-project
$ touch build.gradle
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Gradle 
uses plugins to define taks and conventions for certain type of projects. The 
plugins are distributed with Gradle and not (yet) downloaded from the internet. 
One of the plugins is the Groovy plugin. This plugin is extended from the Java 
plugin, so if we use the Groovy plugin we also have all functionality of the 
Java plugin. And that is exactly what we need for our project. The plugin 
provides a set of tasks like compile, build, assemble, clean and a directory 
structure convention. The plugin assumes we save our source files in<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/main/java</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>and<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/main/groovy</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>for example. The structure is similar 
to Maven conventions. As a matter of fact Gradle also has a Maven plugin that 
add Maven tasks like build, install to our build. For now we just need the 
Groovy plugin, so we open the file<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>in a text editor and add the following 
line:</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">usePlugin 'groovy'
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">To 
see the lists of tasks we can now execute by just including this one line we 
return to our shell and type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle -t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and we get the 
following list of tasks:</P><PRE class=brush:plain;light:true style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">------------------------------------------------------------
Root Project
------------------------------------------------------------
:assemble - Builds all Jar, War, Zip, and Tar archives.
   -&gt; :jar
:build - Assembles and tests this project.
   -&gt; :assemble, :check
:buildDependents - Assembles and tests this project and all projects that depend on it.
   -&gt; :build
:buildNeeded - Assembles and tests this project and all projects it depends on.
   -&gt; :build
:check - Runs all checks.
   -&gt; :test
:classes - Assembles the main classes.
   -&gt; :compileGroovy, :compileJava, :processResources
:clean - Deletes the build directory.
:compileGroovy - Compiles the main Groovy source.
   -&gt; :compileJava
:compileJava - Compiles the main Java source.
:compileTestGroovy - Compiles the test Groovy source.
   -&gt; :classes, :compileTestJava
:compileTestJava - Compiles the test Java source.
   -&gt; :classes
:groovydoc - Generates the groovydoc for the source code.
:jar - Generates a jar archive with all the compiled classes.
   -&gt; :classes
:javadoc - Generates the javadoc for the source code.
   -&gt; :classes
:processResources - Processes the main resources.
:processTestResources - Processes the test resources.
:test - Runs the unit tests.
   -&gt; :classes, :testClasses
:testClasses - Assembles the test classes.
   -&gt; :compileTestGroovy, :compileTestJava, :processTestResources
rule - Pattern: build&lt;ConfigurationName&gt;: Builds the artifacts belonging to the configuration.
rule - Pattern: upload&lt;ConfigurationName&gt;Internal: Uploads the project artifacts of a configuration to the internal Gradle repository.
rule - Pattern: upload&lt;ConfigurationName&gt;: Uploads the project artifacts of a configuration to a public Gradle repository.
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We 
don't have any code yet in our project so we don't have any task to run right 
now, but it is good to know all these tasks can be executed once we have our 
code. Okay, we have to create our directory structure according to the 
conventions to make it all work without to much configuration. We can do this 
all by hand but we can also use a trick described in the<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; PADDING-RIGHT: 0px" 
href="http://docs.codehaus.org/display/GRADLE/Cookbook#Cookbook-Creatingsourceandresourcedirectories">Gradle 
cookbook</A>. We add a new task to our<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>file to create all necessary 
directories for us.</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">task initProject(description: 'Initialize project directory structure.') &lt;&lt; {
    // Default package to be created in each src dir.
    def defaultPackage = 'com/mrhaki/blog'
    
    ['java', 'groovy', 'resources'].each {
        // convention.sourceSets contains the directory structure
        // for our Groovy project. So we use this struture
        // and make a directory for each node.
        convention.sourceSets.all."${it}".srcDirs*.each { dir -&gt;
            def newDir = new File(dir, defaultPackage)
            logger.info "Creating directory $newDir"  // gradle -i shows this message.
            newDir.mkdirs()  // Create dir.
        }
    }
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">At 
the command prompt we type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle initProject</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the 
complete source directory struture is now created. Let's add some Java and 
Groovy source files to our project. We keep it very simple, because this post is 
about Gradle and not so much about Java and Groovy. We create a Java interface 
in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/main/java/com/mrhaki/blog/GreetingService.java</CODE>:</P><PRE class=brush:java style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">package com.mrhaki.blog;

public interface GreetingService {
    String greet(final String name);
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We 
provide a Java implementation for this interface in<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/main/java/com/mrhaki/blog/JavaGreetingImpl.java</CODE>:</P><PRE class=brush:java style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">package com.mrhaki.blog;

public class JavaGreetingImpl implements GreetingService {
    public String greet(final String name) {
        return "Hello " + (name != null ? name : "stranger") + ". Greeting from Java.";
    }
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">And 
a Groovy implementation in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/main/groovy/com/mrhaki/blog/GroovyGreetingImpl.groovy</CODE>:</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">package com.mrhaki.blog

class GroovyGreetingImpl implements GreetingService {
    String greet(String name) {
        "Hello ${name ?: 'stranger'}. Greeting from Groovy"
    }
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We 
have learned Gradle uses Groovy to define and execute the build script. But this 
bundled Groovy is not available for our project. We can choose which version of 
Groovy we want and don't have to rely on the version that is shipped with 
Gradle. We must define a dependency to the Groovy library version we want to use 
in our project in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE>. 
So we must add the following lines to the<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>file:</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">repositories {
    mavenCentral()  // Define Maven central repository to look for dependencies.
}

dependencies {
    groovy 'org.codehaus.groovy:groovy:1.6.5'  // group:name:version is a nice shortcut notation for dependencies. 
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In 
our shell we type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle compileJava compileGroovy</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>to compile the source files we just 
created. If we didn't make any typos we should see the message<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">BUILD 
SUCCESSFUL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the command 
prompt. Let's add some test classes to our project to test our simple 
implementations. We create<CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/test/java/com/mrhaki/blog/JavaGreetingTest.java</CODE>:</P><PRE class=brush:java style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">package com.mrhaki.blog;

import static org.junit.Assert.*;
import org.junit.Test;

public class JavaGreetingTest {
    final GreetingService service = new JavaGreetingImpl();

    @Test public void testGreet() {
        assertEquals("Hello mrhaki. Greeting from Java.", service.greet("mrhaki"));
    }
    
    @Test public void testGreetNull() {
        assertEquals("Hello stranger. Greeting from Java.", service.greet(null));
    }
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">And 
we create a Groovy test class in<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/test/groovy/com/mrhaki/blog/GroovyGreetingTest.groovy</CODE>:</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">package com.mrhaki.blog;

import static org.junit.Assert.*;
import org.junit.Test;

public class JavaGreetingTest {
    final GreetingService service = new JavaGreetingImpl();

    @Test public void testGreet() {
        assertEquals("Hello mrhaki. Greeting from Java.", service.greet("mrhaki"));
    }
    
    @Test public void testGreetNull() {
        assertEquals("Hello stranger. Greeting from Java.", service.greet(null));
    }
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We 
add a dependency to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>for JUnit:</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">dependencies {
    groovy 'org.codehaus.groovy:groovy:1.6.5'  // group:name:version is a nice shortcut notation for dependencies. 
    testCompile 'junit:junit:4.7'
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We 
return to the command prompt and type<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle test</CODE>. Gradle compiles the code and runs the JUnit tests. The 
results of the test are stored in<CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build/reports/tests</CODE>. 
We can see the results in a web browser if we open<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">index.html</CODE>:</P><A 
onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" 
href="http://4.bp.blogspot.com/_-vJw6r2W-bw/SvVEgl3OKBI/AAAAAAAADEU/kFE_u_3pGHE/s1600-h/blog-gg-mixed1.png"><IMG 
id=BLOGGER_PHOTO_ID_5401298654811006994 
style="CURSOR: pointer; BORDER-TOP: 0px; HEIGHT: 213px; BORDER-RIGHT: 0px; WIDTH: 320px; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px auto 10px; BORDER-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px" 
border=0 alt="" 
src="Using_Gradle_for_a_Mixed_Java_and_Groovy_Project.png"></A><SPAN 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; WIDOWS: 1; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Let's 
leave the coding part for now. It it time to package our code. We can use<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle build</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create a 
JAR file with the compiled classes from the<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">src/main</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>directories. But first we make a change 
to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>to include a version number. If we 
run<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle -r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>we get an 
overview of all properties for our project. Among them is the version property. 
We can set a value for the version property in the<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>file. We also set the basename for the 
archive:</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">version = "1.0-${new Date().format('yyyyMMdd')"  // The script is all Groovy, so we make use of all methods and features.
archivesBaseName = 'greeting'
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We 
return to the command prompt and type<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">$ 
gradle build</CODE>. Gradle runs and if all is successful we see in<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build/libs</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>the file<CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">greeting-1.0-20091107.jar</CODE>. 
Here is the complete<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style="BORDER-TOP: rgb(212,217,217) 1px solid; BORDER-RIGHT: rgb(212,217,217) 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: rgb(212,217,217) 1px solid; COLOR: rgb(59,59,59); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; FONT: 0.93em/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 4px; MARGIN: 0px; BORDER-LEFT: rgb(212,217,217) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(239,241,241); font-stretch: normal; border-radius: 0px; text-shadow: none">build.gradle</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>with all changes we made:</P><PRE class=brush:groovy style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 16px/24px Menlo, Monaco, 'Liberation Mono', Consolas, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-stretch: normal">usePlugin 'groovy'

version = "1.0-${new Date().format('yyyyMMdd')}" // The script is all Groovy, so we make use of all methods and features.
archivesBaseName = 'greeting'

repositories {
    mavenCentral()  // Define Maven central repository to look for dependencies.
}

dependencies {
    groovy 'org.codehaus.groovy:groovy:1.6.5'  // group:name:version is a nice shortcut notation for dependencies. 
    testCompile 'junit:junit:4.7'
}

task initProject(description: 'Initialize project directory structure.') &lt;&lt; {
    // Default package to be created in each src dir.
    def defaultPackage = 'com/mrhaki/blog'
    
    ['java', 'groovy', 'resources'].each {
        // convention.sourceSets contains the directory structure
        // for our Groovy project. So we use this struture
        // and make a directory for each node.
        convention.sourceSets.all."${it}".srcDirs.each { dirs -&gt;
            dirs.each { dir -&gt;
                def newDir = new File(dir, defaultPackage)
                logger.info "Creating directory $newDir"  // gradle -i shows this message.
                newDir.mkdirs()  // Create dir.
            }
        }
    }
}
</PRE>
<P 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 300 16px/28px 'Helvetica Neue', Helvetica, Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 20px; BORDER-LEFT: 0px; WIDOWS: 1; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We 
learned how we can start a new project from scratch and with little coding get a 
compiled and tested archive wth our code. In future blog posts we learn more 
about Gradle, for example the multi-project support.</P></body>
</html>
