<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!--
 Archive processed by SingleFile 
 url: http://www.jroller.com/melix/entry/customizing_groovy_compilation_process 
 saved date: Mon Apr 01 2013 13:50:53 GMT+0800 (中国标准时间) 
--><head>
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <meta name="generator" content="Roller Weblogger 3.1"> <!-- leave this for stats -->
   <title>Cedric Champeau's Weblog : Weblog</title>
       <link rel="alternate" type="application/atom+xml" title="Atom Entries" href="http://www.jroller.com/melix/feed/entries/atom">
    <link rel="alternate" type="application/atom+xml" title="Atom Comments" href="http://www.jroller.com/melix/feed/comments/atom">
    <link rel="alternate" type="application/rss+xml" title="RSS Entries" href="http://www.jroller.com/melix/feed/entries/rss">
    <link rel="alternate" type="application/rss+xml" title="RSS Comments" href="http://www.jroller.com/melix/feed/comments/rss">
           <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.jroller.com/melix/rsd">
       <style type="text/css">           /*  
Theme Name: Almost Spring
Theme URI: http://beccary.com/goodies/wordpress-themes/
Description: A two column theme. Light and simple with greens and oranges. 
Version: 1.2
Author: Becca Wei
Author URI: http://beccary.com
*/



/* Basics and Typography */

body {
	margin: 0;
	padding: 0;
	background: #E8E8CE url(data:text/plain;base64,R0lGODlhAQD0AYcAAOjozujoz+npz+np0Onp0erq0erq0urq0+vr0+vr1Ovr1ezs1ezs1uzs1+3t1+3t2O7u2e7u2u/v2+/v3PDw3fDw3vHx3vHx3/Hx4PLy4PLy4fLy4vPz4vPz4/Pz5PT05PT05fT05vX15vX15wi9AEcIHEiwoMGDCBMqXMiwoUOBIiJGDEGxYggQGDNqxPih4wcPIEN66ECypEmSHFKm3MCyJUsNMGPKhJmhJoabOHFe2Mmz504LFioIHUqUgtGjSI9OWMq06QQJUKNKhRqhqtWrVSFo3coVwoOvYMOCdUC2rNkGDRioXctW7YK3cOEqUJCgrt27dRHo3av3gF+/BgILHmyggOHDBQgoVjygsePHjQVIniwggOUAADJr3sy5s+fPoEOLHk26dOaAADs=) repeat-x fixed;
	font-size: 78%;
	font-family: "Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, sans-serif;
	color: #333;
	text-align: center;
}
p {
	font-size: 1em;
	line-height: 1.5em;
	margin: 1.2em 0;
}
ol, ul {
	font-size: 1em;
	line-height: 1.5em;
	margin: 1.2em 0 1.2em 2em;
	padding: 0;
}
h1, h2, h3, h4, h5, h6 {
	margin: 1.2em 0;
	font-family: "Lucida Grande", Tahoma, Arial, sans-serif;
	color: #9BBB38; 
}
h1, h2 {
	font-size: 1.4em;
}
h3 {
	font-size: 1.3em;
}
h4 {
	font-size: 1.2em;
}
a {
	text-decoration: none;
}
a:link {
	color: #E58712;
}
a:visited {
	color: #B96F17;
}
a:hover, a:active {
	color: #9BBB38;
}
input, textarea, select {
	border: 1px solid #C1C0B5;
	background-color: #FAFAF0;
	color: #333;
	font-size: 1em;
	font-family: "Lucida Sans Unicode", Tahoma, Arial, sans-serif;
}
blockquote {
	margin: 0 20px;
	padding: 0 20px;
	border-left: 4px solid #E8E7D0;
	font-size: 0.9em;
}
code {
	font-family: monospace;
	color: #666;
}
form, img {
	margin: 0;
	padding: 0;
	border: 0;
}
.small {
	font-size: 0.9em;
	color: #999;
}



/* Layout */

#wrapper {
	margin: 0 auto;
	width: 1050px;
	background-color: #FFF;
	text-align: left;
}
#header {
	padding: 30px 0 0 0;
	background-color: #F5F5E7;
	border-bottom: 10px solid #9BBB38;
}

	/* Header Styles */
	#header h1 {
		margin: 0;
		font-size: 1.8em;
	}
	#header h1 a {
		text-decoration: none;
		color: #80904F;
	}
	
	
#content {
	float: left;
	padding: 0 20px;
	voice-family: "\"}\""; 
	voice-family: inherit;
} 
html>body #content {
	width: 750px;
}
#sidebar {
	float: left;
	padding: 1.8em 20px 0 20px;
	width: 200px;
	font-size: 0.9em;
	voice-family: "\"}\""; 
	voice-family: inherit;
} 
html>body #sidebar {
	width: 200px;
}
* html #content, * html #sidebar {
	overflow: hidden; /* For IE */
}

	/* Lots of sidebar styles, so they're below */

#footer {
	clear: both;
	font-size: 0.9em;
	text-align: right;
}

	/* Footer Styles */
	#footer p {
		margin: 0;
		padding: 10px 0 20px 0;
		background-color: #E8E8CE;
		border-top: 10px solid #9BBB38;
		font-size: 0.9em;
		text-align: right;
	}

	
	
/* Sidebar Styles */

#sidebar h2 {
	display: inline;
	margin: 1.2em 0 0.6em 0;
	padding: 0 10px 0 0;
	background: url(data:text/plain;base64,R0lGODlhBQAHAIcAAJu7OP///wcAAAgUAAMIHEgQQACDAg0iPMhQYUOBAQEAOw==) no-repeat center right;
	font-size: 1.1em;
}
#sidebar ul {
	margin: 0;
	padding: 0;
	list-style-type: none;
}
#sidebar ul li {
}
#sidebar ul ul {
	margin: 1.2em 0;
	border-top: 1px solid #E8E7D0;
	background-color: #FAFAF0;
}
#sidebar ul ul li {
	padding: 0 0 0 10px;
	border-bottom: 1px solid #E8E7D0;
}
#sidebar ul ul li a {
	display: block;
	margin: 0 0 0 -10px;
	padding: 2px 10px 0 10px;
	width: 190px;
	voice-family: "\"}\""; 
	voice-family: inherit;
	width: 170px;
} 
html>body #sidebar ul ul li a {
	width: 170px;
}
#sidebar ul ul li a:hover {
	background-color: #FFF;
}
/* Nested lists? */
#sidebar ul ul ul {
	margin: 0;
	border: none;
}
#sidebar ul ul ul li {
	margin: 0 0 0 -10px;
	padding: 0 0 0 25px;
	border-bottom: none;
	border-top: 1px solid #E8E7D0;
}
#sidebar ul ul ul li a {
	margin: 0 0 0 -25px;
	padding: 2px 10px 0 25px;
	width: 190px;
	voice-family: "\"}\""; 
	voice-family: inherit;
	width: 155px;
} 
html>body #sidebar ul ul ul li a {
	width: 155px;
}



/* Blog */

.post {
}
.posttitle {
	margin-bottom: 0;
	width: 100%;
	color: #FFF;
	overflow: auto;
	/* Width and overflow to clear '.posttitle a' */
}
.posttitle a {
	float: left;
	padding: 0 10px;
	background: #9BBB38 url(data:text/plain;base64,R0lGODlhCQBkAIcAAAAAAJu7OJy8Op28O528PJ69PaG/RKXCTK3HW7DJYrHKZMXYjMzdms3dnNDfoujn0Ojn0eno0eno0+rp1ezr2O3s2u703fLx5PPz5/H25PTz6PT06fb57fv79/z8+f39+/7+/f///v///////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAMAACMALAAAAAAJAGQAAAiKAA0gYJBBhEGDAQIUKODgoIiECQko4IAQYgACCUA8tHixwUaOBSxwTChgwciEB04GGDCipcuXMGPKnEmzps2bOHPq3Mmzp8+fQIMKHUq0qNGjSJMqXcq0qdOnUJ1KoIDBg0MRDx5EiLDBYdasECp8MPgVbIUQWMs+gKAhrdoIHdSCvSA364S6awMCADs=) no-repeat top right;
}
.posttitle a:link, .posttitle a:visited {
	color: #FFF;	
}
.posttitle a:hover, .posttitle a:active {
	background: #E8E7D0 url(data:text/plain;base64,R0lGODlhCQBkAIcAAAAAAJu7OJy8Op28O528PJ69PaG/RKXCTK3HW7DJYrHKZMXYjMzdms3dnNDfoujn0Ojn0eno0eno0+rp1ezr2O3s2u703fLx5PPz5/H25PTz6PT06fb57fv79/z8+f39+/7+/f///v///////wiKAA0gYJBBhEGDAQIUKODgoIiECQko4IAQYgACCUA8tHixwUaOBSxwTChgwciEB04GGDCipcuXMGPKnEmzps2bOHPq3Mmzp8+fQIMKHUq0qNGjSJMqXcq0qdOnUJ1KoIDBg0MRDx5EiLDBYdasECp8MPgVbIUQWMs+gKAhrdoIHdSCvSA364S6awMCADs=) no-repeat 100% -91px;
	color: #80904F;
}
.postmeta {
	margin-top: 0;
	padding-top: 1px;
	background: url(data:text/plain;base64,R0lGODlh4AEBAIcAAJu7OJu7OZy8Op28O528PJ29PZ69PZ69Pp+9P5++QJ++QaC+QaC+QqC/Q6G/RKLARaLARqLAR6PASKPBSKTBSaTBSqTBS6XCTKbCTabCTqbDT6fDT6fDUKjEUajEUqjEU6nEU6nFVKrFVarFVqvGV6vGWKvGWazGWqzHWq3HW63HXK3IXa7IXa7IXq/IX6/JYK/JYbDJYbDJYrHKY7HKZLLKZbLLZrPLZ7PLaLPMaLTMabTMarTMa7XNbLbNbbbNbrbOb7fOb7fOcLjOcbjPcrjPc7nPc7nQdLrQdbrQdrvRd7vReLzRebzRerzSer3Se73SfL7Sfb7Tfb7Tfr/Tf7/UgL/UgcDUgcDUgsHVg8HVhMLVhcLWhsPWh8PWiMTXicTXisXXi8XYjMbYjcbYjsfZj8fZkMjZkcjaksjak8nak8nalMrblcrblsvcl8vcmMzcmczcmszdms3dm83dnM7dnc7enc7ens/en8/eoNDfodDfotHgo9HgpNLgpNLgpdLhptPhp9PhqNTiqdTiqtXiq9XjrNbjrdbjrtfkr9fksNjksdjlstnls9nltNrmtdrmttvmttvmt9vnuNznudznutzout3ou93ovN7ovd7pvd7pvt/pv9/pwODqweDqwuHqw+HrxOLrxOLrxeLsxuPsx+PsyOTsyOTtyeTtyuXty+buzObuzebuzufuz+fvz+fv0Ojv0ejw0unw0+nw1Orx1erx1uvx1uvx1+vy2Ozy2ezy2u3y2u3z2+3z3O7z3e703e/03u/03+/04PD14fD14vH14/H25PL25PL25fL25vP35/P36PT36PT46fT46vX46/b57Pb57fb57vf57/f67/j68Pj68fj68vn78/r79Pr89fr89vv89vv89/v9+Pz9+fz9+v39+v3++/3+/P7+/f///v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAP8ALAAAAADgAQEAAAj/AAEIHEiwoMGDCBMqXMiwoUOCAQQIGECggIEDCBIoWMCggQMHDyBEkCBhAoUKFi5cwJBBwwYOHTx8ABFCxIgRJEqYOIEihYoVLFq4eAEDRgwZM2jQqGHjBo4cOnbw6NHDxw8gQYQMIVLEyBEkSZIoWcKkiZMnUKJImUKlShUrV7Bk0aJlC5cuXrx8ARNGjJgxZMqUMXMGTRo1a9i0aePmDRw4ceTMoVPHzh08efTo2cOnj58/gAIJEjSIUKFChg4hSsRa0SJGjRo5egQpkqRJlCpZuoQpk6ZNmzh18uTpE6hQokaRKmXqFKpUqlStYtXK1StYsWLJmjWLVi1bt3DlUdK1i1cvX7+ABRM2jBixYsaMHUOWTNkyZs2cPYMGLZq0adRUY8012GSTjTbbcMNNN958A0444oxDTjnlmHPOhRhmqOGGHHbo4YcghijiiBgGBAA7) no-repeat top left;
	font-size: 0.9em;
	color: #999;
}
.postentry {
}
.permalink {
	margin: 0 0 0 0;
	padding: 0 0 0 14px;
	background: url(data:text/plain;base64,R0lGODlhCAAJAIcAAJmZmejozP///wkAAAgjAAUAGEhQYICDCAcGIAhgYUOEBxVKdAgxYkOGFCsCEMhwY0AAOw==) no-repeat center left;
}
.commentslink {
	padding: 0 0 0 17px;
	background: url(data:text/plain;base64,R0lGODlhCwANAIcAAJmZmejozP///wg5AAUIHEiwoMGBABIqBIAwgMOHARgCcLhwYkSLEB8mpLjR4saMGj0upCgAI0SGAkdGPFhyJcuEAgMCADs=) no-repeat center left;
}



/* Comments */

#commentlist {
	margin: 1.2em 0;
	padding: 0;
	border-bottom: 1px solid #E8E7D0;
	list-style-type: none;
}
#commentlist li {
	border-top: 1px solid #E8E7D0;
	padding: 1px 20px;
	background-color: #FFF;
}
.alt {
	background-color: #FAFAF0 !important;
}
.commenttitle {
	margin-bottom: 0;
	font-size: 1.1em;
}
.commentmeta {
	margin-top: 0;
	font-size: 0.9em;
	color: #999;
}
.comments-head {
   margin: 1.2em 0;
   font-size: 150%;
   font-family: "Lucida Grande", Tahoma, Arial, sans-serif;
   color: #9BBB38; 
}
.comment {
   padding: 5px;
   margin: 0px 0px 2em 0px;
   width: 98%;
   border-top: 1px solid #a5a5a5;   
   border-bottom: 1px solid #a5a5a5;
}
.comment-details {
   font-size:70%;
   color: grey;
}
.next-previous {
   text-align: center;
   margin: 1em 0px 1em 0px;
}




    </style><style type="text/css"></style>
<style type="text/css" rel="stylesheet">/* Pretty printing styles. Used with prettify.js. */

.str { color: #080; }
.kwd { color: #008; }
.com { color: #800; }
.typ { color: #606; }
.lit { color: #066; }
.pun { color: #660; }
.pln { color: #000; }
.tag { color: #008; }
.atn { color: #606; }
.atv { color: #080; }
.dec { color: #606; }
pre.prettyprint { padding: 2px; border: 1px solid #888; }

@media print {
  .str { color: #060; }
  .kwd { color: #006; font-weight: bold; }
  .com { color: #600; font-style: italic; }
  .typ { color: #404; font-weight: bold; }
  .lit { color: #044; }
  .pun { color: #440; }
  .pln { color: #000; }
  .tag { color: #006; font-weight: bold; }
  .atn { color: #404; }
  .atv { color: #060; }
}
</style>



<link type="image/x-icon" rel="shortcut icon" href="data:text/plain; charset=x-user-defined;base64,AAABAAEAEBAAAAEAGABoAwAAFgAAACgAAAAQAAAAIAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKh46FACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACfKh47Kh46FACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACeFACfKh47Kh47XsbTbt7rZs7bZs7bbuLrUqa21QlK3QlLNl5zZs7batbjatriFACeFACfKh47Kh47cuLvy5+f////////s3N3ZsLS2QlK/bXX7+Pj////8+vrfwMKFACeFACfKh47Kh468RFXdvsD////////RoKW6RFW4QlThxcj////////buby7RFWFACeFACfKh47Kh464RFTfwcP////////Tpqq6RFTAc3v7+Pj////38fG8X2q2QlKFACeFACfKh47Kh464RFTfwcP////////RoKW8RFXlzc/////////Xr7O4QlS1QlKFACeFACfKh47Kh464RFTfwcP////////n09Xlzc/////9+/vjycu2QlK2QlK1QlKFACeFACfKh47Kh464RFTfwcP////////q19ngwMPt3+D9+/vs29zOl5y3QlK1QlKFACeFACfKh47Kh464RFTfwcP////////RoKW8RFW4SFfv4eL////9+/zHh463QlSFACeFACfKh47Kh464RFTfwcP////////Tpqq4QlS5RFTev8L////////cury4RFSFACeFACfKh47Kh466RFTev8L////////So6e6RFW6RFTn0tX////////Vq6+4QlSFACeFACfKh47Kh47Kh47o1NX////////fwMPNkJbevsH////////x5ea8YGu2QlKFACeFACfKh47Kh47n09Xt3+Dt3+Dt3+Dt3+Du3+Hw4+Tp1tjZsrW7XWm2QlK1QlKFACeFACfKh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh46FACfKh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh47Kh44AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"></head>

<body data-twttr-rendered="true">

<div id="wrapper">

<div id="header">
<h1>Cedric Champeau's Weblog</h1>
</div>

<div id="content">

    
                <div class="next-previous">
                                                        « <a href="http://www.jroller.com/melix/entry/inline_assembly_with_groovy_evil">Inline assembly with...</a> |  
                <a href="http://www.jroller.com/melix">Main</a>
                | <a href="http://www.jroller.com/melix/entry/jlangdetect_0_3_released_with">JLangDetect 0.3...</a> »
                        </div>

                    
    <div class="post">
        <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tbody><tr>
        <td>
        <a name="customizing_groovy_compilation_process" id="customizing_groovy_compilation_process"></a>
        <h2 class="storytitle" id="customizing_groovy_compilation_process"><a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process">Customizing Groovy compilation process</a></h2>			
        <p class="meta">03:00PM May 12, 2011 in category <u>Java</u> by Cédric Champeau</p>
        <p class="meta">Tags:  <a href="http://www.jroller.com/melix/tags/1.8">1.8</a> <a href="http://www.jroller.com/melix/tags/compilation">compilation</a> <a href="http://www.jroller.com/melix/tags/groovy">groovy</a> <a href="http://www.jroller.com/melix/tags/programming">programming</a></p>
        </td>
        <td width="130">

<br>
<!-- Placez cette balise où vous souhaitez faire apparaître le gadget Bouton +1. -->
<div style="height: 20px; width: 90px; display: inline-block; text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; background-position: initial initial; background-repeat: initial initial;" id="___plusone_0"></div>

        </td>
        </tr>
        </tbody></table>
        <div class="postentry">
                            <h1>Groovy compilation customizers</h1>
<p>
Groovy 1.8 introduced the notion of compilation customizers. They are used to tweak the compilation process, in order, for example, to add imports to scripts transparently, apply AST transformations without annotating classes or limiting the language for security. In this post, I will show you how to use them, and how you can write your own customizer.</p>
<p>Prior to Groovy 1.8, you would have to override the <i>GroovyClassLoader</i> and write several utility classes to add compilation units to the compilation process. While this worked, this was not really easy to do. Our first example will show you how easy it is now :</p>
<h1>Adding imports transparently</h1>
<p>
One of the recurring questions on the Groovy mailing lists was how one could add default imports to scripts. Groovy, for example, imports the java.util classes by default, which improves readability, but there was no simple way to add your own. Now, you can use the <i>ImportCustomizer</i> class :</p>
<pre class="prettyprint"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">codehaus</span><span class="pun">.</span><span class="pln">groovy</span><span class="pun">.</span><span class="pln">control</span><span class="pun">.</span><span class="pln">customizers</span><span class="pun">.</span><span class="typ">ImportCustomizer</span><span class="pln"><br><br></span><span class="pun">...</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> importCustomizer </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ImportCustomizer</span><span class="pun">()</span><span class="pln"><br></span><span class="com">// regular imports</span><span class="pln"><br>importCustomizer</span><span class="pun">.</span><span class="pln">addImports</span><span class="pun">(</span><span class="str">'java.util.concurrent.atomic.AtomicInteger'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'java.util.concurrent.atomic.AtomicBoolean'</span><span class="pun">)</span><span class="pln"><br></span><span class="com">// star imports</span><span class="pln"><br>importCustomizer</span><span class="pun">.</span><span class="pln">addStarImports</span><span class="pun">(</span><span class="str">'java.util.concurrent'</span><span class="pun">)</span><span class="pln"><br></span><span class="com">// static star imports</span><span class="pln"><br>importCustomizer</span><span class="pun">.</span><span class="pln">addStaticStar</span><span class="pun">(</span><span class="str">'java.lang.Math'</span><span class="pun">)</span></pre>
<p>Then all you need to do is to create a compiler configuration where you will register the customizer :</p>
<pre class="prettyprint"><span class="kwd">def</span><span class="pln"> configuration </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CompilerConfiguration</span><span class="pun">()</span><span class="pln"><br>configuration</span><span class="pun">.</span><span class="pln">addCompilationCustomizers</span><span class="pun">(</span><span class="pln">importCustomizer</span><span class="pun">)</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> shell </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GroovyShell</span><span class="pun">(</span><span class="pln">configuration</span><span class="pun">)</span><span class="pln"><br>shell</span><span class="pun">.</span><span class="pln">evaluate </span><span class="str">"""<br>&nbsp; new AtomicInteger(0) // won't throw ClassNotFoundException<br>"""</span></pre>
<p>The import customizer provides additional methods to specify, for example, import aliases. Take a look at the javadoc for more details. Now we will take a look at another customizer which is provided by default in Groovy 1.8 and allows you to secure the execution of your scripts.</p>

<h1>Securing user scripts thanks to the SecureASTCustomizer</h1>

<p>The goal of this customizer is to filter the script to allow or disallow some constructs. For example, one building an arithmetic shell with Groovy would want to disallow the user to import or create classes, and limit the syntax to the basic operators. This can be achieved thanks to the <i>SecureASTCustomizer</i>, which filters out AST nodes and throws a <i>SecurityException</i> whenever a disallowed construct is used.</p>
<p>Let's take a look at the example from the Javadoc, which defines an arithmetic shell :</p>
<pre class="prettyprint"><span class="kwd">final</span><span class="pln"> </span><span class="typ">ImportCustomizer</span><span class="pln"> imports </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ImportCustomizer</span><span class="pun">().</span><span class="pln">addStaticStars</span><span class="pun">(</span><span class="str">'java.lang.Math'</span><span class="pun">)</span><span class="pln"> </span><span class="com">// add static import of java.lang.Math</span><span class="pln"><br></span><span class="kwd">final</span><span class="pln"> </span><span class="typ">SecureASTCustomizer</span><span class="pln"> secure </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureASTCustomizer</span><span class="pun">()</span><span class="pln"><br>secure</span><span class="pun">.</span><span class="kwd">with</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; closuresAllowed </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"><br>&nbsp; &nbsp; methodDefinitionAllowed </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"><br><br>&nbsp; &nbsp; importsWhitelist </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[]</span><span class="pln"><br>&nbsp; &nbsp; staticImportsWhitelist </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[]</span><span class="pln"><br>&nbsp; &nbsp; staticStarImportsWhitelist </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">'java.lang.Math'</span><span class="pun">]</span><span class="pln"> </span><span class="com">// only java.lang.Math is allowed</span><span class="pln"><br><br>&nbsp; &nbsp; tokensWhitelist </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLUS</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MINUS</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MULTIPLY</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DIVIDE</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOD</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; POWER</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLUS_PLUS</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MINUS_MINUS</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMPARE_EQUAL</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMPARE_NOT_EQUAL</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMPARE_LESS_THAN</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMPARE_LESS_THAN_EQUAL</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMPARE_GREATER_THAN</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMPARE_GREATER_THAN_EQUAL</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">].</span><span class="pln">asImmutable</span><span class="pun">()</span><span class="pln"><br><br>&nbsp; &nbsp; constantTypesClassesWhiteList </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Integer</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Float</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Long</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Double</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">BigDecimal</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">TYPE</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Long</span><span class="pun">.</span><span class="pln">TYPE</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Float</span><span class="pun">.</span><span class="pln">TYPE</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Double</span><span class="pun">.</span><span class="pln">TYPE<br>&nbsp; &nbsp; </span><span class="pun">].</span><span class="pln">asImmutable</span><span class="pun">()</span><span class="pln"><br><br>&nbsp; &nbsp; receiversClassesWhiteList </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Math</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Integer</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Float</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Double</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Long</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">BigDecimal</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">].</span><span class="pln">asImmutable</span><span class="pun">()</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="com">// configuration ends here</span><span class="pln"><br><br></span><span class="typ">CompilerConfiguration</span><span class="pln"> config </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CompilerConfiguration</span><span class="pun">()</span><span class="pln"><br>config</span><span class="pun">.</span><span class="pln">addCompilationCustomizers</span><span class="pun">(</span><span class="pln">imports</span><span class="pun">,</span><span class="pln"> secure</span><span class="pun">)</span><span class="pln"><br></span><span class="typ">GroovyClassLoader</span><span class="pln"> loader </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GroovyClassLoader</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">.</span><span class="pln">classLoader</span><span class="pun">,</span><span class="pln"> config</span><span class="pun">)</span></pre>
<p>First, we allow static usage of java.lang.Math constants thanks to a static import added automatically through the <i>ImportCustomizer</i> we've seen previously. Next comes the secure AST customizer configuration itself, which allows us to :</p>
<ul>
<li>disallow usage of closures and methods
</li><li>disallow imports by setting an empty import whitelist</li>
<li>disallow static imports by setting an empty static import whitelist</li>
<li>only allow static import of java.lang.Math methods and constants</li>
<li>filter out the allowed tokens of the language by allowing mathematical symbols only (tokensWhitelist)</li>
<li>filter out the types allowed to be used in the shell by explicitely specifying a list of allowed classes (note the usage of Float.TYPE, ... for primitive types)</li>
<li>eventually, limit the classes of objects for which method calls are allowed</li>
</ul>
<p>Doing this, a script like this one :</p>
<pre class="prettyprint"><span class="lit">1</span><span class="pun">+</span><span class="lit">1</span></pre>
<p>will run perfectly, while this one :</p>
<pre class="prettyprint"><span class="kwd">def</span><span class="pln"> sum </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x</span><span class="pun">,</span><span class="pln">y </span><span class="pun">-&gt;</span><span class="pln"> x</span><span class="pun">+</span><span class="pln">y </span><span class="pun">}</span></pre>
<p>will fail because we disallowed usage of closures. The whole configuration of this customizer works the same way, by specifying either whitelists or blacklists. However, for a single type of restriction, you cannot specify both. For example, you are allowed to specify a whitelist of imports and a blacklist of tokens, but not a whitelist of imports AND a blacklist of imports.</p>
<p>In addition to the configuration shown in this example, the customizer allows you to further restrict the AST constructs, thanks to the following methods :</p>
<ul>
<li><i>setIndirectImportCheckEnabled</i> : if you enable this, then imports will be checked, but the security rules for imports will also apply to fully qualified class names (aka, classes used without imports but with a FQN). It is likely that you'll need to enable this option if you want to restrict imports.</li>
<li><i>setExpressionsBlacklist</i> (or <i>setExpressionsWhitelist</i>) : the Groovy abstract syntax tree consists of expressions. For example, a DeclarationExpression represents a variable declaration in a script. Thanks to the expression blacklist, you will be able to limit the AST nodes which will be allowed in your script. Setting <i>expressionsBlacklist = [DeclarationExpression]</i>, for example, will prevent the users from declaring variables.</li>
<li><i>setStatementBlacklist</i> (or <i>setStatementsWhitelist</i>) : in a same way, language constructs known as statements can be restricted too. For example, you may want to disallow usage of <i>while</i> loops. To do so, you could configure the customizer like this : <i>statementsBlacklist = [WhileStatement]</i>. If the parser encounters such a statement, a <i>SecurityException</i> will be thrown.</li>
</ul>
<p>Eventually, if all those configuration options are not sufficient, you may write your own expression or statement checkers, that will, for example, inspect the expression itself and decide whether it is authorized or not using advanced rules. To do this, you must implement an <i>ExpressionChecker</i> (respectively <i>StatementChecker</i>). As a demonstration of this concept, here is an implementation of an expression checker that will authorize any declaration expression, unless the name of the declared variable starts with a capital letter :</p>
<pre class="prettyprint"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">codehaus</span><span class="pun">.</span><span class="pln">groovy</span><span class="pun">.</span><span class="pln">control</span><span class="pun">.</span><span class="pln">customizers</span><span class="pun">.</span><span class="typ">SecureASTCustomizer</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">codehaus</span><span class="pun">.</span><span class="pln">groovy</span><span class="pun">.</span><span class="pln">ast</span><span class="pun">.</span><span class="pln">expr</span><span class="pun">.*</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">codehaus</span><span class="pun">.</span><span class="pln">groovy</span><span class="pun">.</span><span class="pln">control</span><span class="pun">.</span><span class="typ">CompilerConfiguration</span><span class="pln"><br><br></span><span class="kwd">class</span><span class="pln"> </span><span class="typ">DeclarationExpressionChecker</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">SecureASTCustomizer</span><span class="pun">.</span><span class="typ">ExpressionChecker</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">boolean</span><span class="pln"> isAuthorized</span><span class="pun">(</span><span class="typ">Expression</span><span class="pln"> expression</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">expression </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">DeclarationExpression</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">expression</span><span class="pun">.</span><span class="pln">leftExpression </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">VariableExpression</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">def</span><span class="pln"> name </span><span class="pun">=</span><span class="pln"> expression</span><span class="pun">.</span><span class="pln">leftExpression</span><span class="pun">.</span><span class="pln">name<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]==</span><span class="pln">name</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="pln">toUpperCase</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">true</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> secure </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureASTCustomizer</span><span class="pun">()</span><span class="pln"><br>secure</span><span class="pun">.</span><span class="pln">addExpressionCheckers</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">DeclarationExpressionChecker</span><span class="pun">())</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> config </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CompilerConfiguration</span><span class="pun">()</span><span class="pln"><br>config</span><span class="pun">.</span><span class="pln">addCompilationCustomizers</span><span class="pun">(</span><span class="pln">secure</span><span class="pun">)</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> shell </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GroovyShell</span><span class="pun">(</span><span class="pln">config</span><span class="pun">)</span><span class="pln"><br>shell</span><span class="pun">.</span><span class="pln">evaluate </span><span class="str">"""<br>&nbsp; &nbsp;def allowed = 1+1<br>&nbsp; &nbsp;def Disallowed = 1+1<br>"""</span></pre>
<p>In this alternative example (suggested by <a href="http://twitter.com/#!/hansamann/status/68676573552852992" target="_blank">Sven Haiges</a>), we will prevent the user from calling <i>System.exit()</i> :</p>
<pre class="prettyprint"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">codehaus</span><span class="pun">.</span><span class="pln">groovy</span><span class="pun">.</span><span class="pln">control</span><span class="pun">.</span><span class="pln">customizers</span><span class="pun">.</span><span class="typ">SecureASTCustomizer</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">codehaus</span><span class="pun">.</span><span class="pln">groovy</span><span class="pun">.</span><span class="pln">ast</span><span class="pun">.</span><span class="pln">expr</span><span class="pun">.*</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">codehaus</span><span class="pun">.</span><span class="pln">groovy</span><span class="pun">.</span><span class="pln">control</span><span class="pun">.</span><span class="typ">CompilerConfiguration</span><span class="pln"><br><br></span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MethodCallExpressionChecker</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">SecureASTCustomizer</span><span class="pun">.</span><span class="typ">ExpressionChecker</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">boolean</span><span class="pln"> isAuthorized</span><span class="pun">(</span><span class="typ">Expression</span><span class="pln"> expression</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">expression </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">MethodCallExpression</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">expression</span><span class="pun">.</span><span class="pln">objectExpression </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">ClassExpression</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">expression</span><span class="pun">.</span><span class="pln">objectExpression</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="pln">name</span><span class="pun">==</span><span class="typ">System</span><span class="pun">.</span><span class="pln">name</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">expression</span><span class="pun">.</span><span class="pln">methodAsString</span><span class="pun">==</span><span class="str">'exit'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">true</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> secure </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureASTCustomizer</span><span class="pun">()</span><span class="pln"><br>secure</span><span class="pun">.</span><span class="pln">addExpressionCheckers</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MethodCallExpressionChecker</span><span class="pun">())</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> config </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CompilerConfiguration</span><span class="pun">()</span><span class="pln"><br>config</span><span class="pun">.</span><span class="pln">addCompilationCustomizers</span><span class="pun">(</span><span class="pln">secure</span><span class="pun">)</span><span class="pln"><br><br></span><span class="kwd">def</span><span class="pln"> shell </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GroovyShell</span><span class="pun">(</span><span class="pln">config</span><span class="pun">)</span><span class="pln"><br>shell</span><span class="pun">.</span><span class="pln">evaluate </span><span class="str">"""<br>&nbsp; &nbsp;System.exit(0)<br>"""</span></pre>

<h1>Applying AST transformations transparently with the ASTTransformationCustomizer</h1>
<p>The last customizer provided in Groovy 1.8 allows you to transparently add AST transformations to your scripts. This is particularly useful if you think about the new <i>ThreadInterrupt</i> AST transformation, for example, which will not likely be added to scripts by hand. Another advantage of this customizer is to have an alternative to the global AST transformation mechanism, and can also be used to help the development of such global transforms. Usage is fairly easy :</p>
<pre class="prettyprint"><span class="kwd">def</span><span class="pln"> configuration </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CompilerConfiguration</span><span class="pun">()</span><span class="pln"><br>configuration</span><span class="pun">.</span><span class="pln">addCompilationCustomizers</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ASTTransformationCustomizer</span><span class="pun">(</span><span class="typ">Log</span><span class="pun">))</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> shell </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GroovyShell</span><span class="pun">(</span><span class="pln">configuration</span><span class="pun">)</span></pre>
<p>Here, we define an ASTTransformationCustomizer which will automatically apply the @Log AST Transformations to all classes in the compilation unit. Note that it is interesting in two different ways :</p>
<ul>
<li>it prevents the user from having to add the @Log transformation to each class he writes</li>
<li>it allows a local AST transformation (@Log) to be applied just as if it was a global one</li>
</ul>
<p>The second point is important to understand, because it also shows a limit of this customizer : every class in the compilation unit will have the transformation applied, but there is no way to pass AST transformation arguments. For example, here, you cannot change the name of the generated field, while if you used the @Log annotation directly, you could have passed an argument for it. If you need to pass arguments, I encourage you to take a look at the source code of the <i>ASTTransformationCustomizer</i> and write your own customizer.</p>
<p>Transparently adding global AST transformations is not more complicated. Unlike local AST transformations, global AST transformations do not have a corresponding annotation, and do not have arguments, so you must refer to the ASTTransformation class itself :</p>
<pre class="prettyprint"><span class="kwd">def</span><span class="pln"> configuration </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CompilerConfiguration</span><span class="pun">()</span><span class="pln"><br>configuration</span><span class="pun">.</span><span class="pln">addCompilationCustomizers</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ASTTransformationCustomizer</span><span class="pun">(</span><span class="typ">MyASTTransformationClass</span><span class="pun">))</span><span class="pln"><br></span><span class="kwd">def</span><span class="pln"> shell </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GroovyShell</span><span class="pun">(</span><span class="pln">configuration</span><span class="pun">)</span></pre>
<p>The difference from the local case is the type of the class passed as the argument of the customizer constructor. In the case of a local AST transformation, you must pass the annotation class, while in the global case, you pass the AST transformation class directly. Using this customizer, you have an alternative option to the <i>META-INF/services/org.codehaus.groovy.transform.ASTTransformation</i> registration process.</p>
<h1>Writing your own customizer</h1>
<p>In addition to those 3 bundled customizers, you may want to write your own. To to this, you just have to extend the <i>org.codehaus.groovy.control.customizers.CompilationCustomizer</i> abstract class, which is basically a <i>PrimaryClassNodeOperation</i> for which the compiler phase is fixed. If you need to write a customizer, I strongly encourage you to read the <i>ImportCustomizer</i> or <i>ASTTransformation</i> customizer sources, which are quite simple to understand. Eventually, if you have particular needs or see potential improvements to the current implementations, do not hesitate to join the <a href="http://groovy.329449.n5.nabble.com/" target="_blank">mailing list</a>, or raise <a href="http://jira.codehaus.org/browse/GROOVY" target="_blank">JIRA issue</a>.</p>
                    </div>
        <p class="postfeedback">
            <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process" title="Permanent link to this weblog entry" class="permalink">Permalink</a>
                                        <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comments" class="commentsLink">Comments[8]</a>
                    </p>

    </div>
<!-- Placez cette ballise après la dernière balise Bouton +1. -->

    
                       <a name="comments"></a>
    <div class="comments" id="comments">

            <div class="comments-head">Comments:</div>
            
    <br>
                                                            
            <div class="comment odd" id="comment1">
                I'm using the import customizer already, instead of manually appending the imports at the beginning of a string of code.
<br>
<br>Perhaps the ImportCustomizer could be wrapped around by an ImportBuilder which allows them to be specified Scala-style, e.g.
<br>
<br>new ImportBuilder{
<br>  java.{
<br>    lang.{_, Math.PI},
<br>    util.{_, regex.$_, jar.$}
<br>  }
<br>}
<br>
<br>where $ means 'static' and _ means star.
<br>

                <p class="comment-details">
                Posted by
                                    <b>113.57.212.8</b>
                
                on May 15, 2011 at 03:36 AM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1305423396000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                                                                    
            <div class="comment even" id="comment2">
                I think people are looking at this post for possible ways to "sandbox" groovy, but your example for restricting System.exit calls doesn't really do that. Maybe you just mean it as an example, but maybe a note that it's not really a "secure" solution, because you can still do:
<br>
<br>System.methods.find{ it.name == "exit"}.invoke( null, 1 ).
<br>
<br>If you restrict also "System" as a blacklist, you can still Class.forName. You could restrict that but if anyone finds a method that returns a Class they can break out of that as well.
<br>
<br>I know the proper way is to set a SecurityManager and not grant the RuntimePermission exitVM, but if you run a standalone program it gets put into the ProtectionDomain and I haven't found a way to create a GroovyClassLoader that doesn't also pass this on. Actually I've been trying to learn how the Java sandbox works in general and constantly run into roadblocks.
<br>
<br>If anyone knows of a proper and actually secure way to lock down groovy for an embedded, let me know. So far I haven't found one without being very restrictive like the "arithmetic shell" described in this post, but if all you want to do is evaluate (x+y)/b then there are other, better/faster/safer/smaller solutions than groovy.

                <p class="comment-details">
                Posted by
                                    <a rel="nofollow" href="http://gillius.org/"><b>Jason Winnebeck</b></a>
                
                on June 28, 2011 at 03:19 PM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1309267154000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                                                                    
            <div class="comment odd" id="comment3">
                @Jason: You are true : securing completely the System.exit calls require more work, but I think it is possible. You would have to disable some language features like method pointers or reflection, but I agree this requires deep knowledge of what is doable or not. The advantage of the arithmetic shell is that it is highly restrictive, so there are less chances that you find language hacks to call System.exit()...
<br>
<br>

                <p class="comment-details">
                Posted by
                                    <a rel="nofollow" href="http://www.jroller.com/melix"><b>Cédric Champeau</b></a>
                
                on June 29, 2011 at 08:55 AM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1309330522000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                                                                    
            <div class="comment even" id="comment4">
                Hi,
<br>I would like to use the TimedInterrupt transformation using the ASTTransformationCustomizer feature. But, as you mentionned, if using the Annotation class you can not pass arguments (And I need to pass the timeout param).
<br>I'v also looked at the TimedInterruptibleASTTransformation class but I can't see where I could set the timeout.
<br>Do I really have to write my own customizer to be able to set the timeout?
<br>Thanks
<br>PS : It's an embedded script, so I have to set the customizer in plain Java.
<br>

                <p class="comment-details">
                Posted by
                                    <b>sebi</b>
                
                on August 16, 2011 at 07:12 PM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1313514751000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                                                                    
            <div class="comment odd" id="comment5">
                Hi,
<br>I just find out that 1.8.1 supports annotation parameters !
<br>I was still on 1.8.0
<br>

                <p class="comment-details">
                Posted by
                                    <b>sebi</b>
                
                on August 17, 2011 at 09:31 AM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1313566284000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                                                                    
            <div class="comment even" id="comment6">
                I've been using CompilationConfigurations with ImportCustomizers for a while now (nice feature!), but a question just occurred to me.  If I set up one CompilationConfiguration with various customizers, is it safe to share the same configuration between multiple GroovyClassLoaders/GroovyShells?
<br>
<br>Thanks,
<br>Matt

                <p class="comment-details">
                Posted by
                                    <a rel="nofollow" href="http://blog.grovehillsoftware.com"><b>Matthew Passell</b></a>
                
                on July 11, 2012 at 03:45 PM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1342014305000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                                                                    
            <div class="comment odd" id="comment7">
                Hi Matthew!
<br>
<br>This is a good question. I would recommand using different CompilerConfiguration instances for different shells/groovy class loaders. The various customizers are not designed to be thread safe, hence it's better to avoid sharing an instance.
<br>

                <p class="comment-details">
                Posted by
                                    <a rel="nofollow" href="http://www.jroller.com/melix"><b>Cédric Champeau</b></a>
                
                on July 12, 2012 at 09:00 AM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1342076401000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                                                                    
            <div class="comment even" id="comment8">
                Thanks Cédric for answering my question here and on StackOverflow.  I probably wouldn't have bothered with the SO question if JRoller had notified me of your answer here.  Too bad the "Notify me by email of new comments" option didn't work. :(
<br>
<br>Thanks,
<br>Matt

                <p class="comment-details">
                Posted by
                                    <a rel="nofollow" href="http://blog.grovehillsoftware.com"><b>Matthew Passell</b></a>
                
                on July 13, 2012 at 08:17 PM CEST

                <a href="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process#comment-1342203440000" class="entrypermalink" title="comment permalink">#</a>
                </p>

            </div>

                </div>
           
    <div class="comments-form">
    <div class="comments-head">Post a Comment:</div>


    
    <form method="post" action="http://www.jroller.com/melix/entry/customizing_groovy_compilation_process" focus="name" name="commentForm" onsubmit="fixURL(this); return validateComments(this)">    
        <input type="hidden" name="method" value="post">

        <ul>
            <li>
                <label class="desc">Name:</label>
                <input type="text" name="name" class="text large" value="" size="50" maxlength="255">
            </li>


            <li><label class="desc">E-Mail:</label>
                <input type="text" name="email" class="text large" value="" size="50" maxlength="255">
            </li>

            <li><label class="desc">URL:</label>
                <input type="text" name="url" class="text large" value="" size="50" maxlength="255">
            </li>

                    <li><input type="checkbox" class="checkbox" id="notify" name="notify">
                <label for="notify" class="choice">Notify me by email of new comments</label>
            </li>
                    <li>
                <input type="checkbox" class="checkbox" id="rememberInfo" name="rememberInfo">
                <label for="rememberInfo" class="choice">Remember Information?</label>
            </li>
            <li>
                <label class="desc">Your Comment:</label>
                                                <textarea name="content" class="textarea large" cols="100" rows="15"></textarea>
            </li>
            <li class="info">
                <span class="comments-syntax-indicator">
                HTML Syntax:
                                    <span class="disabled">NOT allowed</span>
                                </span>
            </li>
            <li class="info">
               
               <div id="commentAuthenticator"><p>Please answer this simple math question</p><p>4 + 24 = <input name="answer" value=""></p>
</div>
            </li>
            <li>
               <input type="button" class="button" name="post" value="&nbsp;Preview&nbsp;" onclick="this.form.method.value='preview';this.form.submit()">
               <input type="submit" class="button" name="post" value="&nbsp;Post&nbsp;">
            </li>
        </ul>

    </form>

    
    


    </div>
        <br>
        <div class="next-previous">
                                                        « <a href="http://www.jroller.com/melix/entry/inline_assembly_with_groovy_evil">Inline assembly with...</a> |  
                <a href="http://www.jroller.com/melix">Main</a>
                | <a href="http://www.jroller.com/melix/entry/jlangdetect_0_3_released_with">JLangDetect 0.3...</a> »
                        </div>

  
<br>
<br>
           </div>

<div id="sidebar">

<ul>
   <li>
      <h2>About the author</h2><br><br>
      Cedric Champeau is Senior Software Engineer working on the Groovy language at SpringSource/VMware. He lives near Nantes, France. The opinions expressed in this publication are those of the author and do not engage the responsibility of his employer.<br><br>
   </li>
   <li>
</li>
   <li>
      <h2>A propos de l'auteur</h2><br><br>
      Cedric Champeau est ingénieur de développement sénior sur le langage Groovy chez SpringSource/VMware. Il habite près de Nantes, en France.<br><br>
   </li>
   <li>
      <h2>Roller Navbar</h2><center>
          <ul class="rNavigationBar">
        <li class="rNavItem">
            <a href="http://undefined/">Front Page</a>
        </li>
        <li class="rNavItem">
            <a href="http://www.jroller.com/melix/">Weblog</a>
        </li>
                                                                                                                                                                    <li class="rNavItem">
                    <a href="http://www.jroller.com/roller-ui/login-redirect.jsp">Login</a>
                </li>
                        </ul>
      
<a href="http://www.viadeo.com/fr/profile/cedric.champeau"><img src="data:text/plain; charset=x-user-defined;base64,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" border="0"></a><br><br>
<a href="http://www.linkedin.com/in/cedricchampeau"><img src="data:text/plain; charset=x-user-defined;base64,R0lGODlhUAAPANUAAP////n8/fT5/O32+ZjM4o3D3IPD3Ya+2Xi82Xi31Wy11W+szGGu0GOkxlanzE+fxkugyECaxGOPszWTwCmMvEh/qh+FtxiBtRh/sxl4rBl0qC9llS1ikyZajCRZjBxZjR5ViR5Sh////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUUACIALAAAAABQAA8AAAb/QJGkEyoaj8ikcslsOpcdiXCzMFiv2Kx2y+16v9wFR+JpIM7otHrNZhMA8Lic0K7bzw2iYs/v+/+AgQADhIWGAIGJinxFDI4McI+Rj5IAlJeVjgABjgGenwGWmKOUkaKYRQ6qDnCrrq+tr7KxcrVxsriuAKu7uEUQwBBwwcMABcPCAMnCAsrJccDIztHIz9TK0tDO1RBFEd8RcODiteGDAObmB3DH6Onh4N/i8vTu9vXw999FE/0TcP4ACgTwL07BOOsOFOwH8B9DhgQfOoxI8SHBiwb7FaHAkUKcAR4BhBwJZ4BIOAg4JkAJh2NLjy5diowJc6bNmCdhduRYxIJPXgvN4FgQShTAUKNCQwEQcBQO06M+jQ6NKrVp1J9CryKlWrXIha9gw4odS7asLVtgAZRdu7ZIBrZw4359cDbOg7Ry42oAUeGDBgx5AwseDHdvBREVQDxZzLixYySHgwAAOw==" width="80" height="15" border="0" alt="View Cédric Champeau's profile on LinkedIn"></a><br><br>
   </center></li>
   <li>
      <h2>Creative Commons</h2>
<center><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.0/fr/"><img alt="Creative Commons License" style="border-width:0" src="data:text/plain; charset=x-user-defined;base64,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"></a></center>
</li>
</ul>

</div>
               <div id="footer">
<p>
Design by <a href="http://beccary.com" title="Theme designed by Beccary">Beccary</a> 
<a href="http://weblogs.us" title="Theme sponsored by Weblogs.us">Weblogs.us</a>
·
<a href="http://validator.w3.org/check/referer" title="This page validates as XHTML 1.0 Transitional">
<abbr title="eXtensible HyperText Markup Language">XHTML</abbr></a>
·
<a href="http://jigsaw.w3.org/css-validator/check/referer" title="This page validates as CSS">
<abbr title="Cascading Style Sheets">CSS</abbr>&gt;</a>
</p>
</div>

</div>




    </body></html>