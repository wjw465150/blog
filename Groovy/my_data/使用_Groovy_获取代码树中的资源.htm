<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>使用 Groovy 获取classpath中的资源</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style>
html,body { 
	/* Default Font */
	font-family: 宋体, Arial, Helvetica, sans-serif;
	font-size: 10pt;
}
</style>

</head>

<body>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px"><STRONG>使用 
Groovy 获取classpath中的资源</STRONG></P>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">先前写 
MSN 日志合并脚本的时候，顺便看了 jungleford 的文章<A 
style="COLOR: rgb(202,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; TEXT-DECORATION: ; MARGIN: 0px; PADDING-RIGHT: 0px" 
href="http://blog.csdn.net/jungleford/archive/2005/06/11/392325.aspx" 
target=_blank>从 Jar 中获取资源的方法</A>。很多时候 IDE 
替我们做了相关的工作，以至于关键时刻很多人都不知道这类基本操作是怎样的。Jungleford 提供了标准的 Java 实现，那么在 Groovy 
下，真正的懒人会怎么做呢？</P>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">PS. 
这里说的代码树是指……怎么说呢，就是你放代码的那个目录结构。运行 Java 程序的时候当然不会以源代码的形式存在，一般是打到 jar 当中，所以 
jungleford 的文章直接写成了从 Jar 中获取</P>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">以原文中的 
getTextFromJar 来说吧（其实严格的来说和 Jar 没啥关系），用 Groovy 的话，这十几行代码可以写成一句：（path 为所谓的 binary 
name，如果这个文件在package x.y.z 下的话，path 就是 /x/y/z/filename</P>
<DIV id=codeSnippetWrapper 
style="OVERFLOW: auto; CURSOR: text; BORDER-TOP: silver 1px solid; BORDER-RIGHT: silver 1px solid; WHITE-SPACE: normal; BORDER-BOTTOM: silver 1px solid; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 4px; DIRECTION: ltr; TEXT-ALIGN: left; PADDING-TOP: 4px; FONT: 8pt/12pt 'Courier New', courier, monospace; PADDING-LEFT: 4px; MARGIN: 20px 0px 10px; BORDER-LEFT: silver 1px solid; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 4px; MAX-HEIGHT: 200px; WIDTH: 1100px; BACKGROUND-COLOR: rgb(244,244,244); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
<DIV id=codeSnippet 
style="BORDER-TOP-STYLE: none; OVERFLOW: visible; FONT-SIZE: 8pt; BORDER-LEFT-STYLE: none; FONT-FAMILY: 'Courier New', courier, monospace; BORDER-BOTTOM-STYLE: none; COLOR: black; PADDING-BOTTOM: 0px; DIRECTION: ltr; TEXT-ALIGN: left; PADDING-TOP: 0px; BORDER-RIGHT-STYLE: none; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: 12pt; PADDING-RIGHT: 0px; WIDTH: 1100px; BACKGROUND-COLOR: rgb(244,244,244)"><PRE style="BORDER-TOP-STYLE: none; OVERFLOW: visible; WORD-WRAP: break-word; FONT-SIZE: 8pt; BORDER-LEFT-STYLE: none; FONT-FAMILY: 'Courier New', courier, monospace; WHITE-SPACE: pre-wrap; BORDER-BOTTOM-STYLE: none; COLOR: black; PADDING-BOTTOM: 0px; DIRECTION: ltr; TEXT-ALIGN: left; PADDING-TOP: 0px; BORDER-RIGHT-STYLE: none; PADDING-LEFT: 0px; MARGIN: 0em; LINE-HEIGHT: 12pt; PADDING-RIGHT: 0px; WIDTH: 1100px; BACKGROUND-COLOR: white"><SPAN id=lnum1 style="COLOR: rgb(96,96,96); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">   1:</SPAN> ClassLoader.getResource(path)?.text</PRE></DIV></DIV>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">脚本语言的威力就是如此啊。</P>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">一般来说我们用的 
*.getClass().getResource 或 **AsStream 其实就是委托给 ClassLoader 来完成的，配合 Groovy 
的动态机制，一行代码足矣！</P>
<P 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/26px Arial; PADDING-LEFT: 0px; MARGIN: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">PS 
II: 严格的来说 Groovy 的“绝对速度”比 Java 
要差不少，但是大多数时候程序的速度瓶颈都是在I/O或者Web方面，所以对用户来说“感知速度”不会差。另外原文中的代码使用 String 而非 
Buffer/Builder 进行迭代，第一反应是要修改。但是同样考虑到 Jar 中封装的文本通常都非常短，而且只读取一次，所以马马虎虎也算 OK 了。</P>
<P>&nbsp;</P></body>
</html>