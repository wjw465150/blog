<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="zh-cn">
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Regular-Matchers for Regular Expressions</title>
</head>
<body>
<div id="body_content"
 style="border: 0px none ; margin: 0px; padding: 0px; background: rgb(255, 255, 255) none repeat scroll 0%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -moz-background-clip: initial; -moz-background-origin: initial; -moz-background-inline-policy: initial;">
<div id="main_content"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="main section" id="main"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="widget Blog" id="Blog1"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="blog-posts hfeed"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="post hentry"
 style="border: 0px none ; margin: 0px 0px 40px; padding: 0px;">
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif;">Groovy
Goodness: Matchers for Regular Expressions</h3>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">In a
previous post we learned how to create a<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">java.util.regex.Pattern</code><span
 class="Apple-converted-space">&nbsp;</span>object. Now we learn how to
create a<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">java.util.regex.Matcher</code><span
 class="Apple-converted-space">&nbsp;</span>object and use it for
finding and matching values.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">In
Groovy we use the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">=~</code><span
 class="Apple-converted-space">&nbsp;</span>operator (find operator) to
create a new matcher object. If the matcher has any match results we
can access the results by invoking methods on the matcher object. But
Groovy wouldn't by groovy if we could access the results easier. Groovy
enhances the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Matcher</code><span
 class="Apple-converted-space">&nbsp;</span>class so the data is
available with an array-like syntax. If we use groups in the matcher
the result can be accessed with a multidimensional array. Although the
result of the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">=~</code><span
 class="Apple-converted-space">&nbsp;</span>operator is a matcher
object in a conditional statement the result will be converted to a<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Boolean</code><span
 class="Apple-converted-space">&nbsp;</span>values.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p>
We can use a second operator,<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">==~</code><span
 class="Apple-converted-space">&nbsp;</span>(match operator), to do
exact matches. With this operator the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">matches()</code><span
 class="Apple-converted-space">&nbsp;</span>method is invoked on the
matcher object. The result is a<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Boolean</code><span
 class="Apple-converted-space">&nbsp;</span>value.
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">def finder = ('groovy' =~ /gr.*/)<br>assert finder instanceof java.util.regex.Matcher<br><br>def matcher = ('groovy' ==~ /gr.*/)<br>assert matcher instanceof Boolean<br><br>assert 'Groovy rocks!' =~ /Groovy/  // =~ in conditional context returns boolean.<br>assert !('Groovy rocks!' ==~ /Groovy/)  // ==~ looks for an exact match.<br>assert 'Groovy rocks!' ==~ /Groovy.*/<br><br>def cool = /gr\w{4}/  // Start with gr followed by 4 characters.<br>def findCool = ('groovy, java and grails rock!' =~ /$cool/)<br>assert 2 == findCool.count<br>assert 2 == findCool.size()  // Groovy adds size() method.<br>assert 'groovy' == findCool[0]  // Array-like access to match results.<br>assert 'grails' == findCool.getAt(1)<br><br>// With grouping we get a multidimensional array.<br>def group = ('groovy and grails, ruby and rails' =~ /(\w+) and (\w+)/)<br>assert group.hasGroup()<br>assert 2 == group.size()<br>assert ['groovy and grails', 'groovy', 'grails'] == group[0]<br>assert 'rails' == group[1][2]<br><br>// Use matcher methods.<br>assert 'Hi world' == ('Hello world' =~ /Hello/).replaceFirst('Hi')<br><br>// Groovy matcher syntax can be used in other methods.<br>assert ['abc'] == ['def', 'abc', '123'].findAll { it =~ /abc/ }<br>assert [false, false, true] == ['def', 'abc', '123'].collect { it ==~ /\d{3}/ }<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p>
<div style="border: 0px none ; margin: 0px; padding: 0px; clear: both;"></div>
</div>
</div>
</div>
<div class="clear"
 style="border: 0px none ; margin: 0px; padding: 0px; clear: both;"></div>
</div>
</div>
</div>
</div>
<iframe name="oauth2relay467950995" id="oauth2relay467950995"
 src="about:blank" tabindex="-1"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; width: 1px; height: 1px; position: absolute; top: -100px;"></iframe><br
 class="Apple-interchange-newline">
</body>
</html>
