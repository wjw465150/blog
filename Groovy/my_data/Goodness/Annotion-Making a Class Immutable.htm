<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Annotion-Making a Class Immutable</title>
</head>
<body>
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">Groovy
Goodness: Making a Class Immutable</h3>
<div class="post-header-line-1"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);"></div>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Immutable
objects are created and cannot change after creation. This makes
immutable objects very usable in concurrent and functional programming.
To define a Java class as immutable we must define all properties as
readonly and private. Only the constructor can set the values of the
properties. The<span class="Apple-converted-space">&nbsp;</span><a
 href="http://groovy.codehaus.org/Immutable+AST+Macro"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51);">Groovy
documentation</a><span class="Apple-converted-space">&nbsp;</span>has a
complete list of the rules applying to immutable objects. The Java code
to make a class immutable is verbose, especially since the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">hashCode()</code>,<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">equals()</code><span
 class="Apple-converted-space">&nbsp;</span>and<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">toString()</code><span
 class="Apple-converted-space">&nbsp;</span>methods need to be
overridden.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Groovy
has the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Immutable</code><span
 class="Apple-converted-space">&nbsp;</span>transformation to do all
the work for us. We only have to define<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Immutable</code><span
 class="Apple-converted-space">&nbsp;</span>in our class definition and
any object we create for this class is an immutable object. Groovy
generates a class file following the rules for immutable objects. So
all properties are readonly, constructors are created to set the
properties, implementations for the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">hashCode()</code>,<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">equals()</code><span
 class="Apple-converted-space">&nbsp;</span>and<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">toString()</code><span
 class="Apple-converted-space">&nbsp;</span>methods are generated, and<span
 class="Apple-converted-space">&nbsp;</span><a
 href="http://groovy.codehaus.org/gapi/groovy/lang/Immutable.html"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51);">more</a>.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">@Immutable class User {<br>    String username, email<br>    Date created = new Date()<br>    Collection roles<br>}<br><br>def first = new User(username: 'mrhaki', email: 'email@host.com', roles: ['admin', 'user'])<br>assert 'mrhaki' == first.username<br>assert 'email@host.com' == first.email<br>assert ['admin', 'user'] == first.roles<br>assert new Date().after(first.created)<br>try {<br>    // Properties are readonly.<br>    first.username = 'new username'<br>} catch (ReadOnlyPropertyException e) {<br>    assert 'Cannot set readonly property: username for class: User' == e.message<br>}<br>try {<br>    // Collections are wrapped in immutable wrapper classes, so we cannot<br>    // change the contents of the collection.<br>    first.roles &lt;&lt; 'new role'<br>} catch (UnsupportedOperationException e) {<br>    assert true<br>}<br><br><br>def date = new Date(109, 8, 16)<br>def second = new User('user', 'test@host.com', date, ['user'])<br>assert 'user' == second.username<br>assert 'test@host.com' == second.email<br>assert ['user'] == second.roles<br>assert '2009/08/16' == second.created.format('yyyy/MM/dd')<br>assert date == second.created<br>assert !date.is(second.created)  // Date, Clonables and arrays are deep copied.<br>// toString() implementation is created.<br>assert 'User(user, test@host.com, Wed Sep 16 00:00:00 UTC 2009, [user])' == second.toString() <br><br><br>def third = new User(username: 'user', email: 'test@host.com', created: date, roles: ['user'])<br>// equals() method is also generated by the annotation and is based on the<br>// property values.<br>assert third == second</pre>
</div>
</body>
</html>
