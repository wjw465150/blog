<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="zh-cn"><head><meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>Closure as a Class</title></head><body>
<div id="body_content" style="border: 0px none ; margin: 0px; padding: 0px; background: rgb(255, 255, 255) none repeat scroll 0%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -moz-background-clip: initial; -moz-background-origin: initial; -moz-background-inline-policy: initial;"><div id="main_content" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="main section" id="main" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="widget Blog" id="Blog1" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="blog-posts hfeed" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="post hentry" style="border: 0px none ; margin: 0px 0px 40px; padding: 0px;"><h3 class="post-title entry-title" style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif;">Groovy Goodness: Closure as a Class</h3><div class="post-body entry-content" style="border: 0px none ; margin: 0px; padding: 0px;"><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">When
we write Groovy code there is a big chance we also write some closures.
If we are working with collections for example and use the<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">each</code>,<code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">collect</code><span class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">find</code><span class="Apple-converted-space">&nbsp;</span>methods
we use closures as arguments for these methods. We can assign closures
to variables and use the variable name to reference to closure. But we
can also create a subclass of the<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Closure</code><span class="Apple-converted-space">&nbsp;</span>class to implement a closure. Then we use an instance of the new closure class wherever a closure can be used.</p><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">To write a closure as a class we must subclass<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Closure</code><span class="Apple-converted-space">&nbsp;</span>and implement a method with the name<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">doCall</code>. The method can accept arbitrary arguments and the return type can be defined by us. So we are not overriding a method<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">doCall</code><span class="Apple-converted-space">&nbsp;</span>from the superclass<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Closure</code>. But Groovy will look for a method with the name<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">doCall</code><span class="Apple-converted-space">&nbsp;</span>to execute the closure logic and internally use methods from the<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Closure</code><span class="Apple-converted-space">&nbsp;</span>superclass.</p><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">In
the following sample we write a very simple closure as a class to check
if an object is a number. Then we use an instance of the class with the<code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">findAll</code><span class="Apple-converted-space">&nbsp;</span>method for a collection of objects:</p><pre class="brush:groovy" style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">class IsNumber extends Closure&lt;Boolean&gt; /* return type for closure as generic type */ {<br><br>    IsNumber() {<br>        super(null)<br>    }<br><br>    /**<br>     * Implementation of closure.<br>     */<br>    Boolean doCall(final Object value) {<br>        // Check if value is a number, if so<br>        // return true, otherwise false.<br>        value in Number<br>    }<br><br>}<br><br>def list = ['a', 100, 'Groovy', 1, 8, 42.0, true]<br><br>def numbers = list.findAll(new IsNumber())<br><br>assert numbers == [100, 1, 8, 42.0]<br></pre><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Code written with Groovy 2.3.7.</p><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p><div style="border: 0px none ; margin: 0px; padding: 0px; clear: both;"></div></div></div></div><div class="clear" style="border: 0px none ; margin: 0px; padding: 0px; clear: both;"></div></div></div></div></div>
<iframe name="oauth2relay847454253" id="oauth2relay847454253" src="about:blank" tabindex="-1" style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; width: 1px; height: 1px; position: absolute; top: -100px;"></iframe><br class="Apple-interchange-newline">
</body></html>