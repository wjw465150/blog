<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="zh-cn">
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>XML-Pretty Print XML</title>
</head>
<body>
<div id="body_content"
 style="border: 0px none ; margin: 0px; padding: 0px; background: rgb(255, 255, 255) none repeat scroll 0%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -moz-background-clip: initial; -moz-background-origin: initial; -moz-background-inline-policy: initial;">
<div id="main_content"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="main section" id="main"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="widget Blog" id="Blog1"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="blog-posts hfeed"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="post hentry"
 style="border: 0px none ; margin: 0px 0px 40px; padding: 0px;">
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif;">Groovy
Goodness: Pretty Print XML</h3>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">The
easiest way to pretty print an XML structure is with the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);"><a
 href="http://groovy.codehaus.org/api/groovy/xml/XmlUtil.html"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51);">XmlUtil</a></code><span
 class="Apple-converted-space">&nbsp;</span>class. The class has a<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">serialize()</code><span
 class="Apple-converted-space">&nbsp;</span>method which is overloaded
for several parameter types like<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">String</code>,<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">GPathResult</code><span
 class="Apple-converted-space">&nbsp;</span>and<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Node</code>.
We can pass an<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">OutputSteam</code><span
 class="Apple-converted-space">&nbsp;</span>or<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Writer</code><span
 class="Apple-converted-space">&nbsp;</span>object as argument to write
the pretty formatted XML to. If we don't specify these the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">serialize()</code><span
 class="Apple-converted-space">&nbsp;</span>method return a<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">String</code><span
 class="Apple-converted-space">&nbsp;</span>value.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.xml.*<br><br>def prettyXml = '''\&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;languages&gt;<br>  &lt;language id="1"&gt;Groovy&lt;/language&gt;<br>  &lt;language id="2"&gt;Java&lt;/language&gt;<br>  &lt;language id="3"&gt;Scala&lt;/language&gt;<br>&lt;/languages&gt;<br>'''<br><br><br>// Pretty print a non-formatted XML String.<br>def xmlString = '&lt;languages&gt;&lt;language id="1"&gt;Groovy&lt;/language&gt;&lt;language id="2"&gt;Java&lt;/language&gt;&lt;language id="3"&gt;Scala&lt;/language&gt;&lt;/languages&gt;'<br>assert XmlUtil.serialize(xmlString) == prettyXml<br><br>// Use Writer object as extra argument.<br>def xmlOutput = new StringWriter()<br>XmlUtil.serialize xmlString, xmlOutput<br>assert xmlOutput.toString() == prettyXml<br><br>// Pretty print a Node.<br>Node languagesNode = new XmlParser().parseText(xmlString)<br>assert XmlUtil.serialize(languagesNode) == prettyXml<br><br><br>// Pretty print a GPathResult.<br>def langagesResult = new XmlSlurper().parseText(xmlString)<br>assert XmlUtil.serialize(langagesResult) == prettyXml<br><br><br>// Pretty print org.w3c.dom.Element.<br>org.w3c.dom.Document doc = DOMBuilder.newInstance().parseText(xmlString)<br>org.w3c.dom.Element root = doc.documentElement<br>assert XmlUtil.serialize(root) == prettyXml<br><br><br>// Little trick to pretty format<br>// the result of StreamingMarkupBuilder.bind(). <br>def languagesXml = {<br>    languages {<br>        language id: 1, 'Groovy'<br>        language id: 2, 'Java'<br>        language id: 3, 'Scala'<br>    }<br>}<br>def languagesBuilder = new StreamingMarkupBuilder()<br>assert XmlUtil.serialize(languagesBuilder.bind(languagesXml)) == prettyXml<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">If we
already have a<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">groovy.util.Node</code><span
 class="Apple-converted-space">&nbsp;</span>object we can also use the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);"><a
 href="http://groovy.codehaus.org/api/groovy/util/XmlNodePrinter.html"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51);">XmlNodePrinter</a></code>.
For example if we use<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">XmlParser</code><span
 class="Apple-converted-space">&nbsp;</span>to parse XML we get a<code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Node</code><span
 class="Apple-converted-space">&nbsp;</span>object. We create a new
instance of the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">XmlNodePrinter</code><span
 class="Apple-converted-space">&nbsp;</span>and use the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">print()</code><span
 class="Apple-converted-space">&nbsp;</span>method to output the node
with child nodes. If we don't specify a<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Writer</code><span
 class="Apple-converted-space">&nbsp;</span>object the output is send to<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">System.out</code>.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.xml.*<br><br>// Get groovy.util.Node value.<br>def xmlString = '&lt;languages&gt;&lt;language id="1"&gt;Groovy&lt;/language&gt;&lt;language id="2"&gt;Java&lt;/language&gt;&lt;language id="3"&gt;Scala&lt;/language&gt;&lt;/languages&gt;'<br>Node languages = new XmlParser().parseText(xmlString)<br><br><br>// Create output with all default settings.<br>def xmlOutput = new StringWriter()<br>def xmlNodePrinter = new XmlNodePrinter(new PrintWriter(xmlOutput))<br>xmlNodePrinter.print(languages)<br><br>assert xmlOutput.toString() == '''\<br>&lt;languages&gt;<br>  &lt;language id="1"&gt;<br>    Groovy<br>  &lt;/language&gt;<br>  &lt;language id="2"&gt;<br>    Java<br>  &lt;/language&gt;<br>  &lt;language id="3"&gt;<br>    Scala<br>  &lt;/language&gt;<br>&lt;/languages&gt;<br>'''<br><br><br>// Create output and set indent character<br>// one space.<br>// (can also by \t for tabs, or other characters)<br>xmlOutput = new StringWriter()<br>xmlNodePrinter = new XmlNodePrinter(new PrintWriter(xmlOutput), " " /* indent */)<br>xmlNodePrinter.print(languages)<br><br>assert xmlOutput.toString() == '''\<br>&lt;languages&gt;<br> &lt;language id="1"&gt;<br>  Groovy<br> &lt;/language&gt;<br> &lt;language id="2"&gt;<br>  Java<br> &lt;/language&gt;<br> &lt;language id="3"&gt;<br>  Scala<br> &lt;/language&gt;<br>&lt;/languages&gt;<br>'''<br><br><br>// Use properties preserveWhitespace,<br>// expandEmptyElements and quote to<br>// change the formatting.<br>xmlOutput = new StringWriter()<br>xmlNodePrinter = new XmlNodePrinter(new PrintWriter(xmlOutput))<br>xmlNodePrinter.with {<br>    preserveWhitespace = true<br>    expandEmptyElements = true<br>    quote = "'" // Use single quote for attributes<br>}<br>xmlNodePrinter.print(languages)<br><br>assert xmlOutput.toString() == """\<br>&lt;languages&gt;<br>  &lt;language id='1'&gt;Groovy&lt;/language&gt;<br>  &lt;language id='2'&gt;Java&lt;/language&gt;<br>  &lt;language id='3'&gt;Scala&lt;/language&gt;<br>&lt;/languages&gt;<br>"""<br></pre>
<br>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>
