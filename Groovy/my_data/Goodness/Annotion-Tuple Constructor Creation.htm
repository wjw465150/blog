<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Annotion-Tuple Constructor Creation</title>
</head>
<body>
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">Groovy
Goodness: Tuple Constructor Creation</h3>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Groovy
1.8 adds the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@TupleConstructor</code><span
 class="Apple-converted-space">&nbsp;</span>annotation. With this
annotation we can automatically create a tuple constructor at compile
time. So the constructor can be found in the compiled class. For each
property in the class a parameter in the constructor is created with a
default value. The order of the properties defined in the class also
defines the order of parameters in the constructor. Because the
parameters have default values we can use Groovy syntax and leave
parameters at the end of the parameter list out when we use the
constructor.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">We
can also include fields as constructor parameters. We use the
annotation attribute<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">includeFields=true</code><span
 class="Apple-converted-space">&nbsp;</span>to activate this.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">If we
define our constructors in the class than the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">TupleConstructor</code><span
 class="Apple-converted-space">&nbsp;</span>annotation will not create
extra constructors. But we can override this behaviour with the
attribute value<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">force=true</code>.
We have to make sure we don't have constructor conflicts ourselves,
because now the annotation will create the extra constructors.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">If
our class extends another class and we want to include the properties
or fields of the super class we can use the attributes<code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">includeSuperProperties</code><span
 class="Apple-converted-space">&nbsp;</span>and<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">includeSuperFields</code>.
We can even instruct the annotation to create code in the constructor
to call the super constructor of the super class with the properties.
We must set the annotation attribute<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">callSuper=true</code><span
 class="Apple-converted-space">&nbsp;</span>to make this happen.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.transform.TupleConstructor<br><br>@TupleConstructor()<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br>}<br><br>def person = new Person('mrhaki', ['Groovy', 'Java'])<br><br>assert person.name == 'mrhaki'<br>assert person.likes == ['Groovy', 'Java']<br><br>person = new Person('mrhaki')<br><br>assert person.name == 'mrhaki'<br>assert !person.likes<br></pre>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// includeFields in the constructor creation.<br>import groovy.transform.TupleConstructor<br><br>@TupleConstructor(includeFields=true)<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br><br>    boolean isActivated() { active }<br>}<br><br>def person = new Person('mrhaki', ['Groovy', 'Java'], true)<br><br>assert person.name == 'mrhaki'<br>assert person.likes == ['Groovy', 'Java']<br>assert person.activated<br></pre>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// use force attribute to force creation of constructor<br>// even if we define our own constructors.<br>import groovy.transform.TupleConstructor<br><br>@TupleConstructor(force=true)<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br><br>    Person(boolean active) {<br>        this.active = active<br>    }<br><br>    boolean isActivated() { active }<br>}<br><br>def person = new Person('mrhaki', ['Groovy', 'Java'])<br><br>assert person.name == 'mrhaki'<br>assert person.likes == ['Groovy', 'Java']<br>assert !person.activated<br><br>person = new Person(true)<br><br>assert person.activated<br></pre>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// include properties and fields from super class.<br>import groovy.transform.TupleConstructor<br><br>@TupleConstructor(includeFields=true)<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br><br>    boolean isActivated() { active }<br>}<br><br>@TupleConstructor(callSuper=true, includeSuperProperties=true, includeSuperFields=true)<br>class Student extends Person {<br>    List courses<br>}<br><br>def student = new Student('mrhaki', ['Groovy', 'Java'], true, ['IT'])<br><br>assert student.name == 'mrhaki'<br>assert student.likes == ['Groovy', 'Java']<br>assert student.activated<br>assert student.courses == ['IT']</pre>
</div>
</body>
</html>
