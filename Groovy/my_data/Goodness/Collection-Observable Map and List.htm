<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="zh-cn">
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Collection-Observable Map and List</title>
</head>
<body>
<div id="body_content"
 style="border: 0px none ; margin: 0px; padding: 0px; background: rgb(255, 255, 255) none repeat scroll 0%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -moz-background-clip: initial; -moz-background-origin: initial; -moz-background-inline-policy: initial;">
<div id="main_content"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="main section" id="main"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="widget Blog" id="Blog1"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="blog-posts hfeed"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<div class="post hentry"
 style="border: 0px none ; margin: 0px 0px 40px; padding: 0px;">
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif;">Groovy
Goodness: Observable Map and List</h3>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px;">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Groovy
provides the<span class="Apple-converted-space">&nbsp;</span><a
 href="http://groovy.codehaus.org/api/groovy/util/ObservableMap.html"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51);"><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">ObservableMap</code></a><span
 class="Apple-converted-space">&nbsp;</span>and<span
 class="Apple-converted-space">&nbsp;</span><a
 href="http://groovy.codehaus.org/api/groovy/util/ObservableList.html"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51);"><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">ObservableList</code></a><span
 class="Apple-converted-space">&nbsp;</span>classes. These classes send
out<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">PropertyChangeEvent</code><span
 class="Apple-converted-space">&nbsp;</span>objects when we add, remove
or change the contents of the map or list. For several actions we get
different event types and we can use a<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">PropertyChangeListener</code><span
 class="Apple-converted-space">&nbsp;</span>object to subscribe to
these events. For example if we add an element we can subscribe to the
property change event and get an<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">PropertyAddedEvent</code>.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import java.beans.*<br><br>def event <br>// Listener will assign event to global event variable.<br>def listener = { <br>    event = it<br>} as PropertyChangeListener<br><br>/* ObservableList */<br>def list = ['Groovy', 'rocks', 'the world', true] as ObservableList<br>list.addPropertyChangeListener(listener)<br><br>list &lt;&lt; 'More text'<br>assert event instanceof ObservableList.ElementAddedEvent <br>assert 4 == event.index<br>assert 'More text' == event.newValue<br><br>list.remove(3)<br>assert event instanceof ObservableList.ElementRemovedEvent<br>assert 3 == event.index<br><br>list[0] = 'Grails'<br>assert event instanceof ObservableList.ElementUpdatedEvent<br>assert 0 == event.index<br>assert 'Groovy' == event.oldValue<br>assert 'Grails' == event.newValue<br><br>list.addAll([42, 101])<br>assert event instanceof ObservableList.MultiElementAddedEvent<br>assert [42, 101] == event.values<br><br>list.removeAll([true, 'More text', 42, 101])<br>assert event instanceof ObservableList.MultiElementRemovedEvent<br>assert 3 == list.size()<br><br>list.clear()<br>assert event instanceof ObservableList.ElementClearedEvent<br>assert ['Grails', 'rocks', 'the world'] == event.values<br><br>event = null<br><br>// We can define a closure as a filter. The closure is<br>// executed for each element and if it returns true,<br>// the property change event is fired.<br>def strict = new ObservableList({ it.size() &gt; 2 })<br>strict.addPropertyChangeListener(listener)<br>strict.addAll(['a', 'ab', 'abc', 'abcd'])<br>assert ['abc', 'abcd'] == event.values<br><br>/* ObservableMap */<br>event = null<br><br>// Extra property change listener to assign to a specific<br>// property instead of the whole map.<br>def propEvent<br>def propListener = { propEvent = it } as PropertyChangeListener<br><br>def map = [username: 'mrhaki', email: 'email@host.com', active: true] as ObservableMap<br>map.addPropertyChangeListener(listener)<br>map.addPropertyChangeListener("active", propListener)<br><br>map.location = "@work"<br>assert event instanceof ObservableMap.PropertyAddedEvent <br>assert 'location' == event.propertyName<br>assert '@work' == event.newValue<br>assert !propEvent<br><br>map.active = false<br>assert event instanceof ObservableMap.PropertyUpdatedEvent <br>assert propEvent instanceof ObservableMap.PropertyUpdatedEvent<br>assert true == propEvent.oldValue<br>assert false == propEvent.newValue<br>assert 'active' == event.propertyName<br><br>map.remove('active')<br>assert propEvent instanceof ObservableMap.PropertyRemovedEvent<br>assert 3 == map.size()<br><br>map.putAll([car: true, phone: '555-1234'])<br>assert event instanceof ObservableMap.MultiPropertyEvent <br>assert event.events[0] instanceof ObservableMap.PropertyAddedEvent<br>assert 'car' == event.events[0].propertyName<br>assert true == event.events[0].newValue<br>assert event.events[1] instanceof ObservableMap.PropertyAddedEvent<br>assert 'phone' == event.events[1].propertyName<br>assert '555-1234' == event.events[1].newValue<br><br>map.clear()<br>assert event instanceof ObservableMap.PropertyClearedEvent<br>assert [username: 'mrhaki', car: true, phone: '555-1234', location: '@work', email: 'email@host.com'] == event.values<br><br>def strictMap = new ObservableMap({ name, value -&gt; name ==~ /^a.*/ })<br>strictMap.addPropertyChangeListener(listener)<br>strictMap.putAll([a: 1, b: 2, c: 3])<br>assert 1 == event.events.size()<br>assert 'a' == event.events[0].propertyName<br>assert 1 == event.events[0].newValue<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>
