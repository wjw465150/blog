<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Annotion-Use Builder AST Transformation for Fluent API</title>
</head>
<body>
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">Groovy
Goodness: Use Builder AST Transformation for Fluent API</h3>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Since
Groovy 2.3 we can easily create a fluent API for our classes with the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Builder</code><span
 class="Apple-converted-space">&nbsp;</span>AST transformation. We can
apply the annotation to our classes and the resulting class file will
have all the necessary methods to support a fluent API. We can
customize how the fluent API is generated with different annotation
parameters. In Groovy code we already can<span
 class="Apple-converted-space">&nbsp;</span><a
 href="http://mrhaki.blogspot.com/2009/09/groovy-goodness-with-method.html"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51);">use
the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">with</code><span
 class="Apple-converted-space">&nbsp;</span>method</a><span
 class="Apple-converted-space">&nbsp;</span>to have a clean way to set
property values or use the named constructor arguments. But if our
classes need to be used from Java it is nice to give the Java
developers a fluent API for our Groovy classes.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">In
the following sample we apply the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Builder</code><span
 class="Apple-converted-space">&nbsp;</span>annotation to a simple class<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Message</code><span
 class="Apple-converted-space">&nbsp;</span>with some properties. We
leave everything to the default settings and then the resulting<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Message</code><span
 class="Apple-converted-space">&nbsp;</span>class file will have a new<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">builder</code><span
 class="Apple-converted-space">&nbsp;</span>method that return an
internal helper class we can use to set our properties. For each
property their is a new method with the name of the property so we can
set a value. And finally our class contains a<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">build</code><span
 class="Apple-converted-space">&nbsp;</span>that will return a new
instance of the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Message</code><span
 class="Apple-converted-space">&nbsp;</span>class with the correct
values for the properties.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.transform.builder.Builder<br><br>@Builder<br>class Message {<br>    String from, to, subject, body<br>}<br><br>def message = Message<br>        .builder()  // New internal helper class.<br>        .from('mrhaki@mrhaki.com')  // Method per property.<br>        .to('mail@host.nl')<br>        .subject('Sample mail')<br>        .body('Groovy rocks!')<br>        .build()  // Create instance of Message<br><br>assert message.body == 'Groovy rocks!'<br>assert message.from == 'mrhaki@mrhaki.com'<br>assert message.subject == 'Sample mail'<br>assert message.to == 'mail@host.nl'<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">If we
want to change the names of the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">builder</code><span
 class="Apple-converted-space">&nbsp;</span>and<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">build</code><span
 class="Apple-converted-space">&nbsp;</span>methods we can use the
annotation parameters<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">builderMethodName</code><span
 class="Apple-converted-space">&nbsp;</span>and<code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">buildMethodName</code>:</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.transform.builder.Builder<br><br>@Builder(builderMethodName = 'initiator', buildMethodName = 'create')<br>class Message {<br>    String from, to, subject, body<br>}<br><br>def message = Message.initiator()<br>        .from('mrhaki@mrhaki.com')<br>        .body('Groovy rocks!')<br>        .create()<br><br>assert message.body == 'Groovy rocks!'<br>assert message.from == 'mrhaki@mrhaki.com'<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">We
see that for each property a corresponding method is generated. We can
also customize the prefix for the generated method name with the
annotation parameter<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">prefix</code>.
In the following sample we define the prefix<span
 class="Apple-converted-space">&nbsp;</span><em
 style="border: 0px none ; margin: 0px; padding: 0px;">assign</em><span
 class="Apple-converted-space">&nbsp;</span>for the method names:</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.transform.builder.Builder<br><br>@Builder(prefix = 'assign')<br>class Message {<br>    String from, to, subject, body<br>}<br><br>def message = Message.builder()<br>        .assignFrom('mrhaki@mrhaki.com')<br>        .assignBody('Groovy rocks!')<br>        .build()<br><br>assert message.body == 'Groovy rocks!'<br>assert message.from == 'mrhaki@mrhaki.com'<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Finally
we can also include and exclude properties to need to be included or
excluded from our fluent API. We use the annotation parameters<code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">includes</code><span
 class="Apple-converted-space">&nbsp;</span>and<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">excludes</code><span
 class="Apple-converted-space">&nbsp;</span>to define the names of the
properties. This can be a list or a comma separated list of names.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.transform.builder.Builder<br><br>@Builder(excludes = 'body' /* or includes = 'from,to,subject' */)<br>class Message {<br>    String from, to, subject, body<br>}<br><br>def message = Message.builder()<br>        .from('mrhaki@mrhaki.com')<br>        .to('mail@host.nl')<br>        .subject('Groovy 2.3 is released')<br>        .build()<br><br>assert message.from == 'mrhaki@mrhaki.com'<br>assert message.subject == 'Groovy 2.3 is released'<br><br>try {<br>    message = Message.builder().body('Groovy rocks!').build()<br>} catch (MissingMethodException e) {<br>    assert e.message.readLines().first() ==<br>            'No signature of method: static Message.body() is applicable for argument types: (java.lang.String) values: [Groovy rocks!]'<br>}<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">The<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Builder</code><span
 class="Apple-converted-space">&nbsp;</span>AST transformation also
checks if the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Canonical</code><span
 class="Apple-converted-space">&nbsp;</span>AST transformation is
applied to a class. Any included or excluded properties defined in the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Canonical</code><span
 class="Apple-converted-space">&nbsp;</span>transformation are also
included or excluded for the generated builder code.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">We
can define the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">SimpleStrategy</code><span
 class="Apple-converted-space">&nbsp;</span>strategy with the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">builderStrategy</code><span
 class="Apple-converted-space">&nbsp;</span>annotation parameter. Then
the generated class will not have a separate inner helper builder class
and build method. The default<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">prefix</code><span
 class="Apple-converted-space">&nbsp;</span>is set to<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">set</code>,
but we can change that if we want to:</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">import groovy.transform.builder.Builder<br>import groovy.transform.builder.SimpleStrategy<br><br>@Builder(builderStrategy = SimpleStrategy, prefix = 'assign')<br>class Message {<br>    String from, to, subject, body<br>}<br><br>def message = new Message()<br>        .assignFrom('mrhaki@mrhaki.com')  // Method per property.<br>        .assignTo('mail@host.nl')<br>        .assignSubject('Sample mail')<br>        .assignBody('Groovy rocks!')<br><br>assert message.body == 'Groovy rocks!'<br>assert message.from == 'mrhaki@mrhaki.com'<br>assert message.subject == 'Sample mail'<br>assert message.to == 'mail@host.nl'<br></pre>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">We
will see other feature of the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@Builder</code><span
 class="Apple-converted-space">&nbsp;</span>annotation in future blog
posts.</p>
</div>
</body>
</html>
