<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="zh-cn"><head><meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>Builder-Create Simple Builders with Closures</title></head><body>
<div id="body_content" style="border: 0px none ; margin: 0px; padding: 0px; background: rgb(255, 255, 255) none repeat scroll 0%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -moz-background-clip: initial; -moz-background-origin: initial; -moz-background-inline-policy: initial;"><div id="main_content" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="main section" id="main" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="widget Blog" id="Blog1" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="blog-posts hfeed" style="border: 0px none ; margin: 0px; padding: 0px;"><div class="post hentry" style="border: 0px none ; margin: 0px 0px 40px; padding: 0px;"><h3 class="post-title entry-title" style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif;">Groovy Goodness: Create Simple Builders with Closures</h3><div class="post-body entry-content" style="border: 0px none ; margin: 0px; padding: 0px;"><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">In Groovy we can use pre-defined builders like the<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">JsonBuilder</code><span class="Apple-converted-space">&nbsp;</span>or<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">MarkupBuilder</code><span class="Apple-converted-space">&nbsp;</span>to
create data or text structures. It is very easy to create our own
builder simply with closures. A node in the builder is simply a method
and we can use a closure as the argument of the method to create a new
level in the builder hierarchy.</p><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">We can use pre-defined method names in our builder syntax, but can also use dynamic or unkown method names by implementing the<code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">methodMissing</code><span class="Apple-converted-space">&nbsp;</span>method. The same goes for properties we can implement with real property methods or by implementing the<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">propertyMissing</code>method.</p><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">In our example we create a new builder to create a<span class="Apple-converted-space">&nbsp;</span><code style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">Reservation</code><span class="Apple-converted-space">&nbsp;</span>object
for a travel flight. In the builder we can define a list of passengers,
the destination airport, the departing airport and if the flight is a
two-way flight.</p><pre class="brush:groovy" style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// Builder syntax to create a reservation with passengers,<br>// departing and destination airport and make it a 2-way flight.<br>def reservation = new ReservationBuilder().make {<br>    passengers {<br>        name 'mrhaki'<br>        name 'Hubert A. Klein Ikkink'<br>    }<br>    from 'Schiphol, Amsterdam'<br>    to 'Kastrup, Copenhagen'<br>    retourFlight<br>}<br><br>assert reservation.flight.from == new Airport(name: 'Schiphol', city: 'Amsterdam')<br>assert reservation.flight.to == new Airport(name: 'Kastrup', city: 'Copenhagen')<br>assert reservation.passengers.size() == 2<br>assert reservation.passengers == [new Person(name: 'mrhaki'), new Person(name: 'Hubert A. Klein Ikkink')]<br>assert reservation.retourFlight<br><br><br>// ----------------------------------------------<br>// Builder implementation and supporting classes.<br>// ----------------------------------------------<br>import groovy.transform.*<br><br>@Canonical<br>class Reservation {<br>    Flight flight = new Flight()<br>    List&lt;Person&gt; passengers = []<br>    Boolean retourFlight = false<br>}<br><br>@Canonical<br>class Person { String name }<br><br>@Canonical<br>class Airport { String name, city }<br><br>@Canonical<br>class Flight { Airport from, to }<br><br>// The actual builder for reservations.<br>class ReservationBuilder {<br>    // Reservation to make and fill with property values.<br>    Reservation reservation<br><br>    private Boolean passengersMode = false<br><br>    Reservation make(Closure definition) {<br>        reservation = new Reservation()<br><br>        runClosure definition<br><br>        reservation<br>    }<br><br>    void passengers(Closure names) {<br>        passengersMode = true<br><br>        runClosure names<br><br>        passengersMode = false<br>    }<br><br>    void name(String personName) {<br>        if (passengersMode) {<br>            reservation.passengers &lt;&lt; new Person(name: personName)<br>        } else {<br>            throw new IllegalStateException("name() only allowed in passengers context.")<br>        }<br>    }<br><br>    def methodMissing(String name, arguments) {<br>        // to and from method calls will set flight properties<br>        // with Airport objects.<br>        if (name in ['to', 'from']) {<br>            def airport = arguments[0].split(',')<br>            def airPortname = airport[0].trim()<br>            def city = airport[1].trim()<br>            reservation.flight."$name" = new Airport(name: airPortname, city: city)<br>        }<br>    }<br><br>    def propertyMissing(String name) {<br>        // Property access of retourFlight sets reservation<br>        // property retourFlight to true.<br>        if (name == 'retourFlight') {<br>            reservation.retourFlight = true<br>        }<br>    }<br><br>    private runClosure(Closure runClosure) {<br>        // Create clone of closure for threading access.<br>        Closure runClone = runClosure.clone()<br><br>        // Set delegate of closure to this builder.<br>        runClone.delegate = this  //@wjw_note: &#27492;&#21477;&#24456;&#37325;&#35201;,&#25913;&#21464;delegate&#30340;&#25351;&#21521;,&#20351;&#20854;&#21482;&#25351;&#21521;builder<br><br>        // And only use this builder as the closure delegate.<br>        runClone.resolveStrategy = Closure.DELEGATE_ONLY  <span class="brush:groovy" style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">//@wjw_note: &#27492;&#21477;&#20063;&#24456;&#37325;&#35201;,&#21482;&#35753;builder&#25104;&#20026;delegate</span><br><br>        // Run closure code.<br>        runClone()<br>    }<br><br>}<br></pre><p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p><div style="border: 0px none ; margin: 0px; padding: 0px; clear: both;"></div></div></div></div><div class="clear" style="border: 0px none ; margin: 0px; padding: 0px; clear: both;"></div></div></div></div></div>
<iframe name="oauth2relay1808680185" id="oauth2relay1808680185" src="about:blank" tabindex="-1" style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; width: 1px; height: 1px; position: absolute; top: -100px;"></iframe><br class="Apple-interchange-newline">
</body></html>