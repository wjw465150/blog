<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Annotion-Create a Singleton Class</title>
</head>
<body>
<div id="body_content">
<div id="main_content">
<div id="main" class="main section">
<div id="Blog1" class="widget Blog">
<div class="blog-posts hfeed">
<div class="post hentry">
Groovy Goodness: Create a Singleton Class
<div class="post-header-line-1"></div>
<div class="post-body entry-content">
<p>Creating a singleton class in Groovy is simple. We only have to use
the <code>@Singleton</code> transformation annotation and a complete
singleton class is generated for us.</p>
<pre class="brush:groovy">package com.mrhaki.blog<br><br>// Old style singleton class.<br>public class StringUtil {<br>    private static final StringUtil instance = new StringUtil();<br><br>    private StringUtil() {<br>    }<br><br>    public static StringUtil getInstance() { <br>        return instance;<br>    }<br>    <br>    int count(text) { <br>        text.size() <br>    }<br>}<br><br>assert 6 == StringUtil.instance.count('mrhaki')<br><br>// Use @Singleton to create a valid singleton class.<br>// We can also use @Singleton(lazy=true) for a lazy loading<br>// singleton class.<br>@Singleton <br>class Util {<br>    int count(text) {<br>        text.size()<br>    }<br>}<br><br>assert 6 == Util.instance.count("mrhaki")<br><br>try {<br>    new Util()<br>} catch (e) {<br>    assert e instanceof RuntimeException<br>    assert "Can't instantiate singleton com.mrhaki.blog.Util. Use com.mrhaki.blog.Util.instance" == e.message<br>}<br></pre>
<p></p>
</div>
</div>
<!-- google_ad_section_end --></div>
</div>
</div>
</div>
</div>
<iframe tabindex="-1" id="oauth2relay1526901432"
 style="height: 1px; width: 1px; position: absolute; top: -100px;"
 src="about:blank" name="oauth2relay1526901432"></iframe>
</body>
</html>
