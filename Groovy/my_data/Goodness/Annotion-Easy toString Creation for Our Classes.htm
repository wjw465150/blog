<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Annotion-Easy toString Creation for Our Classes</title>
</head>
<body>
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">Groovy
Goodness: Easy toString Creation for Our Classes</h3>
<div class="post-header-line-1"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);"></div>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Since
Groovy 1.8 we can use the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@ToString</code><span
 class="Apple-converted-space">&nbsp;</span>annotation for easy
creation of a<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">toString()</code><span
 class="Apple-converted-space">&nbsp;</span>method. We only have to add
the annotation to our class definition and we get a nicely formatted
output of the properties of our class.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">We
can even customize what we want to see in the output. We can see the
names of the properties of our class in the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">toString()</code><span
 class="Apple-converted-space">&nbsp;</span>output if we add the
attribute<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">includeNames=true</code>.
By default only properties are added to the output, but we can include
fields as well with the annotation attribute<code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">includeFields=true</code>.
To exclude properties we use the attribute<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">excludes</code><span
 class="Apple-converted-space">&nbsp;</span>and assign the names of the
properties we don't want in the output separated by a comma.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Finally
we can include properties from a super class with the annotation
atribute<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">includeSuper=true</code>.</p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">Let's
see the<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">@ToString</code><span
 class="Apple-converted-space">&nbsp;</span>in action with a few
samples:</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// Most simple implementation of toString.<br>import groovy.transform.ToString<br><br>@ToString<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br>}<br><br>def person = new Person(name: 'mrhaki', likes: ['Groovy', 'Java'])<br><br>assert person.toString() == 'Person(mrhaki, [Groovy, Java])'<br></pre>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// includeNames to output the names of the properties.<br>import groovy.transform.ToString<br><br>@ToString(includeNames=true)<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br>}<br><br>def person = new Person(name: 'mrhaki', likes: ['Groovy', 'Java'])<br><br>assert person.toString() == 'Person(name:mrhaki, likes:[Groovy, Java])'<br></pre>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// includeFields to not only output properties, but also field values.<br>import groovy.transform.ToString<br><br>@ToString(includeNames=true, includeFields=true)<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br>}<br><br>def person = new Person(name: 'mrhaki', likes: ['Groovy', 'Java'])<br><br>assert person.toString() == 'Person(name:mrhaki, likes:[Groovy, Java], active:false)'<br></pre>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// Use includeSuper to include properties from super class in output.<br>import groovy.transform.ToString<br><br>@ToString(includeNames=true)<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br>}<br><br>@ToString(includeSuper=true, includeNames=true)<br>class Student extends Person {<br>    List courses<br>}<br><br>def student = new Student(name: 'mrhaki', likes: ['Groovy', 'Java'], courses: ['IT', 'Business'])<br><br>assert student.toString() == 'Student(courses:[IT, Business], super:Person(name:mrhaki, likes:[Groovy, Java]))'<br></pre>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// excludes active field and likes property from output<br>import groovy.transform.ToString<br><br>@ToString(includeNames=true, includeFields=true, excludes='active,likes')<br>class Person {<br>    String name<br>    List likes<br>    private boolean active = false<br>}<br><br>def person = new Person(name: 'mrhaki', likes: ['Groovy', 'Java'])<br><br>assert person.toString() == 'Person(name:mrhaki)'</pre>
</div>
</body>
</html>
