<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>Add Methods Dynamically to Classes with ExpandoMetaClass</title>
</head>
<body>
<h3 class="post-title entry-title"
 style="border: 0px none ; margin: 0px 0px 16px; padding: 0px; font-weight: lighter; font-size: 26px; line-height: 26px; font-family: 'Helvetica Neue UltraLight','Helvetica Neue Light','Helvetica Neue',Helvetica,Arial,sans-serif; color: rgb(0, 0, 0); font-style: normal; font-variant: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);"><a
 href="http://mrhaki.blogspot.com/2009/11/groovy-goodness-add-methods-dynamically.html"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(51, 51, 51); text-decoration: none;">Groovy
Goodness: Add Methods Dynamically to Classes with ExpandoMetaClass</a></h3>
<div class="post-header-line-1"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);"></div>
<div class="post-body entry-content"
 style="border: 0px none ; margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 28px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; background-color: rgb(255, 255, 255);">
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;"></p>
<p style="border: 0px none ; margin: 0px 0px 20px; padding: 0px;">We
can add new behaviour, like methods, to classes in Groovy dynamically.
So this means a method is not added to the class definition in the
source code, but to the class definition while an application is
already running. Groovy adds a<span class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">metaClass</code><span
 class="Apple-converted-space">&nbsp;</span>property to all classes for
this purpose. The type of this property is<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">ExpandoMetaClass</code>.
We can assign methods (also static), properties, constructors to the<span
 class="Apple-converted-space">&nbsp;</span><code
 style="border: 1px solid rgb(212, 217, 217); margin: 0px; padding: 1px 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9375em; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace; color: rgb(59, 59, 59); white-space: nowrap; text-shadow: none; background-color: rgb(239, 241, 241);">metaClass</code><span
 class="Apple-converted-space">&nbsp;</span>property and the defined
behaviour is added dynamically to the class definition. After we have
added our behaviour we can create a new instance of the class and
invoke the methods, constructors and access the properties just like we
are used to do.</p>
<pre class="brush:groovy"
 style="border: 0px none ; margin: 0px; padding: 0px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 16px; line-height: 24px; font-family: Menlo,Monaco,'Liberation Mono',Consolas,monospace;">// We add the method rightShift to the List class. <br>// The implementation is simply calling the remove method of List with<br>// the provided argument.<br>List.metaClass.rightShift {<br>    delegate.remove it<br>}<br><br>def list = ['one', 'two', 'three', 'four']<br>assert 4 == list.size()<br><br>list.rightShift 'two'<br>assert 3 == list.size()<br>assert ['one', 'three', 'four'] == list<br><br>// Operator overloading in action: rightShift is &gt;&gt;<br>list &gt;&gt; 'one'<br>assert 2 == list.size()<br>assert ['three', 'four'] == list<br><br><br>// We can also add behaviour to a specific instance instead of class.<br>// Notice we use the instance list instead of class List to assign <br>// method groovy to metaClass property.<br>list.metaClass.groovy {<br>    delegate.collect { it + ' groovy' }<br>}<br><br>assert ['three groovy', 'four groovy'] == list.groovy()<br><br>def newList = ['a', 'b']<br>try {<br>    newList.groovy()  // groovy method was added to list instance not List class.<br>    assert false<br>} catch (e) {<br>    assert e instanceof MissingMethodException<br>}</pre>
</div>
</body>
</html>
